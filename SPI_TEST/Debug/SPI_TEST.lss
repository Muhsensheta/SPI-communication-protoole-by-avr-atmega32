
SPI_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004d54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  00800060  00004d54  00004de8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  0080018c  0080018c  00004f14  2**0
                  ALLOC
  3 .stab         000046ec  00000000  00000000  00004f14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001904  00000000  00000000  00009600  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000af04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000b296  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000d6a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000ea27  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000fc00  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000fdc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  000100b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010a24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <__vector_1>
       8:	0c 94 34 0c 	jmp	0x1868	; 0x1868 <__vector_2>
       c:	0c 94 67 0c 	jmp	0x18ce	; 0x18ce <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 54 0a 	jmp	0x14a8	; 0x14a8 <__vector_10>
      2c:	0c 94 e5 09 	jmp	0x13ca	; 0x13ca <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	fd e4       	ldi	r31, 0x4D	; 77
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3a       	cpi	r26, 0xA4	; 164
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <main>
      8a:	0c 94 a8 26 	jmp	0x4d50	; 0x4d50 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 71 26 	jmp	0x4ce2	; 0x4ce2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8d 26 	jmp	0x4d1a	; 0x4d1a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7d 26 	jmp	0x4cfa	; 0x4cfa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 99 26 	jmp	0x4d32	; 0x4d32 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7d 26 	jmp	0x4cfa	; 0x4cfa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 99 26 	jmp	0x4d32	; 0x4d32 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 71 26 	jmp	0x4ce2	; 0x4ce2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8d 26 	jmp	0x4d1a	; 0x4d1a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 79 26 	jmp	0x4cf2	; 0x4cf2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 95 26 	jmp	0x4d2a	; 0x4d2a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 7d 26 	jmp	0x4cfa	; 0x4cfa <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 99 26 	jmp	0x4d32	; 0x4d32 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 7d 26 	jmp	0x4cfa	; 0x4cfa <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 99 26 	jmp	0x4d32	; 0x4d32 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 7d 26 	jmp	0x4cfa	; 0x4cfa <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 99 26 	jmp	0x4d32	; 0x4d32 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 81 26 	jmp	0x4d02	; 0x4d02 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 9d 26 	jmp	0x4d3a	; 0x4d3a <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 79 26 	jmp	0x4cf2	; 0x4cf2 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 95 26 	jmp	0x4d2a	; 0x4d2a <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <M_WDT_void_enable>:
#include"WDT_priv.h"
#include"WDT_config.h"
#include"WDT_int.h"

void M_WDT_void_enable(void)// open watcchdog
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR_REG,WDE_BIT);
     e36:	a1 e4       	ldi	r26, 0x41	; 65
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e1 e4       	ldi	r30, 0x41	; 65
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	88 60       	ori	r24, 0x08	; 8
     e42:	8c 93       	st	X, r24
}
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <M_WDT_void_disable>:
void M_WDT_void_disable(void)//turnoff WDT
{
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
	/* Write logical one to WDTOE and WDE */
	WDTCR_REG |= (1<<WDTOE_BIT) | (1<<WDE_BIT);
     e52:	a1 e4       	ldi	r26, 0x41	; 65
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e1 e4       	ldi	r30, 0x41	; 65
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	88 61       	ori	r24, 0x18	; 24
     e5e:	8c 93       	st	X, r24
	/* Turn off WDT */
	WDTCR_REG = 0x00;
     e60:	e1 e4       	ldi	r30, 0x41	; 65
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	10 82       	st	Z, r1
}
     e66:	cf 91       	pop	r28
     e68:	df 91       	pop	r29
     e6a:	08 95       	ret

00000e6c <M_WDT_void_sleep>:
void M_WDT_void_sleep(u8 copy_timeout)//time out
    {
     e6c:	df 93       	push	r29
     e6e:	cf 93       	push	r28
     e70:	0f 92       	push	r0
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	89 83       	std	Y+1, r24	; 0x01

	if((copy_timeout <= WDT_TIMEOUT_2_0_S ) &&(copy_timeout >= WDT_TIMEOUT_16_3_MS))
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	88 30       	cpi	r24, 0x08	; 8
     e7c:	40 f4       	brcc	.+16     	; 0xe8e <M_WDT_void_sleep+0x22>
	    {
       //step 1 apply mask
		//WDTCR_REG & = WDT_PRESCALER_MASK ;

	   // step 2 insert value
	   WDTCR_REG|=copy_timeout;
     e7e:	a1 e4       	ldi	r26, 0x41	; 65
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e1 e4       	ldi	r30, 0x41	; 65
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	90 81       	ld	r25, Z
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	89 2b       	or	r24, r25
     e8c:	8c 93       	st	X, r24
	     }

}
     e8e:	0f 90       	pop	r0
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <M_WDT_void_Refresh>:
void M_WDT_void_Refresh(void)
{
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
  asm("WDR");
     e9e:	a8 95       	wdr
}
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	08 95       	ret

00000ea6 <M_TIMER1_void_Init>:
#include "TIMER1_int.h"

static void (*ICU_CallBackPtr)(void)=NULL;

void M_TIMER1_void_Init()//mode normal  ,prescaler
{
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
	//set mood   as normal

	CLR_BIT(TCCR1A_REG,WGM10_BIT);
     eae:	af e4       	ldi	r26, 0x4F	; 79
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	ef e4       	ldi	r30, 0x4F	; 79
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	8e 7f       	andi	r24, 0xFE	; 254
     eba:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A_REG,WGM11_BIT);
     ebc:	af e4       	ldi	r26, 0x4F	; 79
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	ef e4       	ldi	r30, 0x4F	; 79
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	8d 7f       	andi	r24, 0xFD	; 253
     ec8:	8c 93       	st	X, r24

	CLR_BIT(TCCR1B_REG,WGM12_BIT );
     eca:	ae e4       	ldi	r26, 0x4E	; 78
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	ee e4       	ldi	r30, 0x4E	; 78
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	87 7f       	andi	r24, 0xF7	; 247
     ed6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,WGM13_BIT);
     ed8:	ae e4       	ldi	r26, 0x4E	; 78
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	ee e4       	ldi	r30, 0x4E	; 78
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	8f 7e       	andi	r24, 0xEF	; 239
     ee4:	8c 93       	st	X, r24

	//step 2: set prescaler as 256
	CLR_BIT(TCCR1B_REG ,CS10_BIT);
     ee6:	ae e4       	ldi	r26, 0x4E	; 78
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	ee e4       	ldi	r30, 0x4E	; 78
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	8e 7f       	andi	r24, 0xFE	; 254
     ef2:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG ,CS11_BIT);
     ef4:	ae e4       	ldi	r26, 0x4E	; 78
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	ee e4       	ldi	r30, 0x4E	; 78
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	8d 7f       	andi	r24, 0xFD	; 253
     f00:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG ,CS12_BIT);
     f02:	ae e4       	ldi	r26, 0x4E	; 78
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	ee e4       	ldi	r30, 0x4E	; 78
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	84 60       	ori	r24, 0x04	; 4
     f0e:	8c 93       	st	X, r24

}
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	08 95       	ret

00000f16 <M_TIMER1_ICU_void_Init>:
void M_TIMER1_ICU_void_Init()//setup initial trigger for ICU
{
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
	//set initial trigger as  rising
 SET_BIT(TCCR1B_REG,ICES1_BIT);
     f1e:	ae e4       	ldi	r26, 0x4E	; 78
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	ee e4       	ldi	r30, 0x4E	; 78
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	80 64       	ori	r24, 0x40	; 64
     f2a:	8c 93       	st	X, r24
}
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <M_TIMER1_ICU_void_INTEnable>:
void M_TIMER1_ICU_void_INTEnable(void)
{
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
//set interrupt
	SET_BIT(TIMSK_REG,TICIE1_BIT);
     f3a:	a9 e5       	ldi	r26, 0x59	; 89
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e9 e5       	ldi	r30, 0x59	; 89
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	80 62       	ori	r24, 0x20	; 32
     f46:	8c 93       	st	X, r24
}
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <M_TIMER1_ICU_void_INTDisable>:
void M_TIMER1_ICU_void_INTDisable(void)
{
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(TIMSK_REG,TICIE1_BIT);
     f56:	a9 e5       	ldi	r26, 0x59	; 89
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e9 e5       	ldi	r30, 0x59	; 89
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	8f 7d       	andi	r24, 0xDF	; 223
     f62:	8c 93       	st	X, r24
}
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	08 95       	ret

00000f6a <M_TIMER1_ICU_void_setTrigg>:
void M_TIMER1_ICU_void_setTrigg(u8 copy_u8Trigg)
{
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	00 d0       	rcall	.+0      	; 0xf70 <M_TIMER1_ICU_void_setTrigg+0x6>
     f70:	0f 92       	push	r0
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
     f76:	89 83       	std	Y+1, r24	; 0x01
   switch (copy_u8Trigg)
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	3b 83       	std	Y+3, r19	; 0x03
     f80:	2a 83       	std	Y+2, r18	; 0x02
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	9b 81       	ldd	r25, Y+3	; 0x03
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	31 f0       	breq	.+12     	; 0xf96 <M_TIMER1_ICU_void_setTrigg+0x2c>
     f8a:	2a 81       	ldd	r18, Y+2	; 0x02
     f8c:	3b 81       	ldd	r19, Y+3	; 0x03
     f8e:	21 30       	cpi	r18, 0x01	; 1
     f90:	31 05       	cpc	r19, r1
     f92:	49 f0       	breq	.+18     	; 0xfa6 <M_TIMER1_ICU_void_setTrigg+0x3c>
     f94:	0f c0       	rjmp	.+30     	; 0xfb4 <M_TIMER1_ICU_void_setTrigg+0x4a>
   {
   case TIMER1_ICU_FALL_TRIGG:
   CLR_BIT(TCCR1B_REG,ICES1_BIT);
     f96:	ae e4       	ldi	r26, 0x4E	; 78
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	ee e4       	ldi	r30, 0x4E	; 78
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	8f 7b       	andi	r24, 0xBF	; 191
     fa2:	8c 93       	st	X, r24
     fa4:	07 c0       	rjmp	.+14     	; 0xfb4 <M_TIMER1_ICU_void_setTrigg+0x4a>
	    break;
   case TIMER1_ICU_RISING_TRIGG:
	   SET_BIT(TCCR1B_REG,ICES1_BIT);
     fa6:	ae e4       	ldi	r26, 0x4E	; 78
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	ee e4       	ldi	r30, 0x4E	; 78
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	80 64       	ori	r24, 0x40	; 64
     fb2:	8c 93       	st	X, r24
   	   break;
   }
}
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <M_TIMER1_ICU_u16_takeReading>:
u16 M_TIMER1_ICU_u16_takeReading(void)
{
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
	return ICR1_REG;
     fc8:	e6 e4       	ldi	r30, 0x46	; 70
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	91 81       	ldd	r25, Z+1	; 0x01
}
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <M_TIMER1_ICU_void_setCallback>:
void M_TIMER1_ICU_void_setCallback(void(*ptrfn)(void))
{
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	00 d0       	rcall	.+0      	; 0xfdc <M_TIMER1_ICU_void_setCallback+0x6>
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	9a 83       	std	Y+2, r25	; 0x02
     fe2:	89 83       	std	Y+1, r24	; 0x01
	if(ptrfn != NULL)
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	9a 81       	ldd	r25, Y+2	; 0x02
     fe8:	00 97       	sbiw	r24, 0x00	; 0
     fea:	31 f0       	breq	.+12     	; 0xff8 <M_TIMER1_ICU_void_setCallback+0x22>
	{
		ICU_CallBackPtr=ptrfn;
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	9a 81       	ldd	r25, Y+2	; 0x02
     ff0:	90 93 8d 01 	sts	0x018D, r25
     ff4:	80 93 8c 01 	sts	0x018C, r24
	}

}
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1002:	1f 92       	push	r1
    1004:	0f 92       	push	r0
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	0f 92       	push	r0
    100a:	11 24       	eor	r1, r1
    100c:	2f 93       	push	r18
    100e:	3f 93       	push	r19
    1010:	4f 93       	push	r20
    1012:	5f 93       	push	r21
    1014:	6f 93       	push	r22
    1016:	7f 93       	push	r23
    1018:	8f 93       	push	r24
    101a:	9f 93       	push	r25
    101c:	af 93       	push	r26
    101e:	bf 93       	push	r27
    1020:	ef 93       	push	r30
    1022:	ff 93       	push	r31
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
	if(ICU_CallBackPtr!=NULL)
    102c:	80 91 8c 01 	lds	r24, 0x018C
    1030:	90 91 8d 01 	lds	r25, 0x018D
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	29 f0       	breq	.+10     	; 0x1042 <__vector_7+0x40>
	{
		ICU_CallBackPtr();
    1038:	e0 91 8c 01 	lds	r30, 0x018C
    103c:	f0 91 8d 01 	lds	r31, 0x018D
    1040:	09 95       	icall
	}
}
    1042:	cf 91       	pop	r28
    1044:	df 91       	pop	r29
    1046:	ff 91       	pop	r31
    1048:	ef 91       	pop	r30
    104a:	bf 91       	pop	r27
    104c:	af 91       	pop	r26
    104e:	9f 91       	pop	r25
    1050:	8f 91       	pop	r24
    1052:	7f 91       	pop	r23
    1054:	6f 91       	pop	r22
    1056:	5f 91       	pop	r21
    1058:	4f 91       	pop	r20
    105a:	3f 91       	pop	r19
    105c:	2f 91       	pop	r18
    105e:	0f 90       	pop	r0
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	0f 90       	pop	r0
    1064:	1f 90       	pop	r1
    1066:	18 95       	reti

00001068 <M_TIMER0_void_Init>:

static u32 NumberOfOverflows=0;
static u32  NumberOfRemainingTicks=0;
static void(*Arr_Call_Back[2])(void)={NULL,NULL};
void M_TIMER0_void_Init(void)//set timer mood,set OC0 pin mood
{
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
       #else
          #error ("wrong insert node")
       #endif
 #elif  (TIMER0_MODE==TIMER0_FAST_PWM_MODE)

	SET_BIT(TCCR0_REG,WGM00_BIT);
    1070:	a3 e5       	ldi	r26, 0x53	; 83
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e3 e5       	ldi	r30, 0x53	; 83
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	80 64       	ori	r24, 0x40	; 64
    107c:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,WGM01_BIT);
    107e:	a3 e5       	ldi	r26, 0x53	; 83
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e3 e5       	ldi	r30, 0x53	; 83
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	88 60       	ori	r24, 0x08	; 8
    108a:	8c 93       	st	X, r24
    #if(TIMER0_OC0_MODE==TIMER0_PWM_NON_INVERTED||TIMER0_OC0_MODE== TIMER0_PWM_INVERTED)
	//step1 apply mask
	TCCR0_REG&= TIMER0_OC0_MASK;
    108c:	a3 e5       	ldi	r26, 0x53	; 83
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e3 e5       	ldi	r30, 0x53	; 83
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	8f 7c       	andi	r24, 0xCF	; 207
    1098:	8c 93       	st	X, r24
	 TCCR0_REG|=TIMER0_OC0_MODE;
    109a:	a3 e5       	ldi	r26, 0x53	; 83
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e3 e5       	ldi	r30, 0x53	; 83
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	80 62       	ori	r24, 0x20	; 32
    10a6:	8c 93       	st	X, r24


#else
#error();
#endif
}
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <M_TIMER0_void_start>:
void M_TIMER0_void_start(void)//set clock prescaler
{
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
#if(TIMER0_PRESCALER>=TIMER0_PRESCALER_NO_CLK&&TIMER0_PRESCALER<=TIMER0_PRESCALER_EXTCLK_RAIS_EDGE)
	TCCR0_REG &=TIMER0_PRESCALER_MASK;
    10b6:	a3 e5       	ldi	r26, 0x53	; 83
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e3 e5       	ldi	r30, 0x53	; 83
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	88 7f       	andi	r24, 0xF8	; 248
    10c2:	8c 93       	st	X, r24
	TCCR0_REG |=TIMER0_PRESCALER;
    10c4:	a3 e5       	ldi	r26, 0x53	; 83
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e3 e5       	ldi	r30, 0x53	; 83
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	84 60       	ori	r24, 0x04	; 4
    10d0:	8c 93       	st	X, r24
#else
#error("invalid prescaler")
#endif
}
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	08 95       	ret

000010d8 <M_TIMER0_void_stop>:
void M_TIMER0_void_stop(void)// NO CLOCK
{
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG &=TIMER0_PRESCALER_MASK;
    10e0:	a3 e5       	ldi	r26, 0x53	; 83
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e3 e5       	ldi	r30, 0x53	; 83
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	88 7f       	andi	r24, 0xF8	; 248
    10ec:	8c 93       	st	X, r24
}
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <M_TIMER0_void_setTime>:
void M_TIMER0_void_setTime(u32 copy_u32timeMS)//time in milli seconds;
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	a5 97       	sbiw	r28, 0x25	; 37
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	6d 8f       	std	Y+29, r22	; 0x1d
    110a:	7e 8f       	std	Y+30, r23	; 0x1e
    110c:	8f 8f       	std	Y+31, r24	; 0x1f
    110e:	98 a3       	std	Y+32, r25	; 0x20
	u32 Loc_prescalerArr[]={1,8,64,256,1024};
    1110:	ce 01       	movw	r24, r28
    1112:	09 96       	adiw	r24, 0x09	; 9
    1114:	9a a3       	std	Y+34, r25	; 0x22
    1116:	89 a3       	std	Y+33, r24	; 0x21
    1118:	e8 e6       	ldi	r30, 0x68	; 104
    111a:	f1 e0       	ldi	r31, 0x01	; 1
    111c:	fc a3       	std	Y+36, r31	; 0x24
    111e:	eb a3       	std	Y+35, r30	; 0x23
    1120:	f4 e1       	ldi	r31, 0x14	; 20
    1122:	fd a3       	std	Y+37, r31	; 0x25
    1124:	eb a1       	ldd	r30, Y+35	; 0x23
    1126:	fc a1       	ldd	r31, Y+36	; 0x24
    1128:	00 80       	ld	r0, Z
    112a:	8b a1       	ldd	r24, Y+35	; 0x23
    112c:	9c a1       	ldd	r25, Y+36	; 0x24
    112e:	01 96       	adiw	r24, 0x01	; 1
    1130:	9c a3       	std	Y+36, r25	; 0x24
    1132:	8b a3       	std	Y+35, r24	; 0x23
    1134:	e9 a1       	ldd	r30, Y+33	; 0x21
    1136:	fa a1       	ldd	r31, Y+34	; 0x22
    1138:	00 82       	st	Z, r0
    113a:	89 a1       	ldd	r24, Y+33	; 0x21
    113c:	9a a1       	ldd	r25, Y+34	; 0x22
    113e:	01 96       	adiw	r24, 0x01	; 1
    1140:	9a a3       	std	Y+34, r25	; 0x22
    1142:	89 a3       	std	Y+33, r24	; 0x21
    1144:	9d a1       	ldd	r25, Y+37	; 0x25
    1146:	91 50       	subi	r25, 0x01	; 1
    1148:	9d a3       	std	Y+37, r25	; 0x25
    114a:	ed a1       	ldd	r30, Y+37	; 0x25
    114c:	ee 23       	and	r30, r30
    114e:	51 f7       	brne	.-44     	; 0x1124 <M_TIMER0_void_setTime+0x30>
	f32 Locticktime=(f32)Loc_prescalerArr[TIMER0_PRESCALER-1]/FCPU;
    1150:	8d 89       	ldd	r24, Y+21	; 0x15
    1152:	9e 89       	ldd	r25, Y+22	; 0x16
    1154:	af 89       	ldd	r26, Y+23	; 0x17
    1156:	b8 8d       	ldd	r27, Y+24	; 0x18
    1158:	bc 01       	movw	r22, r24
    115a:	cd 01       	movw	r24, r26
    115c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	bc 01       	movw	r22, r24
    1166:	cd 01       	movw	r24, r26
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	40 e8       	ldi	r20, 0x80	; 128
    116e:	51 e4       	ldi	r21, 0x41	; 65
    1170:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1174:	dc 01       	movw	r26, r24
    1176:	cb 01       	movw	r24, r22
    1178:	8d 83       	std	Y+5, r24	; 0x05
    117a:	9e 83       	std	Y+6, r25	; 0x06
    117c:	af 83       	std	Y+7, r26	; 0x07
    117e:	b8 87       	std	Y+8, r27	; 0x08
	u32  NoOfDesiredTicks=(copy_u32timeMS*1000)/Locticktime;
    1180:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1182:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1184:	af 8d       	ldd	r26, Y+31	; 0x1f
    1186:	b8 a1       	ldd	r27, Y+32	; 0x20
    1188:	28 ee       	ldi	r18, 0xE8	; 232
    118a:	33 e0       	ldi	r19, 0x03	; 3
    118c:	40 e0       	ldi	r20, 0x00	; 0
    118e:	50 e0       	ldi	r21, 0x00	; 0
    1190:	bc 01       	movw	r22, r24
    1192:	cd 01       	movw	r24, r26
    1194:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <__mulsi3>
    1198:	dc 01       	movw	r26, r24
    119a:	cb 01       	movw	r24, r22
    119c:	bc 01       	movw	r22, r24
    119e:	cd 01       	movw	r24, r26
    11a0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    11a4:	dc 01       	movw	r26, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	bc 01       	movw	r22, r24
    11aa:	cd 01       	movw	r24, r26
    11ac:	2d 81       	ldd	r18, Y+5	; 0x05
    11ae:	3e 81       	ldd	r19, Y+6	; 0x06
    11b0:	4f 81       	ldd	r20, Y+7	; 0x07
    11b2:	58 85       	ldd	r21, Y+8	; 0x08
    11b4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    11b8:	dc 01       	movw	r26, r24
    11ba:	cb 01       	movw	r24, r22
    11bc:	bc 01       	movw	r22, r24
    11be:	cd 01       	movw	r24, r26
    11c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c4:	dc 01       	movw	r26, r24
    11c6:	cb 01       	movw	r24, r22
    11c8:	89 83       	std	Y+1, r24	; 0x01
    11ca:	9a 83       	std	Y+2, r25	; 0x02
    11cc:	ab 83       	std	Y+3, r26	; 0x03
    11ce:	bc 83       	std	Y+4, r27	; 0x04
		NumberOfOverflows++;
	}
#elif  (TIMER0_MODE == TIMER0_CTC_MODE)

#endif
}
    11d0:	a5 96       	adiw	r28, 0x25	; 37
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	de bf       	out	0x3e, r29	; 62
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	cd bf       	out	0x3d, r28	; 61
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	08 95       	ret

000011e2 <M_TIMER0_void_EnableInt>:
void M_TIMER0_void_EnableInt(u32 copy_u8IntID)
{
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	28 97       	sbiw	r28, 0x08	; 8
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	f8 94       	cli
    11f0:	de bf       	out	0x3e, r29	; 62
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	cd bf       	out	0x3d, r28	; 61
    11f6:	69 83       	std	Y+1, r22	; 0x01
    11f8:	7a 83       	std	Y+2, r23	; 0x02
    11fa:	8b 83       	std	Y+3, r24	; 0x03
    11fc:	9c 83       	std	Y+4, r25	; 0x04
	switch(copy_u8IntID)
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	9a 81       	ldd	r25, Y+2	; 0x02
    1202:	ab 81       	ldd	r26, Y+3	; 0x03
    1204:	bc 81       	ldd	r27, Y+4	; 0x04
    1206:	8d 83       	std	Y+5, r24	; 0x05
    1208:	9e 83       	std	Y+6, r25	; 0x06
    120a:	af 83       	std	Y+7, r26	; 0x07
    120c:	b8 87       	std	Y+8, r27	; 0x08
    120e:	8d 81       	ldd	r24, Y+5	; 0x05
    1210:	9e 81       	ldd	r25, Y+6	; 0x06
    1212:	af 81       	ldd	r26, Y+7	; 0x07
    1214:	b8 85       	ldd	r27, Y+8	; 0x08
    1216:	00 97       	sbiw	r24, 0x00	; 0
    1218:	a1 05       	cpc	r26, r1
    121a:	b1 05       	cpc	r27, r1
    121c:	51 f0       	breq	.+20     	; 0x1232 <M_TIMER0_void_EnableInt+0x50>
    121e:	8d 81       	ldd	r24, Y+5	; 0x05
    1220:	9e 81       	ldd	r25, Y+6	; 0x06
    1222:	af 81       	ldd	r26, Y+7	; 0x07
    1224:	b8 85       	ldd	r27, Y+8	; 0x08
    1226:	81 30       	cpi	r24, 0x01	; 1
    1228:	91 05       	cpc	r25, r1
    122a:	a1 05       	cpc	r26, r1
    122c:	b1 05       	cpc	r27, r1
    122e:	49 f0       	breq	.+18     	; 0x1242 <M_TIMER0_void_EnableInt+0x60>
    1230:	0f c0       	rjmp	.+30     	; 0x1250 <M_TIMER0_void_EnableInt+0x6e>
	{
	case TIMER0_OVF_INT_ID:
		SET_BIT(TIMSK_REG,TOIE0_BIT);
    1232:	a9 e5       	ldi	r26, 0x59	; 89
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e9 e5       	ldi	r30, 0x59	; 89
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	81 60       	ori	r24, 0x01	; 1
    123e:	8c 93       	st	X, r24
    1240:	07 c0       	rjmp	.+14     	; 0x1250 <M_TIMER0_void_EnableInt+0x6e>
		break;
	case TIMER0_COMP_INT_ID:
	SET_BIT(TIMSK_REG,OCIE0_BIT);
    1242:	a9 e5       	ldi	r26, 0x59	; 89
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	e9 e5       	ldi	r30, 0x59	; 89
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	82 60       	ori	r24, 0x02	; 2
    124e:	8c 93       	st	X, r24
			break;
	}
	//METHOD 2
	if(copy_u8IntID >= TIMER0_OVF_INT_ID && copy_u8IntID <= TIMER0_COMP_INT_ID )
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	9a 81       	ldd	r25, Y+2	; 0x02
    1254:	ab 81       	ldd	r26, Y+3	; 0x03
    1256:	bc 81       	ldd	r27, Y+4	; 0x04
    1258:	82 30       	cpi	r24, 0x02	; 2
    125a:	91 05       	cpc	r25, r1
    125c:	a1 05       	cpc	r26, r1
    125e:	b1 05       	cpc	r27, r1
    1260:	90 f4       	brcc	.+36     	; 0x1286 <M_TIMER0_void_EnableInt+0xa4>
		{
			SET_BIT(TIMSK_REG,copy_u8IntID);
    1262:	a9 e5       	ldi	r26, 0x59	; 89
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	e9 e5       	ldi	r30, 0x59	; 89
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	48 2f       	mov	r20, r24
    126e:	29 81       	ldd	r18, Y+1	; 0x01
    1270:	3a 81       	ldd	r19, Y+2	; 0x02
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	02 2e       	mov	r0, r18
    1278:	02 c0       	rjmp	.+4      	; 0x127e <M_TIMER0_void_EnableInt+0x9c>
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	0a 94       	dec	r0
    1280:	e2 f7       	brpl	.-8      	; 0x127a <M_TIMER0_void_EnableInt+0x98>
    1282:	84 2b       	or	r24, r20
    1284:	8c 93       	st	X, r24
		}

}
    1286:	28 96       	adiw	r28, 0x08	; 8
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	cd bf       	out	0x3d, r28	; 61
    1292:	cf 91       	pop	r28
    1294:	df 91       	pop	r29
    1296:	08 95       	ret

00001298 <M_TIMER0_void_DisableInt>:
void M_TIMER0_void_DisableInt(u32 copy_u8IntID)
{
    1298:	df 93       	push	r29
    129a:	cf 93       	push	r28
    129c:	00 d0       	rcall	.+0      	; 0x129e <M_TIMER0_void_DisableInt+0x6>
    129e:	00 d0       	rcall	.+0      	; 0x12a0 <M_TIMER0_void_DisableInt+0x8>
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	69 83       	std	Y+1, r22	; 0x01
    12a6:	7a 83       	std	Y+2, r23	; 0x02
    12a8:	8b 83       	std	Y+3, r24	; 0x03
    12aa:	9c 83       	std	Y+4, r25	; 0x04
		CLR_BIT(TIMSK_REG;OCIE0_BIT)
				break;
		}*/
	//METHOD 2

	CLR_BIT(TIMSK_REG,copy_u8IntID);
    12ac:	a9 e5       	ldi	r26, 0x59	; 89
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e9 e5       	ldi	r30, 0x59	; 89
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	48 2f       	mov	r20, r24
    12b8:	29 81       	ldd	r18, Y+1	; 0x01
    12ba:	3a 81       	ldd	r19, Y+2	; 0x02
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	02 2e       	mov	r0, r18
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <M_TIMER0_void_DisableInt+0x30>
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	0a 94       	dec	r0
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <M_TIMER0_void_DisableInt+0x2c>
    12cc:	80 95       	com	r24
    12ce:	84 23       	and	r24, r20
    12d0:	8c 93       	st	X, r24
  }
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	08 95       	ret

000012e0 <M_TIMER0_void_setCallBack>:
void M_TIMER0_void_setCallBack(void(*ptrfn)(void),u8 copy_u8IntID)
{
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <M_TIMER0_void_setCallBack+0x6>
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <M_TIMER0_void_setCallBack+0x8>
    12e8:	0f 92       	push	r0
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	9a 83       	std	Y+2, r25	; 0x02
    12f0:	89 83       	std	Y+1, r24	; 0x01
    12f2:	6b 83       	std	Y+3, r22	; 0x03
	switch (copy_u8IntID)
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	3d 83       	std	Y+5, r19	; 0x05
    12fc:	2c 83       	std	Y+4, r18	; 0x04
    12fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1300:	9d 81       	ldd	r25, Y+5	; 0x05
    1302:	00 97       	sbiw	r24, 0x00	; 0
    1304:	31 f0       	breq	.+12     	; 0x1312 <M_TIMER0_void_setCallBack+0x32>
    1306:	2c 81       	ldd	r18, Y+4	; 0x04
    1308:	3d 81       	ldd	r19, Y+5	; 0x05
    130a:	21 30       	cpi	r18, 0x01	; 1
    130c:	31 05       	cpc	r19, r1
    130e:	41 f0       	breq	.+16     	; 0x1320 <M_TIMER0_void_setCallBack+0x40>
    1310:	0d c0       	rjmp	.+26     	; 0x132c <M_TIMER0_void_setCallBack+0x4c>
	{
	case TIMER0_OVF_INT_ID:
		Arr_Call_Back[0]=ptrfn;
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	9a 81       	ldd	r25, Y+2	; 0x02
    1316:	90 93 97 01 	sts	0x0197, r25
    131a:	80 93 96 01 	sts	0x0196, r24
    131e:	06 c0       	rjmp	.+12     	; 0x132c <M_TIMER0_void_setCallBack+0x4c>
		break;
	case TIMER0_COMP_INT_ID:
		Arr_Call_Back[1]=ptrfn;
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	9a 81       	ldd	r25, Y+2	; 0x02
    1324:	90 93 99 01 	sts	0x0199, r25
    1328:	80 93 98 01 	sts	0x0198, r24
		break;
	}
	//method 2
	Arr_Call_Back[copy_u8IntID]=ptrfn;
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	88 2f       	mov	r24, r24
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	88 0f       	add	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	fc 01       	movw	r30, r24
    1338:	ea 56       	subi	r30, 0x6A	; 106
    133a:	fe 4f       	sbci	r31, 0xFE	; 254
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	9a 81       	ldd	r25, Y+2	; 0x02
    1340:	91 83       	std	Z+1, r25	; 0x01
    1342:	80 83       	st	Z, r24
}
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <M_TIMER0_void_setFastPWM>:
void M_TIMER0_void_setFastPWM(u8 copy_u8Duty)
{
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	00 d0       	rcall	.+0      	; 0x135a <M_TIMER0_void_setFastPWM+0x6>
    135a:	00 d0       	rcall	.+0      	; 0x135c <M_TIMER0_void_setFastPWM+0x8>
    135c:	0f 92       	push	r0
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	89 83       	std	Y+1, r24	; 0x01
#if(TIMER0_MODE ==TIMER0_FAST_PWM_MODE)
     #if(TIMER0_OC0_MODE ==TIMER0_PWM_NON_INVERTED)
	 OCR0_REG=abs(((copy_u8Duty*256)/100)-1);
    1364:	8c e5       	ldi	r24, 0x5C	; 92
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	9d 83       	std	Y+5, r25	; 0x05
    136a:	8c 83       	std	Y+4, r24	; 0x04
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	88 2f       	mov	r24, r24
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	98 2f       	mov	r25, r24
    1374:	88 27       	eor	r24, r24
    1376:	24 e6       	ldi	r18, 0x64	; 100
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	b9 01       	movw	r22, r18
    137c:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <__divmodhi4>
    1380:	cb 01       	movw	r24, r22
    1382:	01 97       	sbiw	r24, 0x01	; 1
    1384:	9b 83       	std	Y+3, r25	; 0x03
    1386:	8a 83       	std	Y+2, r24	; 0x02
    1388:	ea 81       	ldd	r30, Y+2	; 0x02
    138a:	fb 81       	ldd	r31, Y+3	; 0x03
    138c:	ff 23       	and	r31, r31
    138e:	3c f4       	brge	.+14     	; 0x139e <M_TIMER0_void_setFastPWM+0x4a>
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	9b 81       	ldd	r25, Y+3	; 0x03
    1394:	90 95       	com	r25
    1396:	81 95       	neg	r24
    1398:	9f 4f       	sbci	r25, 0xFF	; 255
    139a:	9b 83       	std	Y+3, r25	; 0x03
    139c:	8a 83       	std	Y+2, r24	; 0x02
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	ec 81       	ldd	r30, Y+4	; 0x04
    13a2:	fd 81       	ldd	r31, Y+5	; 0x05
    13a4:	80 83       	st	Z, r24
	 OCR0_REG=255-(((copy_u8Duty*256)/100)-1);
      #else
        #error("wrong insert mode")
      #endif
#endif
}
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <M_TIMER0_void_setPhasecorrectPWM>:
void M_TIMER0_void_setPhasecorrectPWM(u8 copy_u8Duty)
{
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	0f 92       	push	r0
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	89 83       	std	Y+1, r24	; 0x01
	 OCR0_REG=(255-(copy_u8Duty*255)/100);
      #else
        #error("wrong insert mode")
      #endif
#endif
}
    13c2:	0f 90       	pop	r0
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <__vector_11>:
ISR(TIMER0_OVF_vect)
{
    13ca:	1f 92       	push	r1
    13cc:	0f 92       	push	r0
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	0f 92       	push	r0
    13d2:	11 24       	eor	r1, r1
    13d4:	2f 93       	push	r18
    13d6:	3f 93       	push	r19
    13d8:	4f 93       	push	r20
    13da:	5f 93       	push	r21
    13dc:	6f 93       	push	r22
    13de:	7f 93       	push	r23
    13e0:	8f 93       	push	r24
    13e2:	9f 93       	push	r25
    13e4:	af 93       	push	r26
    13e6:	bf 93       	push	r27
    13e8:	ef 93       	push	r30
    13ea:	ff 93       	push	r31
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
	static u32 Loc_Overflow_Count=0;
		Loc_Overflow_Count++;
    13f4:	80 91 9a 01 	lds	r24, 0x019A
    13f8:	90 91 9b 01 	lds	r25, 0x019B
    13fc:	a0 91 9c 01 	lds	r26, 0x019C
    1400:	b0 91 9d 01 	lds	r27, 0x019D
    1404:	01 96       	adiw	r24, 0x01	; 1
    1406:	a1 1d       	adc	r26, r1
    1408:	b1 1d       	adc	r27, r1
    140a:	80 93 9a 01 	sts	0x019A, r24
    140e:	90 93 9b 01 	sts	0x019B, r25
    1412:	a0 93 9c 01 	sts	0x019C, r26
    1416:	b0 93 9d 01 	sts	0x019D, r27
		if(Loc_Overflow_Count==NumberOfOverflows)
    141a:	20 91 9a 01 	lds	r18, 0x019A
    141e:	30 91 9b 01 	lds	r19, 0x019B
    1422:	40 91 9c 01 	lds	r20, 0x019C
    1426:	50 91 9d 01 	lds	r21, 0x019D
    142a:	80 91 8e 01 	lds	r24, 0x018E
    142e:	90 91 8f 01 	lds	r25, 0x018F
    1432:	a0 91 90 01 	lds	r26, 0x0190
    1436:	b0 91 91 01 	lds	r27, 0x0191
    143a:	28 17       	cp	r18, r24
    143c:	39 07       	cpc	r19, r25
    143e:	4a 07       	cpc	r20, r26
    1440:	5b 07       	cpc	r21, r27
    1442:	f9 f4       	brne	.+62     	; 0x1482 <__vector_11+0xb8>
		{
			TCNT0_REG=256-NumberOfRemainingTicks;
    1444:	e2 e5       	ldi	r30, 0x52	; 82
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 91 92 01 	lds	r24, 0x0192
    144c:	90 91 93 01 	lds	r25, 0x0193
    1450:	a0 91 94 01 	lds	r26, 0x0194
    1454:	b0 91 95 01 	lds	r27, 0x0195
    1458:	81 95       	neg	r24
    145a:	80 83       	st	Z, r24
			Loc_Overflow_Count=0;
    145c:	10 92 9a 01 	sts	0x019A, r1
    1460:	10 92 9b 01 	sts	0x019B, r1
    1464:	10 92 9c 01 	sts	0x019C, r1
    1468:	10 92 9d 01 	sts	0x019D, r1
	       if(Arr_Call_Back[TIMER0_OVF_INT_ID]!=NULL)
    146c:	80 91 96 01 	lds	r24, 0x0196
    1470:	90 91 97 01 	lds	r25, 0x0197
    1474:	00 97       	sbiw	r24, 0x00	; 0
    1476:	29 f0       	breq	.+10     	; 0x1482 <__vector_11+0xb8>
	         {
	            	Arr_Call_Back[TIMER0_OVF_INT_ID]();
    1478:	e0 91 96 01 	lds	r30, 0x0196
    147c:	f0 91 97 01 	lds	r31, 0x0197
    1480:	09 95       	icall
	         }
	}
}
    1482:	cf 91       	pop	r28
    1484:	df 91       	pop	r29
    1486:	ff 91       	pop	r31
    1488:	ef 91       	pop	r30
    148a:	bf 91       	pop	r27
    148c:	af 91       	pop	r26
    148e:	9f 91       	pop	r25
    1490:	8f 91       	pop	r24
    1492:	7f 91       	pop	r23
    1494:	6f 91       	pop	r22
    1496:	5f 91       	pop	r21
    1498:	4f 91       	pop	r20
    149a:	3f 91       	pop	r19
    149c:	2f 91       	pop	r18
    149e:	0f 90       	pop	r0
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	0f 90       	pop	r0
    14a4:	1f 90       	pop	r1
    14a6:	18 95       	reti

000014a8 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
    14a8:	1f 92       	push	r1
    14aa:	0f 92       	push	r0
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	0f 92       	push	r0
    14b0:	11 24       	eor	r1, r1
    14b2:	2f 93       	push	r18
    14b4:	3f 93       	push	r19
    14b6:	4f 93       	push	r20
    14b8:	5f 93       	push	r21
    14ba:	6f 93       	push	r22
    14bc:	7f 93       	push	r23
    14be:	8f 93       	push	r24
    14c0:	9f 93       	push	r25
    14c2:	af 93       	push	r26
    14c4:	bf 93       	push	r27
    14c6:	ef 93       	push	r30
    14c8:	ff 93       	push	r31
    14ca:	df 93       	push	r29
    14cc:	cf 93       	push	r28
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62

	if(Arr_Call_Back[TIMER0_COMP_INT_ID]!=NULL)
    14d2:	80 91 98 01 	lds	r24, 0x0198
    14d6:	90 91 99 01 	lds	r25, 0x0199
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	29 f0       	breq	.+10     	; 0x14e8 <__vector_10+0x40>
	{
		Arr_Call_Back[TIMER0_COMP_INT_ID]();
    14de:	e0 91 98 01 	lds	r30, 0x0198
    14e2:	f0 91 99 01 	lds	r31, 0x0199
    14e6:	09 95       	icall
	}

}
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	ff 91       	pop	r31
    14ee:	ef 91       	pop	r30
    14f0:	bf 91       	pop	r27
    14f2:	af 91       	pop	r26
    14f4:	9f 91       	pop	r25
    14f6:	8f 91       	pop	r24
    14f8:	7f 91       	pop	r23
    14fa:	6f 91       	pop	r22
    14fc:	5f 91       	pop	r21
    14fe:	4f 91       	pop	r20
    1500:	3f 91       	pop	r19
    1502:	2f 91       	pop	r18
    1504:	0f 90       	pop	r0
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	0f 90       	pop	r0
    150a:	1f 90       	pop	r1
    150c:	18 95       	reti

0000150e <M_SPI_void_MasterInit>:
#include"SPI_priv.h"
#include"SPI_config.h"
#include"SPI_int.h"

void M_SPI_void_MasterInit(void)
{
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
	/* Set MOSI and SCK output, all others input */
	M_DIO_void_setPinDir(PORTB_ID, SPI_MOSI, OUT);
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	65 e0       	ldi	r22, 0x05	; 5
    151a:	41 e0       	ldi	r20, 0x01	; 1
    151c:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(PORTB_ID,SPI_CLK, OUT);
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	67 e0       	ldi	r22, 0x07	; 7
    1524:	41 e0       	ldi	r20, 0x01	; 1
    1526:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(PORTB_ID,SPI_SS, OUT);
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	64 e0       	ldi	r22, 0x04	; 4
    152e:	41 e0       	ldi	r20, 0x01	; 1
    1530:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>

	/* Enable SPI, Master, set clock rate fck/16 */


	SET_BIT(SPCR_REG,  MSTR_BIT);
    1534:	ad e2       	ldi	r26, 0x2D	; 45
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	ed e2       	ldi	r30, 0x2D	; 45
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	80 61       	ori	r24, 0x10	; 16
    1540:	8c 93       	st	X, r24
	SET_BIT(SPCR_REG, SPR0_BIT);
    1542:	ad e2       	ldi	r26, 0x2D	; 45
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	ed e2       	ldi	r30, 0x2D	; 45
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	81 60       	ori	r24, 0x01	; 1
    154e:	8c 93       	st	X, r24
	SET_BIT(SPCR_REG, SPE_BIT);
    1550:	ad e2       	ldi	r26, 0x2D	; 45
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	ed e2       	ldi	r30, 0x2D	; 45
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	80 64       	ori	r24, 0x40	; 64
    155c:	8c 93       	st	X, r24

}
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	08 95       	ret

00001564 <M_SPI_void_MasterTransmit>:
void M_SPI_void_MasterTransmit(u8 copy_u8Data)
{
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	0f 92       	push	r0
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
    156e:	89 83       	std	Y+1, r24	; 0x01
	/* Start transmission */
	SPDR_REG = copy_u8Data;
    1570:	ef e2       	ldi	r30, 0x2F	; 47
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	80 83       	st	Z, r24

	/* Wait for transmission complete */
	while(!(SPSR_REG & (1<<SPIF_BIT)));
    1578:	ee e2       	ldi	r30, 0x2E	; 46
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	88 23       	and	r24, r24
    1580:	dc f7       	brge	.-10     	; 0x1578 <M_SPI_void_MasterTransmit+0x14>

}
    1582:	0f 90       	pop	r0
    1584:	cf 91       	pop	r28
    1586:	df 91       	pop	r29
    1588:	08 95       	ret

0000158a <M_SPI_void_SlaveInit>:
void M_SPI_void_SlaveInit()
{
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
	/* Set MISO output, all others input */

	M_DIO_void_setPinDir(PORTB_ID,SPI_MISO,OUT);
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	66 e0       	ldi	r22, 0x06	; 6
    1596:	41 e0       	ldi	r20, 0x01	; 1
    1598:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>
	/* Enable SPI */

	SET_BIT(SPCR_REG,SPE_BIT);
    159c:	ad e2       	ldi	r26, 0x2D	; 45
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	ed e2       	ldi	r30, 0x2D	; 45
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	80 64       	ori	r24, 0x40	; 64
    15a8:	8c 93       	st	X, r24
}
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	08 95       	ret

000015b0 <M_SPI_void_SlaveReceive>:
u8 M_SPI_void_SlaveReceive()
{
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
	/* Wait for reception complete */
	while(!(SPSR_REG & (1<<SPIF_BIT)));
    15b8:	ee e2       	ldi	r30, 0x2E	; 46
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	88 23       	and	r24, r24
    15c0:	dc f7       	brge	.-10     	; 0x15b8 <M_SPI_void_SlaveReceive+0x8>
	/* Return data register */
	return SPDR_REG;
    15c2:	ef e2       	ldi	r30, 0x2F	; 47
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z

}
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <M_GIE_void_enable>:
#include"GIE_priv.h"
#include"GIE_config.h"
#include"GIE_int.h"

void M_GIE_void_enable(void)
{
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
SET_BIT(SREG_REG,I_BIT);
    15d6:	af e5       	ldi	r26, 0x5F	; 95
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	ef e5       	ldi	r30, 0x5F	; 95
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	80 68       	ori	r24, 0x80	; 128
    15e2:	8c 93       	st	X, r24
asm("SEI");
    15e4:	78 94       	sei

}
    15e6:	cf 91       	pop	r28
    15e8:	df 91       	pop	r29
    15ea:	08 95       	ret

000015ec <M_GIE_void_disable>:
void M_GIE_void_disable(void)
{
    15ec:	df 93       	push	r29
    15ee:	cf 93       	push	r28
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
	//CLR_BIT(SREG_REG ,I_BIt);
	asm("CLI");
    15f4:	f8 94       	cli
}
    15f6:	cf 91       	pop	r28
    15f8:	df 91       	pop	r29
    15fa:	08 95       	ret

000015fc <M_EXTI_void_Enable>:
#include"EXT1_int.h"

//arra of 3 pointers to function ( call back function )
static void (*Arr_CallBack[3]) (void)={NULL,NULL,NULL};
void M_EXTI_void_Enable(u8 copy_u8IntID,u8 copy_u8Sense)
{
    15fc:	df 93       	push	r29
    15fe:	cf 93       	push	r28
    1600:	00 d0       	rcall	.+0      	; 0x1602 <M_EXTI_void_Enable+0x6>
    1602:	00 d0       	rcall	.+0      	; 0x1604 <M_EXTI_void_Enable+0x8>
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	89 83       	std	Y+1, r24	; 0x01
    160a:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8Sense>EXTI_TRIG_RAIS_EDGE &&copy_u8Sense<EXTI_TRIG_LOW_LEVEL)
	{
		return;
	}

	switch(copy_u8IntID)
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	3c 83       	std	Y+4, r19	; 0x04
    1614:	2b 83       	std	Y+3, r18	; 0x03
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	9c 81       	ldd	r25, Y+4	; 0x04
    161a:	86 30       	cpi	r24, 0x06	; 6
    161c:	91 05       	cpc	r25, r1
    161e:	59 f0       	breq	.+22     	; 0x1636 <M_EXTI_void_Enable+0x3a>
    1620:	2b 81       	ldd	r18, Y+3	; 0x03
    1622:	3c 81       	ldd	r19, Y+4	; 0x04
    1624:	27 30       	cpi	r18, 0x07	; 7
    1626:	31 05       	cpc	r19, r1
    1628:	b1 f0       	breq	.+44     	; 0x1656 <M_EXTI_void_Enable+0x5a>
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	9c 81       	ldd	r25, Y+4	; 0x04
    162e:	85 30       	cpi	r24, 0x05	; 5
    1630:	91 05       	cpc	r25, r1
    1632:	41 f1       	breq	.+80     	; 0x1684 <M_EXTI_void_Enable+0x88>
    1634:	38 c0       	rjmp	.+112    	; 0x16a6 <M_EXTI_void_Enable+0xaa>
		{
		case EXTI_INT0_ID:
		 //step 1: apply mask
			 MCUCR_REG&=EXTI_INT0_TRIG_MASK ;
    1636:	a5 e5       	ldi	r26, 0x55	; 85
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e5 e5       	ldi	r30, 0x55	; 85
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	8c 7f       	andi	r24, 0xFC	; 252
    1642:	8c 93       	st	X, r24
			//step 2 : insert value
			 MCUCR_REG|= copy_u8Sense;
    1644:	a5 e5       	ldi	r26, 0x55	; 85
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e5 e5       	ldi	r30, 0x55	; 85
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	90 81       	ld	r25, Z
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	89 2b       	or	r24, r25
    1652:	8c 93       	st	X, r24
    1654:	28 c0       	rjmp	.+80     	; 0x16a6 <M_EXTI_void_Enable+0xaa>
		   break;
		case EXTI_INT1_ID:
			//step 1: apply mask
			 MCUCR_REG&=EXTI_INT1_TRIG_MASK ;
    1656:	a5 e5       	ldi	r26, 0x55	; 85
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e5 e5       	ldi	r30, 0x55	; 85
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	83 7f       	andi	r24, 0xF3	; 243
    1662:	8c 93       	st	X, r24
			//step 2 : insert value
			 MCUCR_REG|= copy_u8Sense<<EXTI_INT1_TRIG_SHIFT;
    1664:	a5 e5       	ldi	r26, 0x55	; 85
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e5 e5       	ldi	r30, 0x55	; 85
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	28 2f       	mov	r18, r24
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	88 2f       	mov	r24, r24
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	88 0f       	add	r24, r24
    167c:	99 1f       	adc	r25, r25
    167e:	82 2b       	or	r24, r18
    1680:	8c 93       	st	X, r24
    1682:	11 c0       	rjmp	.+34     	; 0x16a6 <M_EXTI_void_Enable+0xaa>
			break;
		case EXTI_INT2_ID:
			//step 1: apply mask
			CLR_BIT(MCUSCR_REG,ISC2_BIT);
    1684:	a4 e5       	ldi	r26, 0x54	; 84
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e4 e5       	ldi	r30, 0x54	; 84
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	8f 7b       	andi	r24, 0xBF	; 191
    1690:	8c 93       	st	X, r24
			//step 2 : insert value
			 MCUCR_REG|= GET_BIT(copy_u8Sense,0)<<EXTI_INT2_TRIG_SHIFT;
    1692:	a5 e5       	ldi	r26, 0x55	; 85
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e5 e5       	ldi	r30, 0x55	; 85
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	98 2f       	mov	r25, r24
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	80 74       	andi	r24, 0x40	; 64
    16a2:	89 2b       	or	r24, r25
    16a4:	8c 93       	st	X, r24
				break;
		}

	//step2 :enable PIE
	if (copy_u8IntID>=EXTI_INT2_ID&&copy_u8IntID<=EXTI_INT1_ID)
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	85 30       	cpi	r24, 0x05	; 5
    16aa:	b0 f0       	brcs	.+44     	; 0x16d8 <M_EXTI_void_Enable+0xdc>
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	88 30       	cpi	r24, 0x08	; 8
    16b0:	98 f4       	brcc	.+38     	; 0x16d8 <M_EXTI_void_Enable+0xdc>
		SET_BIT(GICR_REG,copy_u8IntID);
    16b2:	ab e5       	ldi	r26, 0x5B	; 91
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	eb e5       	ldi	r30, 0x5B	; 91
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	48 2f       	mov	r20, r24
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	02 2e       	mov	r0, r18
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <M_EXTI_void_Enable+0xd4>
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	0a 94       	dec	r0
    16d2:	e2 f7       	brpl	.-8      	; 0x16cc <M_EXTI_void_Enable+0xd0>
    16d4:	84 2b       	or	r24, r20
    16d6:	8c 93       	st	X, r24

}
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	08 95       	ret

000016e6 <M_EXTI_void_Disble>:
void M_EXTI_void_Disble(u8 copy_u8IntID)
{
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <M_EXTI_void_Disble+0x6>
    16ec:	0f 92       	push	r0
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	89 83       	std	Y+1, r24	; 0x01
	//METHOD 1
	switch(copy_u8IntID)
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	3b 83       	std	Y+3, r19	; 0x03
    16fc:	2a 83       	std	Y+2, r18	; 0x02
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	9b 81       	ldd	r25, Y+3	; 0x03
    1702:	86 30       	cpi	r24, 0x06	; 6
    1704:	91 05       	cpc	r25, r1
    1706:	59 f0       	breq	.+22     	; 0x171e <M_EXTI_void_Disble+0x38>
    1708:	2a 81       	ldd	r18, Y+2	; 0x02
    170a:	3b 81       	ldd	r19, Y+3	; 0x03
    170c:	27 30       	cpi	r18, 0x07	; 7
    170e:	31 05       	cpc	r19, r1
    1710:	71 f0       	breq	.+28     	; 0x172e <M_EXTI_void_Disble+0x48>
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	9b 81       	ldd	r25, Y+3	; 0x03
    1716:	85 30       	cpi	r24, 0x05	; 5
    1718:	91 05       	cpc	r25, r1
    171a:	89 f0       	breq	.+34     	; 0x173e <M_EXTI_void_Disble+0x58>
    171c:	17 c0       	rjmp	.+46     	; 0x174c <M_EXTI_void_Disble+0x66>
	{
	case EXTI_INT0_ID:
	   CLR_BIT(GICR_REG,INT0_BIT);
    171e:	ab e5       	ldi	r26, 0x5B	; 91
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	eb e5       	ldi	r30, 0x5B	; 91
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	8f 7b       	andi	r24, 0xBF	; 191
    172a:	8c 93       	st	X, r24
    172c:	0f c0       	rjmp	.+30     	; 0x174c <M_EXTI_void_Disble+0x66>
	   break;
	case EXTI_INT1_ID:
		   CLR_BIT(GICR_REG,INT1_BIT);
    172e:	ab e5       	ldi	r26, 0x5B	; 91
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	eb e5       	ldi	r30, 0x5B	; 91
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	8f 77       	andi	r24, 0x7F	; 127
    173a:	8c 93       	st	X, r24
    173c:	07 c0       	rjmp	.+14     	; 0x174c <M_EXTI_void_Disble+0x66>
		   break;
	case EXTI_INT2_ID:
		   CLR_BIT(GICR_REG,INT2_BIT);
    173e:	ab e5       	ldi	r26, 0x5B	; 91
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	eb e5       	ldi	r30, 0x5B	; 91
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	8f 7d       	andi	r24, 0xDF	; 223
    174a:	8c 93       	st	X, r24
		   break;
	}
	//METHOD2
	if (copy_u8IntID>=EXTI_INT2_ID&&copy_u8IntID<=EXTI_INT1_ID)
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	85 30       	cpi	r24, 0x05	; 5
    1750:	b8 f0       	brcs	.+46     	; 0x1780 <M_EXTI_void_Disble+0x9a>
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	88 30       	cpi	r24, 0x08	; 8
    1756:	a0 f4       	brcc	.+40     	; 0x1780 <M_EXTI_void_Disble+0x9a>
	CLR_BIT(GICR_REG,copy_u8IntID);
    1758:	ab e5       	ldi	r26, 0x5B	; 91
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	eb e5       	ldi	r30, 0x5B	; 91
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	48 2f       	mov	r20, r24
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	02 2e       	mov	r0, r18
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <M_EXTI_void_Disble+0x90>
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	0a 94       	dec	r0
    1778:	e2 f7       	brpl	.-8      	; 0x1772 <M_EXTI_void_Disble+0x8c>
    177a:	80 95       	com	r24
    177c:	84 23       	and	r24, r20
    177e:	8c 93       	st	X, r24
}
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	08 95       	ret

0000178c <M_EXTI_void_setCallback>:
void M_EXTI_void_setCallback(void (*ptrfn)(void),u8 copy_u8IntID)
{
    178c:	df 93       	push	r29
    178e:	cf 93       	push	r28
    1790:	00 d0       	rcall	.+0      	; 0x1792 <M_EXTI_void_setCallback+0x6>
    1792:	00 d0       	rcall	.+0      	; 0x1794 <M_EXTI_void_setCallback+0x8>
    1794:	0f 92       	push	r0
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
    179a:	9a 83       	std	Y+2, r25	; 0x02
    179c:	89 83       	std	Y+1, r24	; 0x01
    179e:	6b 83       	std	Y+3, r22	; 0x03
	switch(copy_u8IntID)
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	3d 83       	std	Y+5, r19	; 0x05
    17a8:	2c 83       	std	Y+4, r18	; 0x04
    17aa:	8c 81       	ldd	r24, Y+4	; 0x04
    17ac:	9d 81       	ldd	r25, Y+5	; 0x05
    17ae:	86 30       	cpi	r24, 0x06	; 6
    17b0:	91 05       	cpc	r25, r1
    17b2:	59 f0       	breq	.+22     	; 0x17ca <M_EXTI_void_setCallback+0x3e>
    17b4:	2c 81       	ldd	r18, Y+4	; 0x04
    17b6:	3d 81       	ldd	r19, Y+5	; 0x05
    17b8:	27 30       	cpi	r18, 0x07	; 7
    17ba:	31 05       	cpc	r19, r1
    17bc:	69 f0       	breq	.+26     	; 0x17d8 <M_EXTI_void_setCallback+0x4c>
    17be:	8c 81       	ldd	r24, Y+4	; 0x04
    17c0:	9d 81       	ldd	r25, Y+5	; 0x05
    17c2:	85 30       	cpi	r24, 0x05	; 5
    17c4:	91 05       	cpc	r25, r1
    17c6:	79 f0       	breq	.+30     	; 0x17e6 <M_EXTI_void_setCallback+0x5a>
    17c8:	14 c0       	rjmp	.+40     	; 0x17f2 <M_EXTI_void_setCallback+0x66>
		{
		case EXTI_INT0_ID:
			Arr_CallBack[0]=ptrfn;
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	9a 81       	ldd	r25, Y+2	; 0x02
    17ce:	90 93 9f 01 	sts	0x019F, r25
    17d2:	80 93 9e 01 	sts	0x019E, r24
    17d6:	0d c0       	rjmp	.+26     	; 0x17f2 <M_EXTI_void_setCallback+0x66>
		   break;
		case EXTI_INT1_ID:
			Arr_CallBack[1]=ptrfn;
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	9a 81       	ldd	r25, Y+2	; 0x02
    17dc:	90 93 a1 01 	sts	0x01A1, r25
    17e0:	80 93 a0 01 	sts	0x01A0, r24
    17e4:	06 c0       	rjmp	.+12     	; 0x17f2 <M_EXTI_void_setCallback+0x66>
			   break;
		case EXTI_INT2_ID:
			Arr_CallBack[2]=ptrfn;
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
    17e8:	9a 81       	ldd	r25, Y+2	; 0x02
    17ea:	90 93 a3 01 	sts	0x01A3, r25
    17ee:	80 93 a2 01 	sts	0x01A2, r24
			   break;
		}
}
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	cf 91       	pop	r28
    17fe:	df 91       	pop	r29
    1800:	08 95       	ret

00001802 <__vector_1>:

ISR(INT0_vect)
{
    1802:	1f 92       	push	r1
    1804:	0f 92       	push	r0
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	0f 92       	push	r0
    180a:	11 24       	eor	r1, r1
    180c:	2f 93       	push	r18
    180e:	3f 93       	push	r19
    1810:	4f 93       	push	r20
    1812:	5f 93       	push	r21
    1814:	6f 93       	push	r22
    1816:	7f 93       	push	r23
    1818:	8f 93       	push	r24
    181a:	9f 93       	push	r25
    181c:	af 93       	push	r26
    181e:	bf 93       	push	r27
    1820:	ef 93       	push	r30
    1822:	ff 93       	push	r31
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
	if(Arr_CallBack[0]!=NULL)
    182c:	80 91 9e 01 	lds	r24, 0x019E
    1830:	90 91 9f 01 	lds	r25, 0x019F
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	29 f0       	breq	.+10     	; 0x1842 <__vector_1+0x40>
	{
		Arr_CallBack[0]();
    1838:	e0 91 9e 01 	lds	r30, 0x019E
    183c:	f0 91 9f 01 	lds	r31, 0x019F
    1840:	09 95       	icall
	}
}
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	ff 91       	pop	r31
    1848:	ef 91       	pop	r30
    184a:	bf 91       	pop	r27
    184c:	af 91       	pop	r26
    184e:	9f 91       	pop	r25
    1850:	8f 91       	pop	r24
    1852:	7f 91       	pop	r23
    1854:	6f 91       	pop	r22
    1856:	5f 91       	pop	r21
    1858:	4f 91       	pop	r20
    185a:	3f 91       	pop	r19
    185c:	2f 91       	pop	r18
    185e:	0f 90       	pop	r0
    1860:	0f be       	out	0x3f, r0	; 63
    1862:	0f 90       	pop	r0
    1864:	1f 90       	pop	r1
    1866:	18 95       	reti

00001868 <__vector_2>:
ISR(INT1_vect)
{
    1868:	1f 92       	push	r1
    186a:	0f 92       	push	r0
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	0f 92       	push	r0
    1870:	11 24       	eor	r1, r1
    1872:	2f 93       	push	r18
    1874:	3f 93       	push	r19
    1876:	4f 93       	push	r20
    1878:	5f 93       	push	r21
    187a:	6f 93       	push	r22
    187c:	7f 93       	push	r23
    187e:	8f 93       	push	r24
    1880:	9f 93       	push	r25
    1882:	af 93       	push	r26
    1884:	bf 93       	push	r27
    1886:	ef 93       	push	r30
    1888:	ff 93       	push	r31
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
	if(Arr_CallBack[1]!=NULL)
    1892:	80 91 a0 01 	lds	r24, 0x01A0
    1896:	90 91 a1 01 	lds	r25, 0x01A1
    189a:	00 97       	sbiw	r24, 0x00	; 0
    189c:	29 f0       	breq	.+10     	; 0x18a8 <__vector_2+0x40>
		{
			Arr_CallBack[1]();
    189e:	e0 91 a0 01 	lds	r30, 0x01A0
    18a2:	f0 91 a1 01 	lds	r31, 0x01A1
    18a6:	09 95       	icall
		}
}
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	ff 91       	pop	r31
    18ae:	ef 91       	pop	r30
    18b0:	bf 91       	pop	r27
    18b2:	af 91       	pop	r26
    18b4:	9f 91       	pop	r25
    18b6:	8f 91       	pop	r24
    18b8:	7f 91       	pop	r23
    18ba:	6f 91       	pop	r22
    18bc:	5f 91       	pop	r21
    18be:	4f 91       	pop	r20
    18c0:	3f 91       	pop	r19
    18c2:	2f 91       	pop	r18
    18c4:	0f 90       	pop	r0
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	0f 90       	pop	r0
    18ca:	1f 90       	pop	r1
    18cc:	18 95       	reti

000018ce <__vector_3>:
ISR(INT2_vect)
{
    18ce:	1f 92       	push	r1
    18d0:	0f 92       	push	r0
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	0f 92       	push	r0
    18d6:	11 24       	eor	r1, r1
    18d8:	2f 93       	push	r18
    18da:	3f 93       	push	r19
    18dc:	4f 93       	push	r20
    18de:	5f 93       	push	r21
    18e0:	6f 93       	push	r22
    18e2:	7f 93       	push	r23
    18e4:	8f 93       	push	r24
    18e6:	9f 93       	push	r25
    18e8:	af 93       	push	r26
    18ea:	bf 93       	push	r27
    18ec:	ef 93       	push	r30
    18ee:	ff 93       	push	r31
    18f0:	df 93       	push	r29
    18f2:	cf 93       	push	r28
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
	if(Arr_CallBack[2]!=NULL)
    18f8:	80 91 a2 01 	lds	r24, 0x01A2
    18fc:	90 91 a3 01 	lds	r25, 0x01A3
    1900:	00 97       	sbiw	r24, 0x00	; 0
    1902:	29 f0       	breq	.+10     	; 0x190e <__vector_3+0x40>
		{
			Arr_CallBack[2]();
    1904:	e0 91 a2 01 	lds	r30, 0x01A2
    1908:	f0 91 a3 01 	lds	r31, 0x01A3
    190c:	09 95       	icall
		}
}
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	ff 91       	pop	r31
    1914:	ef 91       	pop	r30
    1916:	bf 91       	pop	r27
    1918:	af 91       	pop	r26
    191a:	9f 91       	pop	r25
    191c:	8f 91       	pop	r24
    191e:	7f 91       	pop	r23
    1920:	6f 91       	pop	r22
    1922:	5f 91       	pop	r21
    1924:	4f 91       	pop	r20
    1926:	3f 91       	pop	r19
    1928:	2f 91       	pop	r18
    192a:	0f 90       	pop	r0
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	0f 90       	pop	r0
    1930:	1f 90       	pop	r1
    1932:	18 95       	reti

00001934 <M_DIO_void_setPinDir>:
#include "DIO_pvt.h"
#include "DIO_config.h"
#include "DIO_int.h"

void M_DIO_void_setPinDir(u8 Port, PIN_T Pin, Dir_T DIRECTION)
{
    1934:	df 93       	push	r29
    1936:	cf 93       	push	r28
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	2d 97       	sbiw	r28, 0x0d	; 13
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	f8 94       	cli
    1942:	de bf       	out	0x3e, r29	; 62
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	cd bf       	out	0x3d, r28	; 61
    1948:	89 83       	std	Y+1, r24	; 0x01
    194a:	6a 83       	std	Y+2, r22	; 0x02
    194c:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port)
    194e:	89 81       	ldd	r24, Y+1	; 0x01
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	3d 87       	std	Y+13, r19	; 0x0d
    1956:	2c 87       	std	Y+12, r18	; 0x0c
    1958:	8c 85       	ldd	r24, Y+12	; 0x0c
    195a:	9d 85       	ldd	r25, Y+13	; 0x0d
    195c:	81 30       	cpi	r24, 0x01	; 1
    195e:	91 05       	cpc	r25, r1
    1960:	09 f4       	brne	.+2      	; 0x1964 <M_DIO_void_setPinDir+0x30>
    1962:	4f c0       	rjmp	.+158    	; 0x1a02 <M_DIO_void_setPinDir+0xce>
    1964:	2c 85       	ldd	r18, Y+12	; 0x0c
    1966:	3d 85       	ldd	r19, Y+13	; 0x0d
    1968:	22 30       	cpi	r18, 0x02	; 2
    196a:	31 05       	cpc	r19, r1
    196c:	2c f4       	brge	.+10     	; 0x1978 <M_DIO_void_setPinDir+0x44>
    196e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1970:	9d 85       	ldd	r25, Y+13	; 0x0d
    1972:	00 97       	sbiw	r24, 0x00	; 0
    1974:	71 f0       	breq	.+28     	; 0x1992 <M_DIO_void_setPinDir+0x5e>
    1976:	ec c0       	rjmp	.+472    	; 0x1b50 <M_DIO_void_setPinDir+0x21c>
    1978:	2c 85       	ldd	r18, Y+12	; 0x0c
    197a:	3d 85       	ldd	r19, Y+13	; 0x0d
    197c:	22 30       	cpi	r18, 0x02	; 2
    197e:	31 05       	cpc	r19, r1
    1980:	09 f4       	brne	.+2      	; 0x1984 <M_DIO_void_setPinDir+0x50>
    1982:	77 c0       	rjmp	.+238    	; 0x1a72 <M_DIO_void_setPinDir+0x13e>
    1984:	8c 85       	ldd	r24, Y+12	; 0x0c
    1986:	9d 85       	ldd	r25, Y+13	; 0x0d
    1988:	83 30       	cpi	r24, 0x03	; 3
    198a:	91 05       	cpc	r25, r1
    198c:	09 f4       	brne	.+2      	; 0x1990 <M_DIO_void_setPinDir+0x5c>
    198e:	a9 c0       	rjmp	.+338    	; 0x1ae2 <M_DIO_void_setPinDir+0x1ae>
    1990:	df c0       	rjmp	.+446    	; 0x1b50 <M_DIO_void_setPinDir+0x21c>
	{
	case PORTA_ID :
		switch (DIRECTION)
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	28 2f       	mov	r18, r24
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	3b 87       	std	Y+11, r19	; 0x0b
    199a:	2a 87       	std	Y+10, r18	; 0x0a
    199c:	8a 85       	ldd	r24, Y+10	; 0x0a
    199e:	9b 85       	ldd	r25, Y+11	; 0x0b
    19a0:	00 97       	sbiw	r24, 0x00	; 0
    19a2:	31 f0       	breq	.+12     	; 0x19b0 <M_DIO_void_setPinDir+0x7c>
    19a4:	2a 85       	ldd	r18, Y+10	; 0x0a
    19a6:	3b 85       	ldd	r19, Y+11	; 0x0b
    19a8:	21 30       	cpi	r18, 0x01	; 1
    19aa:	31 05       	cpc	r19, r1
    19ac:	b1 f0       	breq	.+44     	; 0x19da <M_DIO_void_setPinDir+0xa6>
    19ae:	d0 c0       	rjmp	.+416    	; 0x1b50 <M_DIO_void_setPinDir+0x21c>
		{
		case IN:
			 CLR_BIT(DDRA,Pin);
    19b0:	aa e3       	ldi	r26, 0x3A	; 58
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	ea e3       	ldi	r30, 0x3A	; 58
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	48 2f       	mov	r20, r24
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	02 2e       	mov	r0, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <M_DIO_void_setPinDir+0x9a>
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	0a 94       	dec	r0
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <M_DIO_void_setPinDir+0x96>
    19d2:	80 95       	com	r24
    19d4:	84 23       	and	r24, r20
    19d6:	8c 93       	st	X, r24
    19d8:	bb c0       	rjmp	.+374    	; 0x1b50 <M_DIO_void_setPinDir+0x21c>
			 break;
		case OUT:
			SET_BIT(DDRA,Pin);
    19da:	aa e3       	ldi	r26, 0x3A	; 58
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	ea e3       	ldi	r30, 0x3A	; 58
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	48 2f       	mov	r20, r24
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	02 2e       	mov	r0, r18
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <M_DIO_void_setPinDir+0xc4>
    19f4:	88 0f       	add	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	0a 94       	dec	r0
    19fa:	e2 f7       	brpl	.-8      	; 0x19f4 <M_DIO_void_setPinDir+0xc0>
    19fc:	84 2b       	or	r24, r20
    19fe:	8c 93       	st	X, r24
    1a00:	a7 c0       	rjmp	.+334    	; 0x1b50 <M_DIO_void_setPinDir+0x21c>
			break;
		}
		break;
	case PORTB_ID :
				switch (DIRECTION)
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	39 87       	std	Y+9, r19	; 0x09
    1a0a:	28 87       	std	Y+8, r18	; 0x08
    1a0c:	88 85       	ldd	r24, Y+8	; 0x08
    1a0e:	99 85       	ldd	r25, Y+9	; 0x09
    1a10:	00 97       	sbiw	r24, 0x00	; 0
    1a12:	31 f0       	breq	.+12     	; 0x1a20 <M_DIO_void_setPinDir+0xec>
    1a14:	28 85       	ldd	r18, Y+8	; 0x08
    1a16:	39 85       	ldd	r19, Y+9	; 0x09
    1a18:	21 30       	cpi	r18, 0x01	; 1
    1a1a:	31 05       	cpc	r19, r1
    1a1c:	b1 f0       	breq	.+44     	; 0x1a4a <M_DIO_void_setPinDir+0x116>
    1a1e:	98 c0       	rjmp	.+304    	; 0x1b50 <M_DIO_void_setPinDir+0x21c>
				{
				case IN:
					 CLR_BIT(DDRB,Pin);
    1a20:	a7 e3       	ldi	r26, 0x37	; 55
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e7 e3       	ldi	r30, 0x37	; 55
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	48 2f       	mov	r20, r24
    1a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	02 2e       	mov	r0, r18
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <M_DIO_void_setPinDir+0x10a>
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	0a 94       	dec	r0
    1a40:	e2 f7       	brpl	.-8      	; 0x1a3a <M_DIO_void_setPinDir+0x106>
    1a42:	80 95       	com	r24
    1a44:	84 23       	and	r24, r20
    1a46:	8c 93       	st	X, r24
    1a48:	83 c0       	rjmp	.+262    	; 0x1b50 <M_DIO_void_setPinDir+0x21c>
					 break;
				case OUT:
					SET_BIT(DDRB,Pin);
    1a4a:	a7 e3       	ldi	r26, 0x37	; 55
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	e7 e3       	ldi	r30, 0x37	; 55
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	48 2f       	mov	r20, r24
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	02 2e       	mov	r0, r18
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <M_DIO_void_setPinDir+0x134>
    1a64:	88 0f       	add	r24, r24
    1a66:	99 1f       	adc	r25, r25
    1a68:	0a 94       	dec	r0
    1a6a:	e2 f7       	brpl	.-8      	; 0x1a64 <M_DIO_void_setPinDir+0x130>
    1a6c:	84 2b       	or	r24, r20
    1a6e:	8c 93       	st	X, r24
    1a70:	6f c0       	rjmp	.+222    	; 0x1b50 <M_DIO_void_setPinDir+0x21c>
					break;
				}
			break;
	case PORTC_ID:
				switch (DIRECTION)
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	28 2f       	mov	r18, r24
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	3f 83       	std	Y+7, r19	; 0x07
    1a7a:	2e 83       	std	Y+6, r18	; 0x06
    1a7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a7e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a80:	00 97       	sbiw	r24, 0x00	; 0
    1a82:	31 f0       	breq	.+12     	; 0x1a90 <M_DIO_void_setPinDir+0x15c>
    1a84:	2e 81       	ldd	r18, Y+6	; 0x06
    1a86:	3f 81       	ldd	r19, Y+7	; 0x07
    1a88:	21 30       	cpi	r18, 0x01	; 1
    1a8a:	31 05       	cpc	r19, r1
    1a8c:	b1 f0       	breq	.+44     	; 0x1aba <M_DIO_void_setPinDir+0x186>
    1a8e:	60 c0       	rjmp	.+192    	; 0x1b50 <M_DIO_void_setPinDir+0x21c>
				{
				case IN:
						 CLR_BIT(DDRC,Pin);
    1a90:	a4 e3       	ldi	r26, 0x34	; 52
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e4 e3       	ldi	r30, 0x34	; 52
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	48 2f       	mov	r20, r24
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	02 2e       	mov	r0, r18
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <M_DIO_void_setPinDir+0x17a>
    1aaa:	88 0f       	add	r24, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	0a 94       	dec	r0
    1ab0:	e2 f7       	brpl	.-8      	; 0x1aaa <M_DIO_void_setPinDir+0x176>
    1ab2:	80 95       	com	r24
    1ab4:	84 23       	and	r24, r20
    1ab6:	8c 93       	st	X, r24
    1ab8:	4b c0       	rjmp	.+150    	; 0x1b50 <M_DIO_void_setPinDir+0x21c>
						 break;
				case OUT:
						 SET_BIT(DDRC,Pin);
    1aba:	a4 e3       	ldi	r26, 0x34	; 52
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e4 e3       	ldi	r30, 0x34	; 52
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	48 2f       	mov	r20, r24
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	28 2f       	mov	r18, r24
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	02 2e       	mov	r0, r18
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <M_DIO_void_setPinDir+0x1a4>
    1ad4:	88 0f       	add	r24, r24
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	0a 94       	dec	r0
    1ada:	e2 f7       	brpl	.-8      	; 0x1ad4 <M_DIO_void_setPinDir+0x1a0>
    1adc:	84 2b       	or	r24, r20
    1ade:	8c 93       	st	X, r24
    1ae0:	37 c0       	rjmp	.+110    	; 0x1b50 <M_DIO_void_setPinDir+0x21c>
						 break;
					}
				break;
	case PORTD_ID :
				 switch (DIRECTION)
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	28 2f       	mov	r18, r24
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	3d 83       	std	Y+5, r19	; 0x05
    1aea:	2c 83       	std	Y+4, r18	; 0x04
    1aec:	8c 81       	ldd	r24, Y+4	; 0x04
    1aee:	9d 81       	ldd	r25, Y+5	; 0x05
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	31 f0       	breq	.+12     	; 0x1b00 <M_DIO_void_setPinDir+0x1cc>
    1af4:	2c 81       	ldd	r18, Y+4	; 0x04
    1af6:	3d 81       	ldd	r19, Y+5	; 0x05
    1af8:	21 30       	cpi	r18, 0x01	; 1
    1afa:	31 05       	cpc	r19, r1
    1afc:	b1 f0       	breq	.+44     	; 0x1b2a <M_DIO_void_setPinDir+0x1f6>
    1afe:	28 c0       	rjmp	.+80     	; 0x1b50 <M_DIO_void_setPinDir+0x21c>
				 {
					case IN:
						 CLR_BIT(DDRD,Pin);
    1b00:	a1 e3       	ldi	r26, 0x31	; 49
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e1 e3       	ldi	r30, 0x31	; 49
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	48 2f       	mov	r20, r24
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	02 2e       	mov	r0, r18
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <M_DIO_void_setPinDir+0x1ea>
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	0a 94       	dec	r0
    1b20:	e2 f7       	brpl	.-8      	; 0x1b1a <M_DIO_void_setPinDir+0x1e6>
    1b22:	80 95       	com	r24
    1b24:	84 23       	and	r24, r20
    1b26:	8c 93       	st	X, r24
    1b28:	13 c0       	rjmp	.+38     	; 0x1b50 <M_DIO_void_setPinDir+0x21c>
						 break;
					case OUT:
						SET_BIT(DDRD,Pin);
    1b2a:	a1 e3       	ldi	r26, 0x31	; 49
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	e1 e3       	ldi	r30, 0x31	; 49
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	48 2f       	mov	r20, r24
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	02 2e       	mov	r0, r18
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <M_DIO_void_setPinDir+0x214>
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	0a 94       	dec	r0
    1b4a:	e2 f7       	brpl	.-8      	; 0x1b44 <M_DIO_void_setPinDir+0x210>
    1b4c:	84 2b       	or	r24, r20
    1b4e:	8c 93       	st	X, r24
						 break;
				}
				break;
	}
}
    1b50:	2d 96       	adiw	r28, 0x0d	; 13
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	08 95       	ret

00001b62 <M_DIO_void_setPinValue>:
void M_DIO_void_setPinValue(u8 Port, u8 Pin, VALUE_T value)
{
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
    1b6a:	2d 97       	sbiw	r28, 0x0d	; 13
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	de bf       	out	0x3e, r29	; 62
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	cd bf       	out	0x3d, r28	; 61
    1b76:	89 83       	std	Y+1, r24	; 0x01
    1b78:	6a 83       	std	Y+2, r22	; 0x02
    1b7a:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port)
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	28 2f       	mov	r18, r24
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	3d 87       	std	Y+13, r19	; 0x0d
    1b84:	2c 87       	std	Y+12, r18	; 0x0c
    1b86:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b88:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b8a:	81 30       	cpi	r24, 0x01	; 1
    1b8c:	91 05       	cpc	r25, r1
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <M_DIO_void_setPinValue+0x30>
    1b90:	4f c0       	rjmp	.+158    	; 0x1c30 <M_DIO_void_setPinValue+0xce>
    1b92:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b94:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b96:	22 30       	cpi	r18, 0x02	; 2
    1b98:	31 05       	cpc	r19, r1
    1b9a:	2c f4       	brge	.+10     	; 0x1ba6 <M_DIO_void_setPinValue+0x44>
    1b9c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b9e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ba0:	00 97       	sbiw	r24, 0x00	; 0
    1ba2:	71 f0       	breq	.+28     	; 0x1bc0 <M_DIO_void_setPinValue+0x5e>
    1ba4:	ec c0       	rjmp	.+472    	; 0x1d7e <M_DIO_void_setPinValue+0x21c>
    1ba6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ba8:	3d 85       	ldd	r19, Y+13	; 0x0d
    1baa:	22 30       	cpi	r18, 0x02	; 2
    1bac:	31 05       	cpc	r19, r1
    1bae:	09 f4       	brne	.+2      	; 0x1bb2 <M_DIO_void_setPinValue+0x50>
    1bb0:	77 c0       	rjmp	.+238    	; 0x1ca0 <M_DIO_void_setPinValue+0x13e>
    1bb2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bb4:	9d 85       	ldd	r25, Y+13	; 0x0d
    1bb6:	83 30       	cpi	r24, 0x03	; 3
    1bb8:	91 05       	cpc	r25, r1
    1bba:	09 f4       	brne	.+2      	; 0x1bbe <M_DIO_void_setPinValue+0x5c>
    1bbc:	a9 c0       	rjmp	.+338    	; 0x1d10 <M_DIO_void_setPinValue+0x1ae>
    1bbe:	df c0       	rjmp	.+446    	; 0x1d7e <M_DIO_void_setPinValue+0x21c>
		{
		case PORTA_ID :
			switch (value)
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	3b 87       	std	Y+11, r19	; 0x0b
    1bc8:	2a 87       	std	Y+10, r18	; 0x0a
    1bca:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bcc:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bce:	00 97       	sbiw	r24, 0x00	; 0
    1bd0:	31 f0       	breq	.+12     	; 0x1bde <M_DIO_void_setPinValue+0x7c>
    1bd2:	2a 85       	ldd	r18, Y+10	; 0x0a
    1bd4:	3b 85       	ldd	r19, Y+11	; 0x0b
    1bd6:	21 30       	cpi	r18, 0x01	; 1
    1bd8:	31 05       	cpc	r19, r1
    1bda:	b1 f0       	breq	.+44     	; 0x1c08 <M_DIO_void_setPinValue+0xa6>
    1bdc:	d0 c0       	rjmp	.+416    	; 0x1d7e <M_DIO_void_setPinValue+0x21c>
			{
			case LOW:
				 CLR_BIT(PORTA_REG,Pin);
    1bde:	ab e3       	ldi	r26, 0x3B	; 59
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	eb e3       	ldi	r30, 0x3B	; 59
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	48 2f       	mov	r20, r24
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	28 2f       	mov	r18, r24
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	02 2e       	mov	r0, r18
    1bf6:	02 c0       	rjmp	.+4      	; 0x1bfc <M_DIO_void_setPinValue+0x9a>
    1bf8:	88 0f       	add	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	0a 94       	dec	r0
    1bfe:	e2 f7       	brpl	.-8      	; 0x1bf8 <M_DIO_void_setPinValue+0x96>
    1c00:	80 95       	com	r24
    1c02:	84 23       	and	r24, r20
    1c04:	8c 93       	st	X, r24
    1c06:	bb c0       	rjmp	.+374    	; 0x1d7e <M_DIO_void_setPinValue+0x21c>
				 break;
			case HIGH:
				SET_BIT(PORTA_REG,Pin);
    1c08:	ab e3       	ldi	r26, 0x3B	; 59
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	eb e3       	ldi	r30, 0x3B	; 59
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	48 2f       	mov	r20, r24
    1c14:	8a 81       	ldd	r24, Y+2	; 0x02
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	02 2e       	mov	r0, r18
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <M_DIO_void_setPinValue+0xc4>
    1c22:	88 0f       	add	r24, r24
    1c24:	99 1f       	adc	r25, r25
    1c26:	0a 94       	dec	r0
    1c28:	e2 f7       	brpl	.-8      	; 0x1c22 <M_DIO_void_setPinValue+0xc0>
    1c2a:	84 2b       	or	r24, r20
    1c2c:	8c 93       	st	X, r24
    1c2e:	a7 c0       	rjmp	.+334    	; 0x1d7e <M_DIO_void_setPinValue+0x21c>
				break;
		   }
			break;
		case PORTB_ID :
			switch (value)
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	39 87       	std	Y+9, r19	; 0x09
    1c38:	28 87       	std	Y+8, r18	; 0x08
    1c3a:	88 85       	ldd	r24, Y+8	; 0x08
    1c3c:	99 85       	ldd	r25, Y+9	; 0x09
    1c3e:	00 97       	sbiw	r24, 0x00	; 0
    1c40:	31 f0       	breq	.+12     	; 0x1c4e <M_DIO_void_setPinValue+0xec>
    1c42:	28 85       	ldd	r18, Y+8	; 0x08
    1c44:	39 85       	ldd	r19, Y+9	; 0x09
    1c46:	21 30       	cpi	r18, 0x01	; 1
    1c48:	31 05       	cpc	r19, r1
    1c4a:	b1 f0       	breq	.+44     	; 0x1c78 <M_DIO_void_setPinValue+0x116>
    1c4c:	98 c0       	rjmp	.+304    	; 0x1d7e <M_DIO_void_setPinValue+0x21c>
			{
			case LOW:
				 CLR_BIT(PORTB_REG,Pin);
    1c4e:	a8 e3       	ldi	r26, 0x38	; 56
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	e8 e3       	ldi	r30, 0x38	; 56
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	48 2f       	mov	r20, r24
    1c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5c:	28 2f       	mov	r18, r24
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	02 2e       	mov	r0, r18
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <M_DIO_void_setPinValue+0x10a>
    1c68:	88 0f       	add	r24, r24
    1c6a:	99 1f       	adc	r25, r25
    1c6c:	0a 94       	dec	r0
    1c6e:	e2 f7       	brpl	.-8      	; 0x1c68 <M_DIO_void_setPinValue+0x106>
    1c70:	80 95       	com	r24
    1c72:	84 23       	and	r24, r20
    1c74:	8c 93       	st	X, r24
    1c76:	83 c0       	rjmp	.+262    	; 0x1d7e <M_DIO_void_setPinValue+0x21c>
				 break;
			case HIGH:
				 SET_BIT(PORTB_REG,Pin);
    1c78:	a8 e3       	ldi	r26, 0x38	; 56
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	e8 e3       	ldi	r30, 0x38	; 56
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	48 2f       	mov	r20, r24
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
    1c86:	28 2f       	mov	r18, r24
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	02 2e       	mov	r0, r18
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <M_DIO_void_setPinValue+0x134>
    1c92:	88 0f       	add	r24, r24
    1c94:	99 1f       	adc	r25, r25
    1c96:	0a 94       	dec	r0
    1c98:	e2 f7       	brpl	.-8      	; 0x1c92 <M_DIO_void_setPinValue+0x130>
    1c9a:	84 2b       	or	r24, r20
    1c9c:	8c 93       	st	X, r24
    1c9e:	6f c0       	rjmp	.+222    	; 0x1d7e <M_DIO_void_setPinValue+0x21c>
				 break;
			}
			break;
		case PORTC_ID:
			switch (value)
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	3f 83       	std	Y+7, r19	; 0x07
    1ca8:	2e 83       	std	Y+6, r18	; 0x06
    1caa:	8e 81       	ldd	r24, Y+6	; 0x06
    1cac:	9f 81       	ldd	r25, Y+7	; 0x07
    1cae:	00 97       	sbiw	r24, 0x00	; 0
    1cb0:	31 f0       	breq	.+12     	; 0x1cbe <M_DIO_void_setPinValue+0x15c>
    1cb2:	2e 81       	ldd	r18, Y+6	; 0x06
    1cb4:	3f 81       	ldd	r19, Y+7	; 0x07
    1cb6:	21 30       	cpi	r18, 0x01	; 1
    1cb8:	31 05       	cpc	r19, r1
    1cba:	b1 f0       	breq	.+44     	; 0x1ce8 <M_DIO_void_setPinValue+0x186>
    1cbc:	60 c0       	rjmp	.+192    	; 0x1d7e <M_DIO_void_setPinValue+0x21c>
			{
			case LOW:
				 CLR_BIT(PORTC_REG,Pin);
    1cbe:	a5 e3       	ldi	r26, 0x35	; 53
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	e5 e3       	ldi	r30, 0x35	; 53
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	48 2f       	mov	r20, r24
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	02 2e       	mov	r0, r18
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <M_DIO_void_setPinValue+0x17a>
    1cd8:	88 0f       	add	r24, r24
    1cda:	99 1f       	adc	r25, r25
    1cdc:	0a 94       	dec	r0
    1cde:	e2 f7       	brpl	.-8      	; 0x1cd8 <M_DIO_void_setPinValue+0x176>
    1ce0:	80 95       	com	r24
    1ce2:	84 23       	and	r24, r20
    1ce4:	8c 93       	st	X, r24
    1ce6:	4b c0       	rjmp	.+150    	; 0x1d7e <M_DIO_void_setPinValue+0x21c>
				break;
			case HIGH:
				 SET_BIT(PORTC_REG,Pin);
    1ce8:	a5 e3       	ldi	r26, 0x35	; 53
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	e5 e3       	ldi	r30, 0x35	; 53
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	48 2f       	mov	r20, r24
    1cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf6:	28 2f       	mov	r18, r24
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	02 2e       	mov	r0, r18
    1d00:	02 c0       	rjmp	.+4      	; 0x1d06 <M_DIO_void_setPinValue+0x1a4>
    1d02:	88 0f       	add	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	0a 94       	dec	r0
    1d08:	e2 f7       	brpl	.-8      	; 0x1d02 <M_DIO_void_setPinValue+0x1a0>
    1d0a:	84 2b       	or	r24, r20
    1d0c:	8c 93       	st	X, r24
    1d0e:	37 c0       	rjmp	.+110    	; 0x1d7e <M_DIO_void_setPinValue+0x21c>
				break;
			}
			break;
		case PORTD_ID :
			 switch (value)
    1d10:	8b 81       	ldd	r24, Y+3	; 0x03
    1d12:	28 2f       	mov	r18, r24
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	3d 83       	std	Y+5, r19	; 0x05
    1d18:	2c 83       	std	Y+4, r18	; 0x04
    1d1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1e:	00 97       	sbiw	r24, 0x00	; 0
    1d20:	31 f0       	breq	.+12     	; 0x1d2e <M_DIO_void_setPinValue+0x1cc>
    1d22:	2c 81       	ldd	r18, Y+4	; 0x04
    1d24:	3d 81       	ldd	r19, Y+5	; 0x05
    1d26:	21 30       	cpi	r18, 0x01	; 1
    1d28:	31 05       	cpc	r19, r1
    1d2a:	b1 f0       	breq	.+44     	; 0x1d58 <M_DIO_void_setPinValue+0x1f6>
    1d2c:	28 c0       	rjmp	.+80     	; 0x1d7e <M_DIO_void_setPinValue+0x21c>
			 {
				case LOW:
				   CLR_BIT(PORTD_REG,Pin);
    1d2e:	a2 e3       	ldi	r26, 0x32	; 50
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	e2 e3       	ldi	r30, 0x32	; 50
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	48 2f       	mov	r20, r24
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	02 2e       	mov	r0, r18
    1d46:	02 c0       	rjmp	.+4      	; 0x1d4c <M_DIO_void_setPinValue+0x1ea>
    1d48:	88 0f       	add	r24, r24
    1d4a:	99 1f       	adc	r25, r25
    1d4c:	0a 94       	dec	r0
    1d4e:	e2 f7       	brpl	.-8      	; 0x1d48 <M_DIO_void_setPinValue+0x1e6>
    1d50:	80 95       	com	r24
    1d52:	84 23       	and	r24, r20
    1d54:	8c 93       	st	X, r24
    1d56:	13 c0       	rjmp	.+38     	; 0x1d7e <M_DIO_void_setPinValue+0x21c>
					break;
				case HIGH:
					SET_BIT(PORTD_REG,Pin);
    1d58:	a2 e3       	ldi	r26, 0x32	; 50
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e2 e3       	ldi	r30, 0x32	; 50
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	48 2f       	mov	r20, r24
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	28 2f       	mov	r18, r24
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	02 2e       	mov	r0, r18
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <M_DIO_void_setPinValue+0x214>
    1d72:	88 0f       	add	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	0a 94       	dec	r0
    1d78:	e2 f7       	brpl	.-8      	; 0x1d72 <M_DIO_void_setPinValue+0x210>
    1d7a:	84 2b       	or	r24, r20
    1d7c:	8c 93       	st	X, r24
					break;
			 }
			 break;
		}
}
    1d7e:	2d 96       	adiw	r28, 0x0d	; 13
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	f8 94       	cli
    1d84:	de bf       	out	0x3e, r29	; 62
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	cd bf       	out	0x3d, r28	; 61
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <M_DIO_void_getPinValue>:
void M_DIO_void_getPinValue(u8 Port, u8 Pin, u8 *pvalue)
{
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	00 d0       	rcall	.+0      	; 0x1d96 <M_DIO_void_getPinValue+0x6>
    1d96:	00 d0       	rcall	.+0      	; 0x1d98 <M_DIO_void_getPinValue+0x8>
    1d98:	00 d0       	rcall	.+0      	; 0x1d9a <M_DIO_void_getPinValue+0xa>
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
    1d9e:	89 83       	std	Y+1, r24	; 0x01
    1da0:	6a 83       	std	Y+2, r22	; 0x02
    1da2:	5c 83       	std	Y+4, r21	; 0x04
    1da4:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port){
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	3e 83       	std	Y+6, r19	; 0x06
    1dae:	2d 83       	std	Y+5, r18	; 0x05
    1db0:	4d 81       	ldd	r20, Y+5	; 0x05
    1db2:	5e 81       	ldd	r21, Y+6	; 0x06
    1db4:	41 30       	cpi	r20, 0x01	; 1
    1db6:	51 05       	cpc	r21, r1
    1db8:	59 f1       	breq	.+86     	; 0x1e10 <M_DIO_void_getPinValue+0x80>
    1dba:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dbe:	82 30       	cpi	r24, 0x02	; 2
    1dc0:	91 05       	cpc	r25, r1
    1dc2:	34 f4       	brge	.+12     	; 0x1dd0 <M_DIO_void_getPinValue+0x40>
    1dc4:	2d 81       	ldd	r18, Y+5	; 0x05
    1dc6:	3e 81       	ldd	r19, Y+6	; 0x06
    1dc8:	21 15       	cp	r18, r1
    1dca:	31 05       	cpc	r19, r1
    1dcc:	69 f0       	breq	.+26     	; 0x1de8 <M_DIO_void_getPinValue+0x58>
    1dce:	5b c0       	rjmp	.+182    	; 0x1e86 <M_DIO_void_getPinValue+0xf6>
    1dd0:	4d 81       	ldd	r20, Y+5	; 0x05
    1dd2:	5e 81       	ldd	r21, Y+6	; 0x06
    1dd4:	42 30       	cpi	r20, 0x02	; 2
    1dd6:	51 05       	cpc	r21, r1
    1dd8:	79 f1       	breq	.+94     	; 0x1e38 <M_DIO_void_getPinValue+0xa8>
    1dda:	8d 81       	ldd	r24, Y+5	; 0x05
    1ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dde:	83 30       	cpi	r24, 0x03	; 3
    1de0:	91 05       	cpc	r25, r1
    1de2:	09 f4       	brne	.+2      	; 0x1de6 <M_DIO_void_getPinValue+0x56>
    1de4:	3d c0       	rjmp	.+122    	; 0x1e60 <M_DIO_void_getPinValue+0xd0>
    1de6:	4f c0       	rjmp	.+158    	; 0x1e86 <M_DIO_void_getPinValue+0xf6>
	case PORTA_ID:
		*pvalue = GET_BIT(PINA_REG,Pin);
    1de8:	e9 e3       	ldi	r30, 0x39	; 57
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	28 2f       	mov	r18, r24
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	88 2f       	mov	r24, r24
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	a9 01       	movw	r20, r18
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <M_DIO_void_getPinValue+0x70>
    1dfc:	55 95       	asr	r21
    1dfe:	47 95       	ror	r20
    1e00:	8a 95       	dec	r24
    1e02:	e2 f7       	brpl	.-8      	; 0x1dfc <M_DIO_void_getPinValue+0x6c>
    1e04:	ca 01       	movw	r24, r20
    1e06:	81 70       	andi	r24, 0x01	; 1
    1e08:	eb 81       	ldd	r30, Y+3	; 0x03
    1e0a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e0c:	80 83       	st	Z, r24
    1e0e:	3b c0       	rjmp	.+118    	; 0x1e86 <M_DIO_void_getPinValue+0xf6>
		break;
	case PORTB_ID:
		*pvalue=GET_BIT(PINB_REG,Pin);
    1e10:	e6 e3       	ldi	r30, 0x36	; 54
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	28 2f       	mov	r18, r24
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1c:	88 2f       	mov	r24, r24
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	a9 01       	movw	r20, r18
    1e22:	02 c0       	rjmp	.+4      	; 0x1e28 <M_DIO_void_getPinValue+0x98>
    1e24:	55 95       	asr	r21
    1e26:	47 95       	ror	r20
    1e28:	8a 95       	dec	r24
    1e2a:	e2 f7       	brpl	.-8      	; 0x1e24 <M_DIO_void_getPinValue+0x94>
    1e2c:	ca 01       	movw	r24, r20
    1e2e:	81 70       	andi	r24, 0x01	; 1
    1e30:	eb 81       	ldd	r30, Y+3	; 0x03
    1e32:	fc 81       	ldd	r31, Y+4	; 0x04
    1e34:	80 83       	st	Z, r24
    1e36:	27 c0       	rjmp	.+78     	; 0x1e86 <M_DIO_void_getPinValue+0xf6>
		break;
	case PORTC_ID:
		*pvalue=GET_BIT(PINC_REG,Pin);
    1e38:	e3 e3       	ldi	r30, 0x33	; 51
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	28 2f       	mov	r18, r24
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	8a 81       	ldd	r24, Y+2	; 0x02
    1e44:	88 2f       	mov	r24, r24
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	a9 01       	movw	r20, r18
    1e4a:	02 c0       	rjmp	.+4      	; 0x1e50 <M_DIO_void_getPinValue+0xc0>
    1e4c:	55 95       	asr	r21
    1e4e:	47 95       	ror	r20
    1e50:	8a 95       	dec	r24
    1e52:	e2 f7       	brpl	.-8      	; 0x1e4c <M_DIO_void_getPinValue+0xbc>
    1e54:	ca 01       	movw	r24, r20
    1e56:	81 70       	andi	r24, 0x01	; 1
    1e58:	eb 81       	ldd	r30, Y+3	; 0x03
    1e5a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e5c:	80 83       	st	Z, r24
    1e5e:	13 c0       	rjmp	.+38     	; 0x1e86 <M_DIO_void_getPinValue+0xf6>
		break;
	case PORTD_ID:
		*pvalue=GET_BIT(PIND_REG,Pin);
    1e60:	e0 e3       	ldi	r30, 0x30	; 48
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	88 2f       	mov	r24, r24
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	a9 01       	movw	r20, r18
    1e72:	02 c0       	rjmp	.+4      	; 0x1e78 <M_DIO_void_getPinValue+0xe8>
    1e74:	55 95       	asr	r21
    1e76:	47 95       	ror	r20
    1e78:	8a 95       	dec	r24
    1e7a:	e2 f7       	brpl	.-8      	; 0x1e74 <M_DIO_void_getPinValue+0xe4>
    1e7c:	ca 01       	movw	r24, r20
    1e7e:	81 70       	andi	r24, 0x01	; 1
    1e80:	eb 81       	ldd	r30, Y+3	; 0x03
    1e82:	fc 81       	ldd	r31, Y+4	; 0x04
    1e84:	80 83       	st	Z, r24
		break;
	}
}
    1e86:	26 96       	adiw	r28, 0x06	; 6
    1e88:	0f b6       	in	r0, 0x3f	; 63
    1e8a:	f8 94       	cli
    1e8c:	de bf       	out	0x3e, r29	; 62
    1e8e:	0f be       	out	0x3f, r0	; 63
    1e90:	cd bf       	out	0x3d, r28	; 61
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	08 95       	ret

00001e98 <M_DIO_void_TogPinValue>:
void M_DIO_void_TogPinValue(u8 Port, u8 Pin)
{
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	00 d0       	rcall	.+0      	; 0x1e9e <M_DIO_void_TogPinValue+0x6>
    1e9e:	00 d0       	rcall	.+0      	; 0x1ea0 <M_DIO_void_TogPinValue+0x8>
    1ea0:	cd b7       	in	r28, 0x3d	; 61
    1ea2:	de b7       	in	r29, 0x3e	; 62
    1ea4:	89 83       	std	Y+1, r24	; 0x01
    1ea6:	6a 83       	std	Y+2, r22	; 0x02
	switch (Port){
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	28 2f       	mov	r18, r24
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	3c 83       	std	Y+4, r19	; 0x04
    1eb0:	2b 83       	std	Y+3, r18	; 0x03
    1eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb6:	81 30       	cpi	r24, 0x01	; 1
    1eb8:	91 05       	cpc	r25, r1
    1eba:	49 f1       	breq	.+82     	; 0x1f0e <M_DIO_void_TogPinValue+0x76>
    1ebc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ebe:	3c 81       	ldd	r19, Y+4	; 0x04
    1ec0:	22 30       	cpi	r18, 0x02	; 2
    1ec2:	31 05       	cpc	r19, r1
    1ec4:	2c f4       	brge	.+10     	; 0x1ed0 <M_DIO_void_TogPinValue+0x38>
    1ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eca:	00 97       	sbiw	r24, 0x00	; 0
    1ecc:	61 f0       	breq	.+24     	; 0x1ee6 <M_DIO_void_TogPinValue+0x4e>
    1ece:	5a c0       	rjmp	.+180    	; 0x1f84 <M_DIO_void_TogPinValue+0xec>
    1ed0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ed2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ed4:	22 30       	cpi	r18, 0x02	; 2
    1ed6:	31 05       	cpc	r19, r1
    1ed8:	71 f1       	breq	.+92     	; 0x1f36 <M_DIO_void_TogPinValue+0x9e>
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ede:	83 30       	cpi	r24, 0x03	; 3
    1ee0:	91 05       	cpc	r25, r1
    1ee2:	e9 f1       	breq	.+122    	; 0x1f5e <M_DIO_void_TogPinValue+0xc6>
    1ee4:	4f c0       	rjmp	.+158    	; 0x1f84 <M_DIO_void_TogPinValue+0xec>
		case PORTA_ID:
			TOG_BIT(PORTA_REG,Pin);
    1ee6:	ab e3       	ldi	r26, 0x3B	; 59
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	eb e3       	ldi	r30, 0x3B	; 59
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	48 2f       	mov	r20, r24
    1ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef4:	28 2f       	mov	r18, r24
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	02 2e       	mov	r0, r18
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <M_DIO_void_TogPinValue+0x6c>
    1f00:	88 0f       	add	r24, r24
    1f02:	99 1f       	adc	r25, r25
    1f04:	0a 94       	dec	r0
    1f06:	e2 f7       	brpl	.-8      	; 0x1f00 <M_DIO_void_TogPinValue+0x68>
    1f08:	84 27       	eor	r24, r20
    1f0a:	8c 93       	st	X, r24
    1f0c:	3b c0       	rjmp	.+118    	; 0x1f84 <M_DIO_void_TogPinValue+0xec>
			break;
		case PORTB_ID:
			TOG_BIT(PORTB_REG,Pin);
    1f0e:	a8 e3       	ldi	r26, 0x38	; 56
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	e8 e3       	ldi	r30, 0x38	; 56
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	48 2f       	mov	r20, r24
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1c:	28 2f       	mov	r18, r24
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	02 2e       	mov	r0, r18
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <M_DIO_void_TogPinValue+0x94>
    1f28:	88 0f       	add	r24, r24
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	0a 94       	dec	r0
    1f2e:	e2 f7       	brpl	.-8      	; 0x1f28 <M_DIO_void_TogPinValue+0x90>
    1f30:	84 27       	eor	r24, r20
    1f32:	8c 93       	st	X, r24
    1f34:	27 c0       	rjmp	.+78     	; 0x1f84 <M_DIO_void_TogPinValue+0xec>
			break;
		case PORTC_ID:
			TOG_BIT(PORTC_REG,Pin);
    1f36:	a5 e3       	ldi	r26, 0x35	; 53
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	e5 e3       	ldi	r30, 0x35	; 53
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	48 2f       	mov	r20, r24
    1f42:	8a 81       	ldd	r24, Y+2	; 0x02
    1f44:	28 2f       	mov	r18, r24
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	02 2e       	mov	r0, r18
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <M_DIO_void_TogPinValue+0xbc>
    1f50:	88 0f       	add	r24, r24
    1f52:	99 1f       	adc	r25, r25
    1f54:	0a 94       	dec	r0
    1f56:	e2 f7       	brpl	.-8      	; 0x1f50 <M_DIO_void_TogPinValue+0xb8>
    1f58:	84 27       	eor	r24, r20
    1f5a:	8c 93       	st	X, r24
    1f5c:	13 c0       	rjmp	.+38     	; 0x1f84 <M_DIO_void_TogPinValue+0xec>
			break;
		case PORTD_ID:
			TOG_BIT(PORTD_REG,Pin);
    1f5e:	a2 e3       	ldi	r26, 0x32	; 50
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	e2 e3       	ldi	r30, 0x32	; 50
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	48 2f       	mov	r20, r24
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	02 2e       	mov	r0, r18
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <M_DIO_void_TogPinValue+0xe4>
    1f78:	88 0f       	add	r24, r24
    1f7a:	99 1f       	adc	r25, r25
    1f7c:	0a 94       	dec	r0
    1f7e:	e2 f7       	brpl	.-8      	; 0x1f78 <M_DIO_void_TogPinValue+0xe0>
    1f80:	84 27       	eor	r24, r20
    1f82:	8c 93       	st	X, r24
			break;
		}


}
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	08 95       	ret

00001f92 <H_SSD_void_init>:



//u8 arr[]={0x3f,};
void H_SSD_void_init(void)
{
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
	M_DIO_void_setPinDir(SSD_LED_A_PORT,  SSD_LED_A_PIN , OUT);
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	61 e0       	ldi	r22, 0x01	; 1
    1f9e:	41 e0       	ldi	r20, 0x01	; 1
    1fa0:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_B_PORT,  SSD_LED_B_PIN , OUT);
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	62 e0       	ldi	r22, 0x02	; 2
    1fa8:	41 e0       	ldi	r20, 0x01	; 1
    1faa:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_C_PORT,  SSD_LED_C_PIN , OUT);
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	63 e0       	ldi	r22, 0x03	; 3
    1fb2:	41 e0       	ldi	r20, 0x01	; 1
    1fb4:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_D_PORT,  SSD_LED_D_PIN , OUT);
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	64 e0       	ldi	r22, 0x04	; 4
    1fbc:	41 e0       	ldi	r20, 0x01	; 1
    1fbe:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_E_PORT,  SSD_LED_E_PIN , OUT);
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	65 e0       	ldi	r22, 0x05	; 5
    1fc6:	41 e0       	ldi	r20, 0x01	; 1
    1fc8:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_F_PORT,  SSD_LED_F_PIN , OUT);
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	66 e0       	ldi	r22, 0x06	; 6
    1fd0:	41 e0       	ldi	r20, 0x01	; 1
    1fd2:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_G_PORT,  SSD_LED_G_PIN , OUT);
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	67 e0       	ldi	r22, 0x07	; 7
    1fda:	41 e0       	ldi	r20, 0x01	; 1
    1fdc:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_DOT_PORT,  SSD_LED_DOT_PIN , OUT);
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	60 e0       	ldi	r22, 0x00	; 0
    1fe4:	41 e0       	ldi	r20, 0x01	; 1
    1fe6:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>

	//ENABLE DIGITS 1

	M_DIO_void_setPinDir(SSD_DIG_1_EN_PORT,  SSD_DIG_1_EN_PIN , OUT);
    1fea:	82 e0       	ldi	r24, 0x02	; 2
    1fec:	66 e0       	ldi	r22, 0x06	; 6
    1fee:	41 e0       	ldi	r20, 0x01	; 1
    1ff0:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_DIG_2_EN_PORT,  SSD_DIG_2_EN_PIN , OUT);
    1ff4:	82 e0       	ldi	r24, 0x02	; 2
    1ff6:	67 e0       	ldi	r22, 0x07	; 7
    1ff8:	41 e0       	ldi	r20, 0x01	; 1
    1ffa:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>
}
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	08 95       	ret

00002004 <H_SSD_void_DisplayNumber>:
void H_SSD_void_DisplayNumber(u8 number)
{
    2004:	df 93       	push	r29
    2006:	cf 93       	push	r28
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
    200c:	a7 97       	sbiw	r28, 0x27	; 39
    200e:	0f b6       	in	r0, 0x3f	; 63
    2010:	f8 94       	cli
    2012:	de bf       	out	0x3e, r29	; 62
    2014:	0f be       	out	0x3f, r0	; 63
    2016:	cd bf       	out	0x3d, r28	; 61
    2018:	8b a3       	std	Y+35, r24	; 0x23
	if(number>99)
    201a:	8b a1       	ldd	r24, Y+35	; 0x23
    201c:	84 36       	cpi	r24, 0x64	; 100
    201e:	08 f0       	brcs	.+2      	; 0x2022 <H_SSD_void_DisplayNumber+0x1e>
    2020:	04 c5       	rjmp	.+2568   	; 0x2a2a <H_SSD_void_DisplayNumber+0xa26>
	{
		return;
	}
	u32 i ;
	u8 units =number % 10;
    2022:	8b a1       	ldd	r24, Y+35	; 0x23
    2024:	9a e0       	ldi	r25, 0x0A	; 10
    2026:	69 2f       	mov	r22, r25
    2028:	0e 94 01 26 	call	0x4c02	; 0x4c02 <__udivmodqi4>
    202c:	89 2f       	mov	r24, r25
    202e:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 tens = number/10;
    2030:	8b a1       	ldd	r24, Y+35	; 0x23
    2032:	9a e0       	ldi	r25, 0x0A	; 10
    2034:	69 2f       	mov	r22, r25
    2036:	0e 94 01 26 	call	0x4c02	; 0x4c02 <__udivmodqi4>
    203a:	8d 8f       	std	Y+29, r24	; 0x1d
	for(i=0;i<SSD_DISPLAYY_TIME ;i++){
    203c:	1f 8e       	std	Y+31, r1	; 0x1f
    203e:	18 a2       	std	Y+32, r1	; 0x20
    2040:	19 a2       	std	Y+33, r1	; 0x21
    2042:	1a a2       	std	Y+34, r1	; 0x22
    2044:	e8 c4       	rjmp	.+2512   	; 0x2a16 <H_SSD_void_DisplayNumber+0xa12>

		switch (units)
    2046:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2048:	28 2f       	mov	r18, r24
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	3f a3       	std	Y+39, r19	; 0x27
    204e:	2e a3       	std	Y+38, r18	; 0x26
    2050:	8e a1       	ldd	r24, Y+38	; 0x26
    2052:	9f a1       	ldd	r25, Y+39	; 0x27
    2054:	84 30       	cpi	r24, 0x04	; 4
    2056:	91 05       	cpc	r25, r1
    2058:	09 f4       	brne	.+2      	; 0x205c <H_SSD_void_DisplayNumber+0x58>
    205a:	f0 c0       	rjmp	.+480    	; 0x223c <H_SSD_void_DisplayNumber+0x238>
    205c:	2e a1       	ldd	r18, Y+38	; 0x26
    205e:	3f a1       	ldd	r19, Y+39	; 0x27
    2060:	25 30       	cpi	r18, 0x05	; 5
    2062:	31 05       	cpc	r19, r1
    2064:	ec f4       	brge	.+58     	; 0x20a0 <H_SSD_void_DisplayNumber+0x9c>
    2066:	8e a1       	ldd	r24, Y+38	; 0x26
    2068:	9f a1       	ldd	r25, Y+39	; 0x27
    206a:	81 30       	cpi	r24, 0x01	; 1
    206c:	91 05       	cpc	r25, r1
    206e:	09 f4       	brne	.+2      	; 0x2072 <H_SSD_void_DisplayNumber+0x6e>
    2070:	6a c0       	rjmp	.+212    	; 0x2146 <H_SSD_void_DisplayNumber+0x142>
    2072:	2e a1       	ldd	r18, Y+38	; 0x26
    2074:	3f a1       	ldd	r19, Y+39	; 0x27
    2076:	22 30       	cpi	r18, 0x02	; 2
    2078:	31 05       	cpc	r19, r1
    207a:	2c f4       	brge	.+10     	; 0x2086 <H_SSD_void_DisplayNumber+0x82>
    207c:	8e a1       	ldd	r24, Y+38	; 0x26
    207e:	9f a1       	ldd	r25, Y+39	; 0x27
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	99 f1       	breq	.+102    	; 0x20ea <H_SSD_void_DisplayNumber+0xe6>
    2084:	d0 c1       	rjmp	.+928    	; 0x2426 <H_SSD_void_DisplayNumber+0x422>
    2086:	2e a1       	ldd	r18, Y+38	; 0x26
    2088:	3f a1       	ldd	r19, Y+39	; 0x27
    208a:	22 30       	cpi	r18, 0x02	; 2
    208c:	31 05       	cpc	r19, r1
    208e:	09 f4       	brne	.+2      	; 0x2092 <H_SSD_void_DisplayNumber+0x8e>
    2090:	83 c0       	rjmp	.+262    	; 0x2198 <H_SSD_void_DisplayNumber+0x194>
    2092:	8e a1       	ldd	r24, Y+38	; 0x26
    2094:	9f a1       	ldd	r25, Y+39	; 0x27
    2096:	83 30       	cpi	r24, 0x03	; 3
    2098:	91 05       	cpc	r25, r1
    209a:	09 f4       	brne	.+2      	; 0x209e <H_SSD_void_DisplayNumber+0x9a>
    209c:	a6 c0       	rjmp	.+332    	; 0x21ea <H_SSD_void_DisplayNumber+0x1e6>
    209e:	c3 c1       	rjmp	.+902    	; 0x2426 <H_SSD_void_DisplayNumber+0x422>
    20a0:	2e a1       	ldd	r18, Y+38	; 0x26
    20a2:	3f a1       	ldd	r19, Y+39	; 0x27
    20a4:	27 30       	cpi	r18, 0x07	; 7
    20a6:	31 05       	cpc	r19, r1
    20a8:	09 f4       	brne	.+2      	; 0x20ac <H_SSD_void_DisplayNumber+0xa8>
    20aa:	43 c1       	rjmp	.+646    	; 0x2332 <H_SSD_void_DisplayNumber+0x32e>
    20ac:	8e a1       	ldd	r24, Y+38	; 0x26
    20ae:	9f a1       	ldd	r25, Y+39	; 0x27
    20b0:	88 30       	cpi	r24, 0x08	; 8
    20b2:	91 05       	cpc	r25, r1
    20b4:	6c f4       	brge	.+26     	; 0x20d0 <H_SSD_void_DisplayNumber+0xcc>
    20b6:	2e a1       	ldd	r18, Y+38	; 0x26
    20b8:	3f a1       	ldd	r19, Y+39	; 0x27
    20ba:	25 30       	cpi	r18, 0x05	; 5
    20bc:	31 05       	cpc	r19, r1
    20be:	09 f4       	brne	.+2      	; 0x20c2 <H_SSD_void_DisplayNumber+0xbe>
    20c0:	e6 c0       	rjmp	.+460    	; 0x228e <H_SSD_void_DisplayNumber+0x28a>
    20c2:	8e a1       	ldd	r24, Y+38	; 0x26
    20c4:	9f a1       	ldd	r25, Y+39	; 0x27
    20c6:	86 30       	cpi	r24, 0x06	; 6
    20c8:	91 05       	cpc	r25, r1
    20ca:	09 f4       	brne	.+2      	; 0x20ce <H_SSD_void_DisplayNumber+0xca>
    20cc:	09 c1       	rjmp	.+530    	; 0x22e0 <H_SSD_void_DisplayNumber+0x2dc>
    20ce:	ab c1       	rjmp	.+854    	; 0x2426 <H_SSD_void_DisplayNumber+0x422>
    20d0:	2e a1       	ldd	r18, Y+38	; 0x26
    20d2:	3f a1       	ldd	r19, Y+39	; 0x27
    20d4:	28 30       	cpi	r18, 0x08	; 8
    20d6:	31 05       	cpc	r19, r1
    20d8:	09 f4       	brne	.+2      	; 0x20dc <H_SSD_void_DisplayNumber+0xd8>
    20da:	54 c1       	rjmp	.+680    	; 0x2384 <H_SSD_void_DisplayNumber+0x380>
    20dc:	8e a1       	ldd	r24, Y+38	; 0x26
    20de:	9f a1       	ldd	r25, Y+39	; 0x27
    20e0:	89 30       	cpi	r24, 0x09	; 9
    20e2:	91 05       	cpc	r25, r1
    20e4:	09 f4       	brne	.+2      	; 0x20e8 <H_SSD_void_DisplayNumber+0xe4>
    20e6:	77 c1       	rjmp	.+750    	; 0x23d6 <H_SSD_void_DisplayNumber+0x3d2>
    20e8:	9e c1       	rjmp	.+828    	; 0x2426 <H_SSD_void_DisplayNumber+0x422>
		{
		case 0:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	61 e0       	ldi	r22, 0x01	; 1
    20ee:	41 e0       	ldi	r20, 0x01	; 1
    20f0:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	62 e0       	ldi	r22, 0x02	; 2
    20f8:	41 e0       	ldi	r20, 0x01	; 1
    20fa:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	63 e0       	ldi	r22, 0x03	; 3
    2102:	41 e0       	ldi	r20, 0x01	; 1
    2104:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	64 e0       	ldi	r22, 0x04	; 4
    210c:	41 e0       	ldi	r20, 0x01	; 1
    210e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	65 e0       	ldi	r22, 0x05	; 5
    2116:	41 e0       	ldi	r20, 0x01	; 1
    2118:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	66 e0       	ldi	r22, 0x06	; 6
    2120:	41 e0       	ldi	r20, 0x01	; 1
    2122:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	61 e0       	ldi	r22, 0x01	; 1
    212a:	41 e0       	ldi	r20, 0x01	; 1
    212c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    2130:	80 e0       	ldi	r24, 0x00	; 0
    2132:	67 e0       	ldi	r22, 0x07	; 7
    2134:	40 e0       	ldi	r20, 0x00	; 0
    2136:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	60 e0       	ldi	r22, 0x00	; 0
    213e:	40 e0       	ldi	r20, 0x00	; 0
    2140:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    2144:	70 c1       	rjmp	.+736    	; 0x2426 <H_SSD_void_DisplayNumber+0x422>
			break;

		case 1:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,LOW);
    2146:	80 e0       	ldi	r24, 0x00	; 0
    2148:	61 e0       	ldi	r22, 0x01	; 1
    214a:	40 e0       	ldi	r20, 0x00	; 0
    214c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	62 e0       	ldi	r22, 0x02	; 2
    2154:	41 e0       	ldi	r20, 0x01	; 1
    2156:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	63 e0       	ldi	r22, 0x03	; 3
    215e:	41 e0       	ldi	r20, 0x01	; 1
    2160:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	64 e0       	ldi	r22, 0x04	; 4
    2168:	40 e0       	ldi	r20, 0x00	; 0
    216a:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	65 e0       	ldi	r22, 0x05	; 5
    2172:	40 e0       	ldi	r20, 0x00	; 0
    2174:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	66 e0       	ldi	r22, 0x06	; 6
    217c:	40 e0       	ldi	r20, 0x00	; 0
    217e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	67 e0       	ldi	r22, 0x07	; 7
    2186:	40 e0       	ldi	r20, 0x00	; 0
    2188:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	60 e0       	ldi	r22, 0x00	; 0
    2190:	40 e0       	ldi	r20, 0x00	; 0
    2192:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    2196:	47 c1       	rjmp	.+654    	; 0x2426 <H_SSD_void_DisplayNumber+0x422>
			break;

		case 2:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	61 e0       	ldi	r22, 0x01	; 1
    219c:	41 e0       	ldi	r20, 0x01	; 1
    219e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	62 e0       	ldi	r22, 0x02	; 2
    21a6:	41 e0       	ldi	r20, 0x01	; 1
    21a8:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,LOW);
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	63 e0       	ldi	r22, 0x03	; 3
    21b0:	40 e0       	ldi	r20, 0x00	; 0
    21b2:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	64 e0       	ldi	r22, 0x04	; 4
    21ba:	41 e0       	ldi	r20, 0x01	; 1
    21bc:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	65 e0       	ldi	r22, 0x05	; 5
    21c4:	41 e0       	ldi	r20, 0x01	; 1
    21c6:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	66 e0       	ldi	r22, 0x06	; 6
    21ce:	40 e0       	ldi	r20, 0x00	; 0
    21d0:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	67 e0       	ldi	r22, 0x07	; 7
    21d8:	41 e0       	ldi	r20, 0x01	; 1
    21da:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	60 e0       	ldi	r22, 0x00	; 0
    21e2:	40 e0       	ldi	r20, 0x00	; 0
    21e4:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    21e8:	1e c1       	rjmp	.+572    	; 0x2426 <H_SSD_void_DisplayNumber+0x422>
			break;

		case 3:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	61 e0       	ldi	r22, 0x01	; 1
    21ee:	41 e0       	ldi	r20, 0x01	; 1
    21f0:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	62 e0       	ldi	r22, 0x02	; 2
    21f8:	41 e0       	ldi	r20, 0x01	; 1
    21fa:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	63 e0       	ldi	r22, 0x03	; 3
    2202:	41 e0       	ldi	r20, 0x01	; 1
    2204:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	64 e0       	ldi	r22, 0x04	; 4
    220c:	41 e0       	ldi	r20, 0x01	; 1
    220e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	65 e0       	ldi	r22, 0x05	; 5
    2216:	40 e0       	ldi	r20, 0x00	; 0
    2218:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	66 e0       	ldi	r22, 0x06	; 6
    2220:	40 e0       	ldi	r20, 0x00	; 0
    2222:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	67 e0       	ldi	r22, 0x07	; 7
    222a:	41 e0       	ldi	r20, 0x01	; 1
    222c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	60 e0       	ldi	r22, 0x00	; 0
    2234:	40 e0       	ldi	r20, 0x00	; 0
    2236:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    223a:	f5 c0       	rjmp	.+490    	; 0x2426 <H_SSD_void_DisplayNumber+0x422>
			break;

		case 4:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,LOW);
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	61 e0       	ldi	r22, 0x01	; 1
    2240:	40 e0       	ldi	r20, 0x00	; 0
    2242:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    2246:	80 e0       	ldi	r24, 0x00	; 0
    2248:	62 e0       	ldi	r22, 0x02	; 2
    224a:	41 e0       	ldi	r20, 0x01	; 1
    224c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    2250:	80 e0       	ldi	r24, 0x00	; 0
    2252:	63 e0       	ldi	r22, 0x03	; 3
    2254:	41 e0       	ldi	r20, 0x01	; 1
    2256:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	64 e0       	ldi	r22, 0x04	; 4
    225e:	40 e0       	ldi	r20, 0x00	; 0
    2260:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	65 e0       	ldi	r22, 0x05	; 5
    2268:	40 e0       	ldi	r20, 0x00	; 0
    226a:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	66 e0       	ldi	r22, 0x06	; 6
    2272:	41 e0       	ldi	r20, 0x01	; 1
    2274:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	67 e0       	ldi	r22, 0x07	; 7
    227c:	41 e0       	ldi	r20, 0x01	; 1
    227e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	60 e0       	ldi	r22, 0x00	; 0
    2286:	40 e0       	ldi	r20, 0x00	; 0
    2288:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    228c:	cc c0       	rjmp	.+408    	; 0x2426 <H_SSD_void_DisplayNumber+0x422>
			break;

		case 5:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	61 e0       	ldi	r22, 0x01	; 1
    2292:	41 e0       	ldi	r20, 0x01	; 1
    2294:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,LOW);
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	62 e0       	ldi	r22, 0x02	; 2
    229c:	40 e0       	ldi	r20, 0x00	; 0
    229e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	63 e0       	ldi	r22, 0x03	; 3
    22a6:	41 e0       	ldi	r20, 0x01	; 1
    22a8:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	64 e0       	ldi	r22, 0x04	; 4
    22b0:	41 e0       	ldi	r20, 0x01	; 1
    22b2:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	65 e0       	ldi	r22, 0x05	; 5
    22ba:	40 e0       	ldi	r20, 0x00	; 0
    22bc:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    22c0:	80 e0       	ldi	r24, 0x00	; 0
    22c2:	66 e0       	ldi	r22, 0x06	; 6
    22c4:	41 e0       	ldi	r20, 0x01	; 1
    22c6:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	67 e0       	ldi	r22, 0x07	; 7
    22ce:	41 e0       	ldi	r20, 0x01	; 1
    22d0:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	60 e0       	ldi	r22, 0x00	; 0
    22d8:	40 e0       	ldi	r20, 0x00	; 0
    22da:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    22de:	a3 c0       	rjmp	.+326    	; 0x2426 <H_SSD_void_DisplayNumber+0x422>
			break;
		case 6:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	61 e0       	ldi	r22, 0x01	; 1
    22e4:	41 e0       	ldi	r20, 0x01	; 1
    22e6:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,LOW);
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	62 e0       	ldi	r22, 0x02	; 2
    22ee:	40 e0       	ldi	r20, 0x00	; 0
    22f0:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    22f4:	80 e0       	ldi	r24, 0x00	; 0
    22f6:	63 e0       	ldi	r22, 0x03	; 3
    22f8:	41 e0       	ldi	r20, 0x01	; 1
    22fa:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	64 e0       	ldi	r22, 0x04	; 4
    2302:	41 e0       	ldi	r20, 0x01	; 1
    2304:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	65 e0       	ldi	r22, 0x05	; 5
    230c:	41 e0       	ldi	r20, 0x01	; 1
    230e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	66 e0       	ldi	r22, 0x06	; 6
    2316:	41 e0       	ldi	r20, 0x01	; 1
    2318:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    231c:	80 e0       	ldi	r24, 0x00	; 0
    231e:	67 e0       	ldi	r22, 0x07	; 7
    2320:	41 e0       	ldi	r20, 0x01	; 1
    2322:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	60 e0       	ldi	r22, 0x00	; 0
    232a:	40 e0       	ldi	r20, 0x00	; 0
    232c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    2330:	7a c0       	rjmp	.+244    	; 0x2426 <H_SSD_void_DisplayNumber+0x422>
			break;
		case 7:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    2332:	80 e0       	ldi	r24, 0x00	; 0
    2334:	61 e0       	ldi	r22, 0x01	; 1
    2336:	41 e0       	ldi	r20, 0x01	; 1
    2338:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	62 e0       	ldi	r22, 0x02	; 2
    2340:	41 e0       	ldi	r20, 0x01	; 1
    2342:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	63 e0       	ldi	r22, 0x03	; 3
    234a:	41 e0       	ldi	r20, 0x01	; 1
    234c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	64 e0       	ldi	r22, 0x04	; 4
    2354:	40 e0       	ldi	r20, 0x00	; 0
    2356:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	65 e0       	ldi	r22, 0x05	; 5
    235e:	40 e0       	ldi	r20, 0x00	; 0
    2360:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	66 e0       	ldi	r22, 0x06	; 6
    2368:	40 e0       	ldi	r20, 0x00	; 0
    236a:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	67 e0       	ldi	r22, 0x07	; 7
    2372:	40 e0       	ldi	r20, 0x00	; 0
    2374:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	60 e0       	ldi	r22, 0x00	; 0
    237c:	40 e0       	ldi	r20, 0x00	; 0
    237e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    2382:	51 c0       	rjmp	.+162    	; 0x2426 <H_SSD_void_DisplayNumber+0x422>
			break;
		case 8:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	61 e0       	ldi	r22, 0x01	; 1
    2388:	41 e0       	ldi	r20, 0x01	; 1
    238a:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	62 e0       	ldi	r22, 0x02	; 2
    2392:	41 e0       	ldi	r20, 0x01	; 1
    2394:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    2398:	80 e0       	ldi	r24, 0x00	; 0
    239a:	63 e0       	ldi	r22, 0x03	; 3
    239c:	41 e0       	ldi	r20, 0x01	; 1
    239e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	64 e0       	ldi	r22, 0x04	; 4
    23a6:	41 e0       	ldi	r20, 0x01	; 1
    23a8:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    23ac:	80 e0       	ldi	r24, 0x00	; 0
    23ae:	65 e0       	ldi	r22, 0x05	; 5
    23b0:	41 e0       	ldi	r20, 0x01	; 1
    23b2:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    23b6:	80 e0       	ldi	r24, 0x00	; 0
    23b8:	66 e0       	ldi	r22, 0x06	; 6
    23ba:	41 e0       	ldi	r20, 0x01	; 1
    23bc:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	67 e0       	ldi	r22, 0x07	; 7
    23c4:	41 e0       	ldi	r20, 0x01	; 1
    23c6:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	60 e0       	ldi	r22, 0x00	; 0
    23ce:	40 e0       	ldi	r20, 0x00	; 0
    23d0:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    23d4:	28 c0       	rjmp	.+80     	; 0x2426 <H_SSD_void_DisplayNumber+0x422>
			break;
		case 9:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	61 e0       	ldi	r22, 0x01	; 1
    23da:	41 e0       	ldi	r20, 0x01	; 1
    23dc:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	62 e0       	ldi	r22, 0x02	; 2
    23e4:	41 e0       	ldi	r20, 0x01	; 1
    23e6:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	63 e0       	ldi	r22, 0x03	; 3
    23ee:	41 e0       	ldi	r20, 0x01	; 1
    23f0:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	64 e0       	ldi	r22, 0x04	; 4
    23f8:	41 e0       	ldi	r20, 0x01	; 1
    23fa:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	65 e0       	ldi	r22, 0x05	; 5
    2402:	40 e0       	ldi	r20, 0x00	; 0
    2404:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	66 e0       	ldi	r22, 0x06	; 6
    240c:	41 e0       	ldi	r20, 0x01	; 1
    240e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    2412:	80 e0       	ldi	r24, 0x00	; 0
    2414:	67 e0       	ldi	r22, 0x07	; 7
    2416:	41 e0       	ldi	r20, 0x01	; 1
    2418:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	60 e0       	ldi	r22, 0x00	; 0
    2420:	40 e0       	ldi	r20, 0x00	; 0
    2422:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>


		}
		//enable digit 1
		//disable digit 2
		M_DIO_void_setPinValue(SSD_DIG_1_EN_PORT,SSD_DIG_1_EN_PIN,HIGH);
    2426:	82 e0       	ldi	r24, 0x02	; 2
    2428:	66 e0       	ldi	r22, 0x06	; 6
    242a:	41 e0       	ldi	r20, 0x01	; 1
    242c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
		M_DIO_void_setPinValue(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,LOW);
    2430:	82 e0       	ldi	r24, 0x02	; 2
    2432:	67 e0       	ldi	r22, 0x07	; 7
    2434:	40 e0       	ldi	r20, 0x00	; 0
    2436:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	a0 e8       	ldi	r26, 0x80	; 128
    2440:	bf e3       	ldi	r27, 0x3F	; 63
    2442:	89 8f       	std	Y+25, r24	; 0x19
    2444:	9a 8f       	std	Y+26, r25	; 0x1a
    2446:	ab 8f       	std	Y+27, r26	; 0x1b
    2448:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    244a:	69 8d       	ldd	r22, Y+25	; 0x19
    244c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    244e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2450:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	4a e7       	ldi	r20, 0x7A	; 122
    2458:	55 e4       	ldi	r21, 0x45	; 69
    245a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	8d 8b       	std	Y+21, r24	; 0x15
    2464:	9e 8b       	std	Y+22, r25	; 0x16
    2466:	af 8b       	std	Y+23, r26	; 0x17
    2468:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    246a:	6d 89       	ldd	r22, Y+21	; 0x15
    246c:	7e 89       	ldd	r23, Y+22	; 0x16
    246e:	8f 89       	ldd	r24, Y+23	; 0x17
    2470:	98 8d       	ldd	r25, Y+24	; 0x18
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	40 e8       	ldi	r20, 0x80	; 128
    2478:	5f e3       	ldi	r21, 0x3F	; 63
    247a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    247e:	88 23       	and	r24, r24
    2480:	2c f4       	brge	.+10     	; 0x248c <H_SSD_void_DisplayNumber+0x488>
		__ticks = 1;
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	9c 8b       	std	Y+20, r25	; 0x14
    2488:	8b 8b       	std	Y+19, r24	; 0x13
    248a:	3f c0       	rjmp	.+126    	; 0x250a <H_SSD_void_DisplayNumber+0x506>
	else if (__tmp > 65535)
    248c:	6d 89       	ldd	r22, Y+21	; 0x15
    248e:	7e 89       	ldd	r23, Y+22	; 0x16
    2490:	8f 89       	ldd	r24, Y+23	; 0x17
    2492:	98 8d       	ldd	r25, Y+24	; 0x18
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	3f ef       	ldi	r19, 0xFF	; 255
    2498:	4f e7       	ldi	r20, 0x7F	; 127
    249a:	57 e4       	ldi	r21, 0x47	; 71
    249c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24a0:	18 16       	cp	r1, r24
    24a2:	4c f5       	brge	.+82     	; 0x24f6 <H_SSD_void_DisplayNumber+0x4f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a4:	69 8d       	ldd	r22, Y+25	; 0x19
    24a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	40 e2       	ldi	r20, 0x20	; 32
    24b2:	51 e4       	ldi	r21, 0x41	; 65
    24b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	bc 01       	movw	r22, r24
    24be:	cd 01       	movw	r24, r26
    24c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22
    24c8:	9c 8b       	std	Y+20, r25	; 0x14
    24ca:	8b 8b       	std	Y+19, r24	; 0x13
    24cc:	0f c0       	rjmp	.+30     	; 0x24ec <H_SSD_void_DisplayNumber+0x4e8>
    24ce:	80 e9       	ldi	r24, 0x90	; 144
    24d0:	91 e0       	ldi	r25, 0x01	; 1
    24d2:	9a 8b       	std	Y+18, r25	; 0x12
    24d4:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24d6:	89 89       	ldd	r24, Y+17	; 0x11
    24d8:	9a 89       	ldd	r25, Y+18	; 0x12
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	f1 f7       	brne	.-4      	; 0x24da <H_SSD_void_DisplayNumber+0x4d6>
    24de:	9a 8b       	std	Y+18, r25	; 0x12
    24e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e2:	8b 89       	ldd	r24, Y+19	; 0x13
    24e4:	9c 89       	ldd	r25, Y+20	; 0x14
    24e6:	01 97       	sbiw	r24, 0x01	; 1
    24e8:	9c 8b       	std	Y+20, r25	; 0x14
    24ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ec:	8b 89       	ldd	r24, Y+19	; 0x13
    24ee:	9c 89       	ldd	r25, Y+20	; 0x14
    24f0:	00 97       	sbiw	r24, 0x00	; 0
    24f2:	69 f7       	brne	.-38     	; 0x24ce <H_SSD_void_DisplayNumber+0x4ca>
    24f4:	14 c0       	rjmp	.+40     	; 0x251e <H_SSD_void_DisplayNumber+0x51a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f6:	6d 89       	ldd	r22, Y+21	; 0x15
    24f8:	7e 89       	ldd	r23, Y+22	; 0x16
    24fa:	8f 89       	ldd	r24, Y+23	; 0x17
    24fc:	98 8d       	ldd	r25, Y+24	; 0x18
    24fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	9c 8b       	std	Y+20, r25	; 0x14
    2508:	8b 8b       	std	Y+19, r24	; 0x13
    250a:	8b 89       	ldd	r24, Y+19	; 0x13
    250c:	9c 89       	ldd	r25, Y+20	; 0x14
    250e:	98 8b       	std	Y+16, r25	; 0x10
    2510:	8f 87       	std	Y+15, r24	; 0x0f
    2512:	8f 85       	ldd	r24, Y+15	; 0x0f
    2514:	98 89       	ldd	r25, Y+16	; 0x10
    2516:	01 97       	sbiw	r24, 0x01	; 1
    2518:	f1 f7       	brne	.-4      	; 0x2516 <H_SSD_void_DisplayNumber+0x512>
    251a:	98 8b       	std	Y+16, r25	; 0x10
    251c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		M_DIO_void_setPinValue(SSD_DIG_1_EN_PORT,SSD_DIG_1_EN_PIN,LOW);
    251e:	82 e0       	ldi	r24, 0x02	; 2
    2520:	66 e0       	ldi	r22, 0x06	; 6
    2522:	40 e0       	ldi	r20, 0x00	; 0
    2524:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
		switch (tens)
    2528:	8d 8d       	ldd	r24, Y+29	; 0x1d
    252a:	28 2f       	mov	r18, r24
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	3d a3       	std	Y+37, r19	; 0x25
    2530:	2c a3       	std	Y+36, r18	; 0x24
    2532:	8c a1       	ldd	r24, Y+36	; 0x24
    2534:	9d a1       	ldd	r25, Y+37	; 0x25
    2536:	84 30       	cpi	r24, 0x04	; 4
    2538:	91 05       	cpc	r25, r1
    253a:	09 f4       	brne	.+2      	; 0x253e <H_SSD_void_DisplayNumber+0x53a>
    253c:	f0 c0       	rjmp	.+480    	; 0x271e <H_SSD_void_DisplayNumber+0x71a>
    253e:	2c a1       	ldd	r18, Y+36	; 0x24
    2540:	3d a1       	ldd	r19, Y+37	; 0x25
    2542:	25 30       	cpi	r18, 0x05	; 5
    2544:	31 05       	cpc	r19, r1
    2546:	ec f4       	brge	.+58     	; 0x2582 <H_SSD_void_DisplayNumber+0x57e>
    2548:	8c a1       	ldd	r24, Y+36	; 0x24
    254a:	9d a1       	ldd	r25, Y+37	; 0x25
    254c:	81 30       	cpi	r24, 0x01	; 1
    254e:	91 05       	cpc	r25, r1
    2550:	09 f4       	brne	.+2      	; 0x2554 <H_SSD_void_DisplayNumber+0x550>
    2552:	6a c0       	rjmp	.+212    	; 0x2628 <H_SSD_void_DisplayNumber+0x624>
    2554:	2c a1       	ldd	r18, Y+36	; 0x24
    2556:	3d a1       	ldd	r19, Y+37	; 0x25
    2558:	22 30       	cpi	r18, 0x02	; 2
    255a:	31 05       	cpc	r19, r1
    255c:	2c f4       	brge	.+10     	; 0x2568 <H_SSD_void_DisplayNumber+0x564>
    255e:	8c a1       	ldd	r24, Y+36	; 0x24
    2560:	9d a1       	ldd	r25, Y+37	; 0x25
    2562:	00 97       	sbiw	r24, 0x00	; 0
    2564:	99 f1       	breq	.+102    	; 0x25cc <H_SSD_void_DisplayNumber+0x5c8>
    2566:	d0 c1       	rjmp	.+928    	; 0x2908 <H_SSD_void_DisplayNumber+0x904>
    2568:	2c a1       	ldd	r18, Y+36	; 0x24
    256a:	3d a1       	ldd	r19, Y+37	; 0x25
    256c:	22 30       	cpi	r18, 0x02	; 2
    256e:	31 05       	cpc	r19, r1
    2570:	09 f4       	brne	.+2      	; 0x2574 <H_SSD_void_DisplayNumber+0x570>
    2572:	83 c0       	rjmp	.+262    	; 0x267a <H_SSD_void_DisplayNumber+0x676>
    2574:	8c a1       	ldd	r24, Y+36	; 0x24
    2576:	9d a1       	ldd	r25, Y+37	; 0x25
    2578:	83 30       	cpi	r24, 0x03	; 3
    257a:	91 05       	cpc	r25, r1
    257c:	09 f4       	brne	.+2      	; 0x2580 <H_SSD_void_DisplayNumber+0x57c>
    257e:	a6 c0       	rjmp	.+332    	; 0x26cc <H_SSD_void_DisplayNumber+0x6c8>
    2580:	c3 c1       	rjmp	.+902    	; 0x2908 <H_SSD_void_DisplayNumber+0x904>
    2582:	2c a1       	ldd	r18, Y+36	; 0x24
    2584:	3d a1       	ldd	r19, Y+37	; 0x25
    2586:	27 30       	cpi	r18, 0x07	; 7
    2588:	31 05       	cpc	r19, r1
    258a:	09 f4       	brne	.+2      	; 0x258e <H_SSD_void_DisplayNumber+0x58a>
    258c:	43 c1       	rjmp	.+646    	; 0x2814 <H_SSD_void_DisplayNumber+0x810>
    258e:	8c a1       	ldd	r24, Y+36	; 0x24
    2590:	9d a1       	ldd	r25, Y+37	; 0x25
    2592:	88 30       	cpi	r24, 0x08	; 8
    2594:	91 05       	cpc	r25, r1
    2596:	6c f4       	brge	.+26     	; 0x25b2 <H_SSD_void_DisplayNumber+0x5ae>
    2598:	2c a1       	ldd	r18, Y+36	; 0x24
    259a:	3d a1       	ldd	r19, Y+37	; 0x25
    259c:	25 30       	cpi	r18, 0x05	; 5
    259e:	31 05       	cpc	r19, r1
    25a0:	09 f4       	brne	.+2      	; 0x25a4 <H_SSD_void_DisplayNumber+0x5a0>
    25a2:	e6 c0       	rjmp	.+460    	; 0x2770 <H_SSD_void_DisplayNumber+0x76c>
    25a4:	8c a1       	ldd	r24, Y+36	; 0x24
    25a6:	9d a1       	ldd	r25, Y+37	; 0x25
    25a8:	86 30       	cpi	r24, 0x06	; 6
    25aa:	91 05       	cpc	r25, r1
    25ac:	09 f4       	brne	.+2      	; 0x25b0 <H_SSD_void_DisplayNumber+0x5ac>
    25ae:	09 c1       	rjmp	.+530    	; 0x27c2 <H_SSD_void_DisplayNumber+0x7be>
    25b0:	ab c1       	rjmp	.+854    	; 0x2908 <H_SSD_void_DisplayNumber+0x904>
    25b2:	2c a1       	ldd	r18, Y+36	; 0x24
    25b4:	3d a1       	ldd	r19, Y+37	; 0x25
    25b6:	28 30       	cpi	r18, 0x08	; 8
    25b8:	31 05       	cpc	r19, r1
    25ba:	09 f4       	brne	.+2      	; 0x25be <H_SSD_void_DisplayNumber+0x5ba>
    25bc:	54 c1       	rjmp	.+680    	; 0x2866 <H_SSD_void_DisplayNumber+0x862>
    25be:	8c a1       	ldd	r24, Y+36	; 0x24
    25c0:	9d a1       	ldd	r25, Y+37	; 0x25
    25c2:	89 30       	cpi	r24, 0x09	; 9
    25c4:	91 05       	cpc	r25, r1
    25c6:	09 f4       	brne	.+2      	; 0x25ca <H_SSD_void_DisplayNumber+0x5c6>
    25c8:	77 c1       	rjmp	.+750    	; 0x28b8 <H_SSD_void_DisplayNumber+0x8b4>
    25ca:	9e c1       	rjmp	.+828    	; 0x2908 <H_SSD_void_DisplayNumber+0x904>
		{
		case 0:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	61 e0       	ldi	r22, 0x01	; 1
    25d0:	41 e0       	ldi	r20, 0x01	; 1
    25d2:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	62 e0       	ldi	r22, 0x02	; 2
    25da:	41 e0       	ldi	r20, 0x01	; 1
    25dc:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	63 e0       	ldi	r22, 0x03	; 3
    25e4:	41 e0       	ldi	r20, 0x01	; 1
    25e6:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	64 e0       	ldi	r22, 0x04	; 4
    25ee:	41 e0       	ldi	r20, 0x01	; 1
    25f0:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	65 e0       	ldi	r22, 0x05	; 5
    25f8:	41 e0       	ldi	r20, 0x01	; 1
    25fa:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    25fe:	80 e0       	ldi	r24, 0x00	; 0
    2600:	66 e0       	ldi	r22, 0x06	; 6
    2602:	41 e0       	ldi	r20, 0x01	; 1
    2604:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	61 e0       	ldi	r22, 0x01	; 1
    260c:	41 e0       	ldi	r20, 0x01	; 1
    260e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	67 e0       	ldi	r22, 0x07	; 7
    2616:	40 e0       	ldi	r20, 0x00	; 0
    2618:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	60 e0       	ldi	r22, 0x00	; 0
    2620:	40 e0       	ldi	r20, 0x00	; 0
    2622:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    2626:	70 c1       	rjmp	.+736    	; 0x2908 <H_SSD_void_DisplayNumber+0x904>
					break;

				case 1:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,LOW);
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	61 e0       	ldi	r22, 0x01	; 1
    262c:	40 e0       	ldi	r20, 0x00	; 0
    262e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	62 e0       	ldi	r22, 0x02	; 2
    2636:	41 e0       	ldi	r20, 0x01	; 1
    2638:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	63 e0       	ldi	r22, 0x03	; 3
    2640:	41 e0       	ldi	r20, 0x01	; 1
    2642:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	64 e0       	ldi	r22, 0x04	; 4
    264a:	40 e0       	ldi	r20, 0x00	; 0
    264c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	65 e0       	ldi	r22, 0x05	; 5
    2654:	40 e0       	ldi	r20, 0x00	; 0
    2656:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	66 e0       	ldi	r22, 0x06	; 6
    265e:	40 e0       	ldi	r20, 0x00	; 0
    2660:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	67 e0       	ldi	r22, 0x07	; 7
    2668:	40 e0       	ldi	r20, 0x00	; 0
    266a:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	60 e0       	ldi	r22, 0x00	; 0
    2672:	40 e0       	ldi	r20, 0x00	; 0
    2674:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    2678:	47 c1       	rjmp	.+654    	; 0x2908 <H_SSD_void_DisplayNumber+0x904>
					break;

				case 2:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	61 e0       	ldi	r22, 0x01	; 1
    267e:	41 e0       	ldi	r20, 0x01	; 1
    2680:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	62 e0       	ldi	r22, 0x02	; 2
    2688:	41 e0       	ldi	r20, 0x01	; 1
    268a:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,LOW);
    268e:	80 e0       	ldi	r24, 0x00	; 0
    2690:	63 e0       	ldi	r22, 0x03	; 3
    2692:	40 e0       	ldi	r20, 0x00	; 0
    2694:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	64 e0       	ldi	r22, 0x04	; 4
    269c:	41 e0       	ldi	r20, 0x01	; 1
    269e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    26a2:	80 e0       	ldi	r24, 0x00	; 0
    26a4:	65 e0       	ldi	r22, 0x05	; 5
    26a6:	41 e0       	ldi	r20, 0x01	; 1
    26a8:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	66 e0       	ldi	r22, 0x06	; 6
    26b0:	40 e0       	ldi	r20, 0x00	; 0
    26b2:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    26b6:	80 e0       	ldi	r24, 0x00	; 0
    26b8:	67 e0       	ldi	r22, 0x07	; 7
    26ba:	41 e0       	ldi	r20, 0x01	; 1
    26bc:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	60 e0       	ldi	r22, 0x00	; 0
    26c4:	40 e0       	ldi	r20, 0x00	; 0
    26c6:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    26ca:	1e c1       	rjmp	.+572    	; 0x2908 <H_SSD_void_DisplayNumber+0x904>
					break;

				case 3:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    26cc:	80 e0       	ldi	r24, 0x00	; 0
    26ce:	61 e0       	ldi	r22, 0x01	; 1
    26d0:	41 e0       	ldi	r20, 0x01	; 1
    26d2:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	62 e0       	ldi	r22, 0x02	; 2
    26da:	41 e0       	ldi	r20, 0x01	; 1
    26dc:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	63 e0       	ldi	r22, 0x03	; 3
    26e4:	41 e0       	ldi	r20, 0x01	; 1
    26e6:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	64 e0       	ldi	r22, 0x04	; 4
    26ee:	41 e0       	ldi	r20, 0x01	; 1
    26f0:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	65 e0       	ldi	r22, 0x05	; 5
    26f8:	40 e0       	ldi	r20, 0x00	; 0
    26fa:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	66 e0       	ldi	r22, 0x06	; 6
    2702:	40 e0       	ldi	r20, 0x00	; 0
    2704:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	67 e0       	ldi	r22, 0x07	; 7
    270c:	41 e0       	ldi	r20, 0x01	; 1
    270e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	60 e0       	ldi	r22, 0x00	; 0
    2716:	40 e0       	ldi	r20, 0x00	; 0
    2718:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    271c:	f5 c0       	rjmp	.+490    	; 0x2908 <H_SSD_void_DisplayNumber+0x904>
					break;

				case 4:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,LOW);
    271e:	80 e0       	ldi	r24, 0x00	; 0
    2720:	61 e0       	ldi	r22, 0x01	; 1
    2722:	40 e0       	ldi	r20, 0x00	; 0
    2724:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	62 e0       	ldi	r22, 0x02	; 2
    272c:	41 e0       	ldi	r20, 0x01	; 1
    272e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	63 e0       	ldi	r22, 0x03	; 3
    2736:	41 e0       	ldi	r20, 0x01	; 1
    2738:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	64 e0       	ldi	r22, 0x04	; 4
    2740:	40 e0       	ldi	r20, 0x00	; 0
    2742:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	65 e0       	ldi	r22, 0x05	; 5
    274a:	40 e0       	ldi	r20, 0x00	; 0
    274c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	66 e0       	ldi	r22, 0x06	; 6
    2754:	41 e0       	ldi	r20, 0x01	; 1
    2756:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	67 e0       	ldi	r22, 0x07	; 7
    275e:	41 e0       	ldi	r20, 0x01	; 1
    2760:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	60 e0       	ldi	r22, 0x00	; 0
    2768:	40 e0       	ldi	r20, 0x00	; 0
    276a:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    276e:	cc c0       	rjmp	.+408    	; 0x2908 <H_SSD_void_DisplayNumber+0x904>
					break;

				case 5:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	61 e0       	ldi	r22, 0x01	; 1
    2774:	41 e0       	ldi	r20, 0x01	; 1
    2776:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,LOW);
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	62 e0       	ldi	r22, 0x02	; 2
    277e:	40 e0       	ldi	r20, 0x00	; 0
    2780:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    2784:	80 e0       	ldi	r24, 0x00	; 0
    2786:	63 e0       	ldi	r22, 0x03	; 3
    2788:	41 e0       	ldi	r20, 0x01	; 1
    278a:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	64 e0       	ldi	r22, 0x04	; 4
    2792:	41 e0       	ldi	r20, 0x01	; 1
    2794:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	65 e0       	ldi	r22, 0x05	; 5
    279c:	40 e0       	ldi	r20, 0x00	; 0
    279e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    27a2:	80 e0       	ldi	r24, 0x00	; 0
    27a4:	66 e0       	ldi	r22, 0x06	; 6
    27a6:	41 e0       	ldi	r20, 0x01	; 1
    27a8:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    27ac:	80 e0       	ldi	r24, 0x00	; 0
    27ae:	67 e0       	ldi	r22, 0x07	; 7
    27b0:	41 e0       	ldi	r20, 0x01	; 1
    27b2:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	60 e0       	ldi	r22, 0x00	; 0
    27ba:	40 e0       	ldi	r20, 0x00	; 0
    27bc:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    27c0:	a3 c0       	rjmp	.+326    	; 0x2908 <H_SSD_void_DisplayNumber+0x904>
					break;
				case 6:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    27c2:	80 e0       	ldi	r24, 0x00	; 0
    27c4:	61 e0       	ldi	r22, 0x01	; 1
    27c6:	41 e0       	ldi	r20, 0x01	; 1
    27c8:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,LOW);
    27cc:	80 e0       	ldi	r24, 0x00	; 0
    27ce:	62 e0       	ldi	r22, 0x02	; 2
    27d0:	40 e0       	ldi	r20, 0x00	; 0
    27d2:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	63 e0       	ldi	r22, 0x03	; 3
    27da:	41 e0       	ldi	r20, 0x01	; 1
    27dc:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	64 e0       	ldi	r22, 0x04	; 4
    27e4:	41 e0       	ldi	r20, 0x01	; 1
    27e6:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	65 e0       	ldi	r22, 0x05	; 5
    27ee:	41 e0       	ldi	r20, 0x01	; 1
    27f0:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    27f4:	80 e0       	ldi	r24, 0x00	; 0
    27f6:	66 e0       	ldi	r22, 0x06	; 6
    27f8:	41 e0       	ldi	r20, 0x01	; 1
    27fa:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	67 e0       	ldi	r22, 0x07	; 7
    2802:	41 e0       	ldi	r20, 0x01	; 1
    2804:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	60 e0       	ldi	r22, 0x00	; 0
    280c:	40 e0       	ldi	r20, 0x00	; 0
    280e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    2812:	7a c0       	rjmp	.+244    	; 0x2908 <H_SSD_void_DisplayNumber+0x904>
					break;
				case 7:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	61 e0       	ldi	r22, 0x01	; 1
    2818:	41 e0       	ldi	r20, 0x01	; 1
    281a:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	62 e0       	ldi	r22, 0x02	; 2
    2822:	41 e0       	ldi	r20, 0x01	; 1
    2824:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	63 e0       	ldi	r22, 0x03	; 3
    282c:	41 e0       	ldi	r20, 0x01	; 1
    282e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	64 e0       	ldi	r22, 0x04	; 4
    2836:	40 e0       	ldi	r20, 0x00	; 0
    2838:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	65 e0       	ldi	r22, 0x05	; 5
    2840:	40 e0       	ldi	r20, 0x00	; 0
    2842:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	66 e0       	ldi	r22, 0x06	; 6
    284a:	40 e0       	ldi	r20, 0x00	; 0
    284c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	67 e0       	ldi	r22, 0x07	; 7
    2854:	40 e0       	ldi	r20, 0x00	; 0
    2856:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	60 e0       	ldi	r22, 0x00	; 0
    285e:	40 e0       	ldi	r20, 0x00	; 0
    2860:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    2864:	51 c0       	rjmp	.+162    	; 0x2908 <H_SSD_void_DisplayNumber+0x904>
					break;
				case 8:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	61 e0       	ldi	r22, 0x01	; 1
    286a:	41 e0       	ldi	r20, 0x01	; 1
    286c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	62 e0       	ldi	r22, 0x02	; 2
    2874:	41 e0       	ldi	r20, 0x01	; 1
    2876:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    287a:	80 e0       	ldi	r24, 0x00	; 0
    287c:	63 e0       	ldi	r22, 0x03	; 3
    287e:	41 e0       	ldi	r20, 0x01	; 1
    2880:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    2884:	80 e0       	ldi	r24, 0x00	; 0
    2886:	64 e0       	ldi	r22, 0x04	; 4
    2888:	41 e0       	ldi	r20, 0x01	; 1
    288a:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	65 e0       	ldi	r22, 0x05	; 5
    2892:	41 e0       	ldi	r20, 0x01	; 1
    2894:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    2898:	80 e0       	ldi	r24, 0x00	; 0
    289a:	66 e0       	ldi	r22, 0x06	; 6
    289c:	41 e0       	ldi	r20, 0x01	; 1
    289e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    28a2:	80 e0       	ldi	r24, 0x00	; 0
    28a4:	67 e0       	ldi	r22, 0x07	; 7
    28a6:	41 e0       	ldi	r20, 0x01	; 1
    28a8:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	60 e0       	ldi	r22, 0x00	; 0
    28b0:	40 e0       	ldi	r20, 0x00	; 0
    28b2:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    28b6:	28 c0       	rjmp	.+80     	; 0x2908 <H_SSD_void_DisplayNumber+0x904>
					break;
				case 9:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	61 e0       	ldi	r22, 0x01	; 1
    28bc:	41 e0       	ldi	r20, 0x01	; 1
    28be:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    28c2:	80 e0       	ldi	r24, 0x00	; 0
    28c4:	62 e0       	ldi	r22, 0x02	; 2
    28c6:	41 e0       	ldi	r20, 0x01	; 1
    28c8:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	63 e0       	ldi	r22, 0x03	; 3
    28d0:	41 e0       	ldi	r20, 0x01	; 1
    28d2:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    28d6:	80 e0       	ldi	r24, 0x00	; 0
    28d8:	64 e0       	ldi	r22, 0x04	; 4
    28da:	41 e0       	ldi	r20, 0x01	; 1
    28dc:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	65 e0       	ldi	r22, 0x05	; 5
    28e4:	40 e0       	ldi	r20, 0x00	; 0
    28e6:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	66 e0       	ldi	r22, 0x06	; 6
    28ee:	41 e0       	ldi	r20, 0x01	; 1
    28f0:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	67 e0       	ldi	r22, 0x07	; 7
    28f8:	41 e0       	ldi	r20, 0x01	; 1
    28fa:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    28fe:	81 e0       	ldi	r24, 0x01	; 1
    2900:	60 e0       	ldi	r22, 0x00	; 0
    2902:	40 e0       	ldi	r20, 0x00	; 0
    2904:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>



				}
		//enable digit 2
		M_DIO_void_setPinValue(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,HIGH);
    2908:	82 e0       	ldi	r24, 0x02	; 2
    290a:	67 e0       	ldi	r22, 0x07	; 7
    290c:	41 e0       	ldi	r20, 0x01	; 1
    290e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	a0 e8       	ldi	r26, 0x80	; 128
    2918:	bf e3       	ldi	r27, 0x3F	; 63
    291a:	8b 87       	std	Y+11, r24	; 0x0b
    291c:	9c 87       	std	Y+12, r25	; 0x0c
    291e:	ad 87       	std	Y+13, r26	; 0x0d
    2920:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2922:	6b 85       	ldd	r22, Y+11	; 0x0b
    2924:	7c 85       	ldd	r23, Y+12	; 0x0c
    2926:	8d 85       	ldd	r24, Y+13	; 0x0d
    2928:	9e 85       	ldd	r25, Y+14	; 0x0e
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	4a e7       	ldi	r20, 0x7A	; 122
    2930:	55 e4       	ldi	r21, 0x45	; 69
    2932:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	8f 83       	std	Y+7, r24	; 0x07
    293c:	98 87       	std	Y+8, r25	; 0x08
    293e:	a9 87       	std	Y+9, r26	; 0x09
    2940:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2942:	6f 81       	ldd	r22, Y+7	; 0x07
    2944:	78 85       	ldd	r23, Y+8	; 0x08
    2946:	89 85       	ldd	r24, Y+9	; 0x09
    2948:	9a 85       	ldd	r25, Y+10	; 0x0a
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	40 e8       	ldi	r20, 0x80	; 128
    2950:	5f e3       	ldi	r21, 0x3F	; 63
    2952:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2956:	88 23       	and	r24, r24
    2958:	2c f4       	brge	.+10     	; 0x2964 <H_SSD_void_DisplayNumber+0x960>
		__ticks = 1;
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	9e 83       	std	Y+6, r25	; 0x06
    2960:	8d 83       	std	Y+5, r24	; 0x05
    2962:	3f c0       	rjmp	.+126    	; 0x29e2 <H_SSD_void_DisplayNumber+0x9de>
	else if (__tmp > 65535)
    2964:	6f 81       	ldd	r22, Y+7	; 0x07
    2966:	78 85       	ldd	r23, Y+8	; 0x08
    2968:	89 85       	ldd	r24, Y+9	; 0x09
    296a:	9a 85       	ldd	r25, Y+10	; 0x0a
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	3f ef       	ldi	r19, 0xFF	; 255
    2970:	4f e7       	ldi	r20, 0x7F	; 127
    2972:	57 e4       	ldi	r21, 0x47	; 71
    2974:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2978:	18 16       	cp	r1, r24
    297a:	4c f5       	brge	.+82     	; 0x29ce <H_SSD_void_DisplayNumber+0x9ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    297c:	6b 85       	ldd	r22, Y+11	; 0x0b
    297e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2980:	8d 85       	ldd	r24, Y+13	; 0x0d
    2982:	9e 85       	ldd	r25, Y+14	; 0x0e
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	40 e2       	ldi	r20, 0x20	; 32
    298a:	51 e4       	ldi	r21, 0x41	; 65
    298c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	bc 01       	movw	r22, r24
    2996:	cd 01       	movw	r24, r26
    2998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	9e 83       	std	Y+6, r25	; 0x06
    29a2:	8d 83       	std	Y+5, r24	; 0x05
    29a4:	0f c0       	rjmp	.+30     	; 0x29c4 <H_SSD_void_DisplayNumber+0x9c0>
    29a6:	80 e9       	ldi	r24, 0x90	; 144
    29a8:	91 e0       	ldi	r25, 0x01	; 1
    29aa:	9c 83       	std	Y+4, r25	; 0x04
    29ac:	8b 83       	std	Y+3, r24	; 0x03
    29ae:	8b 81       	ldd	r24, Y+3	; 0x03
    29b0:	9c 81       	ldd	r25, Y+4	; 0x04
    29b2:	01 97       	sbiw	r24, 0x01	; 1
    29b4:	f1 f7       	brne	.-4      	; 0x29b2 <H_SSD_void_DisplayNumber+0x9ae>
    29b6:	9c 83       	std	Y+4, r25	; 0x04
    29b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ba:	8d 81       	ldd	r24, Y+5	; 0x05
    29bc:	9e 81       	ldd	r25, Y+6	; 0x06
    29be:	01 97       	sbiw	r24, 0x01	; 1
    29c0:	9e 83       	std	Y+6, r25	; 0x06
    29c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c4:	8d 81       	ldd	r24, Y+5	; 0x05
    29c6:	9e 81       	ldd	r25, Y+6	; 0x06
    29c8:	00 97       	sbiw	r24, 0x00	; 0
    29ca:	69 f7       	brne	.-38     	; 0x29a6 <H_SSD_void_DisplayNumber+0x9a2>
    29cc:	14 c0       	rjmp	.+40     	; 0x29f6 <H_SSD_void_DisplayNumber+0x9f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ce:	6f 81       	ldd	r22, Y+7	; 0x07
    29d0:	78 85       	ldd	r23, Y+8	; 0x08
    29d2:	89 85       	ldd	r24, Y+9	; 0x09
    29d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	9e 83       	std	Y+6, r25	; 0x06
    29e0:	8d 83       	std	Y+5, r24	; 0x05
    29e2:	8d 81       	ldd	r24, Y+5	; 0x05
    29e4:	9e 81       	ldd	r25, Y+6	; 0x06
    29e6:	9a 83       	std	Y+2, r25	; 0x02
    29e8:	89 83       	std	Y+1, r24	; 0x01
    29ea:	89 81       	ldd	r24, Y+1	; 0x01
    29ec:	9a 81       	ldd	r25, Y+2	; 0x02
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	f1 f7       	brne	.-4      	; 0x29ee <H_SSD_void_DisplayNumber+0x9ea>
    29f2:	9a 83       	std	Y+2, r25	; 0x02
    29f4:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(1);
		M_DIO_void_setPinValue(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,LOW);
    29f6:	82 e0       	ldi	r24, 0x02	; 2
    29f8:	67 e0       	ldi	r22, 0x07	; 7
    29fa:	40 e0       	ldi	r20, 0x00	; 0
    29fc:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
		return;
	}
	u32 i ;
	u8 units =number % 10;
	u8 tens = number/10;
	for(i=0;i<SSD_DISPLAYY_TIME ;i++){
    2a00:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a02:	98 a1       	ldd	r25, Y+32	; 0x20
    2a04:	a9 a1       	ldd	r26, Y+33	; 0x21
    2a06:	ba a1       	ldd	r27, Y+34	; 0x22
    2a08:	01 96       	adiw	r24, 0x01	; 1
    2a0a:	a1 1d       	adc	r26, r1
    2a0c:	b1 1d       	adc	r27, r1
    2a0e:	8f 8f       	std	Y+31, r24	; 0x1f
    2a10:	98 a3       	std	Y+32, r25	; 0x20
    2a12:	a9 a3       	std	Y+33, r26	; 0x21
    2a14:	ba a3       	std	Y+34, r27	; 0x22
    2a16:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a18:	98 a1       	ldd	r25, Y+32	; 0x20
    2a1a:	a9 a1       	ldd	r26, Y+33	; 0x21
    2a1c:	ba a1       	ldd	r27, Y+34	; 0x22
    2a1e:	8a 3f       	cpi	r24, 0xFA	; 250
    2a20:	91 05       	cpc	r25, r1
    2a22:	a1 05       	cpc	r26, r1
    2a24:	b1 05       	cpc	r27, r1
    2a26:	08 f4       	brcc	.+2      	; 0x2a2a <H_SSD_void_DisplayNumber+0xa26>
    2a28:	0e cb       	rjmp	.-2532   	; 0x2046 <H_SSD_void_DisplayNumber+0x42>
		M_DIO_void_setPinValue(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,HIGH);

		_delay_ms(1);
		M_DIO_void_setPinValue(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,LOW);
	}
}
    2a2a:	a7 96       	adiw	r28, 0x27	; 39
    2a2c:	0f b6       	in	r0, 0x3f	; 63
    2a2e:	f8 94       	cli
    2a30:	de bf       	out	0x3e, r29	; 62
    2a32:	0f be       	out	0x3f, r0	; 63
    2a34:	cd bf       	out	0x3d, r28	; 61
    2a36:	cf 91       	pop	r28
    2a38:	df 91       	pop	r29
    2a3a:	08 95       	ret

00002a3c <H_PB_void_init>:
#include"PB_int.h"
#include<util/delay.h>


void H_PB_void_init(const PB_t *ptr)
{
    2a3c:	df 93       	push	r29
    2a3e:	cf 93       	push	r28
    2a40:	00 d0       	rcall	.+0      	; 0x2a42 <H_PB_void_init+0x6>
    2a42:	cd b7       	in	r28, 0x3d	; 61
    2a44:	de b7       	in	r29, 0x3e	; 62
    2a46:	9a 83       	std	Y+2, r25	; 0x02
    2a48:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_void_setPinDir(ptr->PB_port, ptr->PB_pin,IN);
    2a4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a4e:	81 81       	ldd	r24, Z+1	; 0x01
    2a50:	e9 81       	ldd	r30, Y+1	; 0x01
    2a52:	fa 81       	ldd	r31, Y+2	; 0x02
    2a54:	92 81       	ldd	r25, Z+2	; 0x02
    2a56:	69 2f       	mov	r22, r25
    2a58:	40 e0       	ldi	r20, 0x00	; 0
    2a5a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>
}
    2a5e:	0f 90       	pop	r0
    2a60:	0f 90       	pop	r0
    2a62:	cf 91       	pop	r28
    2a64:	df 91       	pop	r29
    2a66:	08 95       	ret

00002a68 <H_PB_void_read>:
void H_PB_void_read(const PB_t *ptr,VALUE_T *pvalue)
{
    2a68:	df 93       	push	r29
    2a6a:	cf 93       	push	r28
    2a6c:	cd b7       	in	r28, 0x3d	; 61
    2a6e:	de b7       	in	r29, 0x3e	; 62
    2a70:	a1 97       	sbiw	r28, 0x21	; 33
    2a72:	0f b6       	in	r0, 0x3f	; 63
    2a74:	f8 94       	cli
    2a76:	de bf       	out	0x3e, r29	; 62
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	cd bf       	out	0x3d, r28	; 61
    2a7c:	9f 8f       	std	Y+31, r25	; 0x1f
    2a7e:	8e 8f       	std	Y+30, r24	; 0x1e
    2a80:	79 a3       	std	Y+33, r23	; 0x21
    2a82:	68 a3       	std	Y+32, r22	; 0x20
	//u8 read;

	if(ptr -> PB_activeMood == ACTIVE_LOW)
    2a84:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2a86:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2a88:	83 81       	ldd	r24, Z+3	; 0x03
    2a8a:	88 23       	and	r24, r24
    2a8c:	09 f0       	breq	.+2      	; 0x2a90 <H_PB_void_read+0x28>
    2a8e:	b0 c0       	rjmp	.+352    	; 0x2bf0 <H_PB_void_read+0x188>
	{
		*pvalue=NOT_PRESSED_ACTIVE_LOW ;
    2a90:	e8 a1       	ldd	r30, Y+32	; 0x20
    2a92:	f9 a1       	ldd	r31, Y+33	; 0x21
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	80 83       	st	Z, r24
		M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, pvalue);
    2a98:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2a9a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2a9c:	81 81       	ldd	r24, Z+1	; 0x01
    2a9e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2aa0:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2aa2:	92 81       	ldd	r25, Z+2	; 0x02
    2aa4:	28 a1       	ldd	r18, Y+32	; 0x20
    2aa6:	39 a1       	ldd	r19, Y+33	; 0x21
    2aa8:	69 2f       	mov	r22, r25
    2aaa:	a9 01       	movw	r20, r18
    2aac:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <M_DIO_void_getPinValue>
		if(*pvalue==PRESSED_ACTIVE_LOW){
    2ab0:	e8 a1       	ldd	r30, Y+32	; 0x20
    2ab2:	f9 a1       	ldd	r31, Y+33	; 0x21
    2ab4:	80 81       	ld	r24, Z
    2ab6:	88 23       	and	r24, r24
    2ab8:	09 f0       	breq	.+2      	; 0x2abc <H_PB_void_read+0x54>
    2aba:	4f c1       	rjmp	.+670    	; 0x2d5a <H_PB_void_read+0x2f2>
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	a8 e4       	ldi	r26, 0x48	; 72
    2ac2:	b3 e4       	ldi	r27, 0x43	; 67
    2ac4:	89 8f       	std	Y+25, r24	; 0x19
    2ac6:	9a 8f       	std	Y+26, r25	; 0x1a
    2ac8:	ab 8f       	std	Y+27, r26	; 0x1b
    2aca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2acc:	69 8d       	ldd	r22, Y+25	; 0x19
    2ace:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ad0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ad2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	4a e7       	ldi	r20, 0x7A	; 122
    2ada:	55 e4       	ldi	r21, 0x45	; 69
    2adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	8d 8b       	std	Y+21, r24	; 0x15
    2ae6:	9e 8b       	std	Y+22, r25	; 0x16
    2ae8:	af 8b       	std	Y+23, r26	; 0x17
    2aea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2aec:	6d 89       	ldd	r22, Y+21	; 0x15
    2aee:	7e 89       	ldd	r23, Y+22	; 0x16
    2af0:	8f 89       	ldd	r24, Y+23	; 0x17
    2af2:	98 8d       	ldd	r25, Y+24	; 0x18
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	40 e8       	ldi	r20, 0x80	; 128
    2afa:	5f e3       	ldi	r21, 0x3F	; 63
    2afc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b00:	88 23       	and	r24, r24
    2b02:	2c f4       	brge	.+10     	; 0x2b0e <H_PB_void_read+0xa6>
		__ticks = 1;
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	9c 8b       	std	Y+20, r25	; 0x14
    2b0a:	8b 8b       	std	Y+19, r24	; 0x13
    2b0c:	3f c0       	rjmp	.+126    	; 0x2b8c <H_PB_void_read+0x124>
	else if (__tmp > 65535)
    2b0e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b10:	7e 89       	ldd	r23, Y+22	; 0x16
    2b12:	8f 89       	ldd	r24, Y+23	; 0x17
    2b14:	98 8d       	ldd	r25, Y+24	; 0x18
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	3f ef       	ldi	r19, 0xFF	; 255
    2b1a:	4f e7       	ldi	r20, 0x7F	; 127
    2b1c:	57 e4       	ldi	r21, 0x47	; 71
    2b1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b22:	18 16       	cp	r1, r24
    2b24:	4c f5       	brge	.+82     	; 0x2b78 <H_PB_void_read+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b26:	69 8d       	ldd	r22, Y+25	; 0x19
    2b28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	40 e2       	ldi	r20, 0x20	; 32
    2b34:	51 e4       	ldi	r21, 0x41	; 65
    2b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	bc 01       	movw	r22, r24
    2b40:	cd 01       	movw	r24, r26
    2b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	9c 8b       	std	Y+20, r25	; 0x14
    2b4c:	8b 8b       	std	Y+19, r24	; 0x13
    2b4e:	0f c0       	rjmp	.+30     	; 0x2b6e <H_PB_void_read+0x106>
    2b50:	80 e9       	ldi	r24, 0x90	; 144
    2b52:	91 e0       	ldi	r25, 0x01	; 1
    2b54:	9a 8b       	std	Y+18, r25	; 0x12
    2b56:	89 8b       	std	Y+17, r24	; 0x11
    2b58:	89 89       	ldd	r24, Y+17	; 0x11
    2b5a:	9a 89       	ldd	r25, Y+18	; 0x12
    2b5c:	01 97       	sbiw	r24, 0x01	; 1
    2b5e:	f1 f7       	brne	.-4      	; 0x2b5c <H_PB_void_read+0xf4>
    2b60:	9a 8b       	std	Y+18, r25	; 0x12
    2b62:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b64:	8b 89       	ldd	r24, Y+19	; 0x13
    2b66:	9c 89       	ldd	r25, Y+20	; 0x14
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	9c 8b       	std	Y+20, r25	; 0x14
    2b6c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b6e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b70:	9c 89       	ldd	r25, Y+20	; 0x14
    2b72:	00 97       	sbiw	r24, 0x00	; 0
    2b74:	69 f7       	brne	.-38     	; 0x2b50 <H_PB_void_read+0xe8>
    2b76:	14 c0       	rjmp	.+40     	; 0x2ba0 <H_PB_void_read+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b78:	6d 89       	ldd	r22, Y+21	; 0x15
    2b7a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b7e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	9c 8b       	std	Y+20, r25	; 0x14
    2b8a:	8b 8b       	std	Y+19, r24	; 0x13
    2b8c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b8e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b90:	98 8b       	std	Y+16, r25	; 0x10
    2b92:	8f 87       	std	Y+15, r24	; 0x0f
    2b94:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b96:	98 89       	ldd	r25, Y+16	; 0x10
    2b98:	01 97       	sbiw	r24, 0x01	; 1
    2b9a:	f1 f7       	brne	.-4      	; 0x2b98 <H_PB_void_read+0x130>
    2b9c:	98 8b       	std	Y+16, r25	; 0x10
    2b9e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(200);

			M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin,pvalue);
    2ba0:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2ba2:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2ba4:	81 81       	ldd	r24, Z+1	; 0x01
    2ba6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2ba8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2baa:	92 81       	ldd	r25, Z+2	; 0x02
    2bac:	28 a1       	ldd	r18, Y+32	; 0x20
    2bae:	39 a1       	ldd	r19, Y+33	; 0x21
    2bb0:	69 2f       	mov	r22, r25
    2bb2:	a9 01       	movw	r20, r18
    2bb4:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <M_DIO_void_getPinValue>
			if (*pvalue==PRESSED_ACTIVE_LOW)
    2bb8:	e8 a1       	ldd	r30, Y+32	; 0x20
    2bba:	f9 a1       	ldd	r31, Y+33	; 0x21
    2bbc:	80 81       	ld	r24, Z
    2bbe:	88 23       	and	r24, r24
    2bc0:	09 f0       	breq	.+2      	; 0x2bc4 <H_PB_void_read+0x15c>
    2bc2:	cb c0       	rjmp	.+406    	; 0x2d5a <H_PB_void_read+0x2f2>
    2bc4:	0c c0       	rjmp	.+24     	; 0x2bde <H_PB_void_read+0x176>
			{
				while(*pvalue==PRESSED_ACTIVE_LOW)
				{
					M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, pvalue);
    2bc6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2bc8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2bca:	81 81       	ldd	r24, Z+1	; 0x01
    2bcc:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2bce:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2bd0:	92 81       	ldd	r25, Z+2	; 0x02
    2bd2:	28 a1       	ldd	r18, Y+32	; 0x20
    2bd4:	39 a1       	ldd	r19, Y+33	; 0x21
    2bd6:	69 2f       	mov	r22, r25
    2bd8:	a9 01       	movw	r20, r18
    2bda:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <M_DIO_void_getPinValue>
			_delay_ms(200);

			M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin,pvalue);
			if (*pvalue==PRESSED_ACTIVE_LOW)
			{
				while(*pvalue==PRESSED_ACTIVE_LOW)
    2bde:	e8 a1       	ldd	r30, Y+32	; 0x20
    2be0:	f9 a1       	ldd	r31, Y+33	; 0x21
    2be2:	80 81       	ld	r24, Z
    2be4:	88 23       	and	r24, r24
    2be6:	79 f3       	breq	.-34     	; 0x2bc6 <H_PB_void_read+0x15e>
				{
					M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, pvalue);
				}
				*pvalue=PRESSED_ACTIVE_LOW;
    2be8:	e8 a1       	ldd	r30, Y+32	; 0x20
    2bea:	f9 a1       	ldd	r31, Y+33	; 0x21
    2bec:	10 82       	st	Z, r1
    2bee:	b5 c0       	rjmp	.+362    	; 0x2d5a <H_PB_void_read+0x2f2>
				return;
			}

		}
	}
	else if(ptr->PB_activeMood==ACTIVE_HIGH)
    2bf0:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2bf2:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2bf4:	83 81       	ldd	r24, Z+3	; 0x03
    2bf6:	81 30       	cpi	r24, 0x01	; 1
    2bf8:	09 f0       	breq	.+2      	; 0x2bfc <H_PB_void_read+0x194>
    2bfa:	af c0       	rjmp	.+350    	; 0x2d5a <H_PB_void_read+0x2f2>
	{
		u8 read;

		if(ptr->PB_activeMood==ACTIVE_LOW)
    2bfc:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2bfe:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2c00:	83 81       	ldd	r24, Z+3	; 0x03
    2c02:	88 23       	and	r24, r24
    2c04:	09 f0       	breq	.+2      	; 0x2c08 <H_PB_void_read+0x1a0>
    2c06:	a9 c0       	rjmp	.+338    	; 0x2d5a <H_PB_void_read+0x2f2>
		{
			read=NOT_PRESSED_ACTIVEHIGH ;
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	8d 8f       	std	Y+29, r24	; 0x1d
			M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, &pvalue);
    2c0c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2c0e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2c10:	81 81       	ldd	r24, Z+1	; 0x01
    2c12:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2c14:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2c16:	92 81       	ldd	r25, Z+2	; 0x02
    2c18:	9e 01       	movw	r18, r28
    2c1a:	20 5e       	subi	r18, 0xE0	; 224
    2c1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c1e:	69 2f       	mov	r22, r25
    2c20:	a9 01       	movw	r20, r18
    2c22:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <M_DIO_void_getPinValue>
			if(read==PRESSED_ACTIVE_LOW){
    2c26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c28:	88 23       	and	r24, r24
    2c2a:	09 f0       	breq	.+2      	; 0x2c2e <H_PB_void_read+0x1c6>
    2c2c:	96 c0       	rjmp	.+300    	; 0x2d5a <H_PB_void_read+0x2f2>
    2c2e:	80 e0       	ldi	r24, 0x00	; 0
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	a8 e4       	ldi	r26, 0x48	; 72
    2c34:	b3 e4       	ldi	r27, 0x43	; 67
    2c36:	8b 87       	std	Y+11, r24	; 0x0b
    2c38:	9c 87       	std	Y+12, r25	; 0x0c
    2c3a:	ad 87       	std	Y+13, r26	; 0x0d
    2c3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c40:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c44:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	4a e7       	ldi	r20, 0x7A	; 122
    2c4c:	55 e4       	ldi	r21, 0x45	; 69
    2c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	8f 83       	std	Y+7, r24	; 0x07
    2c58:	98 87       	std	Y+8, r25	; 0x08
    2c5a:	a9 87       	std	Y+9, r26	; 0x09
    2c5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c60:	78 85       	ldd	r23, Y+8	; 0x08
    2c62:	89 85       	ldd	r24, Y+9	; 0x09
    2c64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	40 e8       	ldi	r20, 0x80	; 128
    2c6c:	5f e3       	ldi	r21, 0x3F	; 63
    2c6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c72:	88 23       	and	r24, r24
    2c74:	2c f4       	brge	.+10     	; 0x2c80 <H_PB_void_read+0x218>
		__ticks = 1;
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	9e 83       	std	Y+6, r25	; 0x06
    2c7c:	8d 83       	std	Y+5, r24	; 0x05
    2c7e:	3f c0       	rjmp	.+126    	; 0x2cfe <H_PB_void_read+0x296>
	else if (__tmp > 65535)
    2c80:	6f 81       	ldd	r22, Y+7	; 0x07
    2c82:	78 85       	ldd	r23, Y+8	; 0x08
    2c84:	89 85       	ldd	r24, Y+9	; 0x09
    2c86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c88:	20 e0       	ldi	r18, 0x00	; 0
    2c8a:	3f ef       	ldi	r19, 0xFF	; 255
    2c8c:	4f e7       	ldi	r20, 0x7F	; 127
    2c8e:	57 e4       	ldi	r21, 0x47	; 71
    2c90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c94:	18 16       	cp	r1, r24
    2c96:	4c f5       	brge	.+82     	; 0x2cea <H_PB_void_read+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c98:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	40 e2       	ldi	r20, 0x20	; 32
    2ca6:	51 e4       	ldi	r21, 0x41	; 65
    2ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	bc 01       	movw	r22, r24
    2cb2:	cd 01       	movw	r24, r26
    2cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	9e 83       	std	Y+6, r25	; 0x06
    2cbe:	8d 83       	std	Y+5, r24	; 0x05
    2cc0:	0f c0       	rjmp	.+30     	; 0x2ce0 <H_PB_void_read+0x278>
    2cc2:	80 e9       	ldi	r24, 0x90	; 144
    2cc4:	91 e0       	ldi	r25, 0x01	; 1
    2cc6:	9c 83       	std	Y+4, r25	; 0x04
    2cc8:	8b 83       	std	Y+3, r24	; 0x03
    2cca:	8b 81       	ldd	r24, Y+3	; 0x03
    2ccc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cce:	01 97       	sbiw	r24, 0x01	; 1
    2cd0:	f1 f7       	brne	.-4      	; 0x2cce <H_PB_void_read+0x266>
    2cd2:	9c 83       	std	Y+4, r25	; 0x04
    2cd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cda:	01 97       	sbiw	r24, 0x01	; 1
    2cdc:	9e 83       	std	Y+6, r25	; 0x06
    2cde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce4:	00 97       	sbiw	r24, 0x00	; 0
    2ce6:	69 f7       	brne	.-38     	; 0x2cc2 <H_PB_void_read+0x25a>
    2ce8:	14 c0       	rjmp	.+40     	; 0x2d12 <H_PB_void_read+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cea:	6f 81       	ldd	r22, Y+7	; 0x07
    2cec:	78 85       	ldd	r23, Y+8	; 0x08
    2cee:	89 85       	ldd	r24, Y+9	; 0x09
    2cf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	9e 83       	std	Y+6, r25	; 0x06
    2cfc:	8d 83       	std	Y+5, r24	; 0x05
    2cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2d00:	9e 81       	ldd	r25, Y+6	; 0x06
    2d02:	9a 83       	std	Y+2, r25	; 0x02
    2d04:	89 83       	std	Y+1, r24	; 0x01
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	9a 81       	ldd	r25, Y+2	; 0x02
    2d0a:	01 97       	sbiw	r24, 0x01	; 1
    2d0c:	f1 f7       	brne	.-4      	; 0x2d0a <H_PB_void_read+0x2a2>
    2d0e:	9a 83       	std	Y+2, r25	; 0x02
    2d10:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(200);

				M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, &pvalue);
    2d12:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2d14:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2d16:	81 81       	ldd	r24, Z+1	; 0x01
    2d18:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2d1a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2d1c:	92 81       	ldd	r25, Z+2	; 0x02
    2d1e:	9e 01       	movw	r18, r28
    2d20:	20 5e       	subi	r18, 0xE0	; 224
    2d22:	3f 4f       	sbci	r19, 0xFF	; 255
    2d24:	69 2f       	mov	r22, r25
    2d26:	a9 01       	movw	r20, r18
    2d28:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <M_DIO_void_getPinValue>
				if (read==PRESSED_ACTIVE_LOW)
    2d2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d2e:	88 23       	and	r24, r24
    2d30:	a1 f4       	brne	.+40     	; 0x2d5a <H_PB_void_read+0x2f2>
    2d32:	0d c0       	rjmp	.+26     	; 0x2d4e <H_PB_void_read+0x2e6>
				{
					while(read==PRESSED_ACTIVE_LOW)
					{
						M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, &pvalue);
    2d34:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2d36:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2d38:	81 81       	ldd	r24, Z+1	; 0x01
    2d3a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2d3c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2d3e:	92 81       	ldd	r25, Z+2	; 0x02
    2d40:	9e 01       	movw	r18, r28
    2d42:	20 5e       	subi	r18, 0xE0	; 224
    2d44:	3f 4f       	sbci	r19, 0xFF	; 255
    2d46:	69 2f       	mov	r22, r25
    2d48:	a9 01       	movw	r20, r18
    2d4a:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <M_DIO_void_getPinValue>
				_delay_ms(200);

				M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, &pvalue);
				if (read==PRESSED_ACTIVE_LOW)
				{
					while(read==PRESSED_ACTIVE_LOW)
    2d4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d50:	88 23       	and	r24, r24
    2d52:	81 f3       	breq	.-32     	; 0x2d34 <H_PB_void_read+0x2cc>
					{
						M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, &pvalue);
					}
					*pvalue=PRESSED_ACTIVE_LOW;
    2d54:	e8 a1       	ldd	r30, Y+32	; 0x20
    2d56:	f9 a1       	ldd	r31, Y+33	; 0x21
    2d58:	10 82       	st	Z, r1
				}

			}
		}
	}
}
    2d5a:	a1 96       	adiw	r28, 0x21	; 33
    2d5c:	0f b6       	in	r0, 0x3f	; 63
    2d5e:	f8 94       	cli
    2d60:	de bf       	out	0x3e, r29	; 62
    2d62:	0f be       	out	0x3f, r0	; 63
    2d64:	cd bf       	out	0x3d, r28	; 61
    2d66:	cf 91       	pop	r28
    2d68:	df 91       	pop	r29
    2d6a:	08 95       	ret

00002d6c <H_Led_void_ledInit>:
#include "LED_priv.h"
#include"LED_config.h"
#include"LED_int.h"

void  H_Led_void_ledInit(u8 LedID)
{
    2d6c:	df 93       	push	r29
    2d6e:	cf 93       	push	r28
    2d70:	00 d0       	rcall	.+0      	; 0x2d72 <H_Led_void_ledInit+0x6>
    2d72:	0f 92       	push	r0
    2d74:	cd b7       	in	r28, 0x3d	; 61
    2d76:	de b7       	in	r29, 0x3e	; 62
    2d78:	89 83       	std	Y+1, r24	; 0x01
	switch (LedID)
    2d7a:	89 81       	ldd	r24, Y+1	; 0x01
    2d7c:	28 2f       	mov	r18, r24
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	3b 83       	std	Y+3, r19	; 0x03
    2d82:	2a 83       	std	Y+2, r18	; 0x02
    2d84:	8a 81       	ldd	r24, Y+2	; 0x02
    2d86:	9b 81       	ldd	r25, Y+3	; 0x03
    2d88:	81 30       	cpi	r24, 0x01	; 1
    2d8a:	91 05       	cpc	r25, r1
    2d8c:	79 f0       	breq	.+30     	; 0x2dac <H_Led_void_ledInit+0x40>
    2d8e:	2a 81       	ldd	r18, Y+2	; 0x02
    2d90:	3b 81       	ldd	r19, Y+3	; 0x03
    2d92:	22 30       	cpi	r18, 0x02	; 2
    2d94:	31 05       	cpc	r19, r1
    2d96:	81 f0       	breq	.+32     	; 0x2db8 <H_Led_void_ledInit+0x4c>
    2d98:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d9c:	00 97       	sbiw	r24, 0x00	; 0
    2d9e:	89 f4       	brne	.+34     	; 0x2dc2 <H_Led_void_ledInit+0x56>
	{
	case RED_LED :
			M_DIO_void_setPinDir(LED_RED_PORT,  LED_RED_PIN , OUT);
    2da0:	82 e0       	ldi	r24, 0x02	; 2
    2da2:	60 e0       	ldi	r22, 0x00	; 0
    2da4:	41 e0       	ldi	r20, 0x01	; 1
    2da6:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>
    2daa:	0b c0       	rjmp	.+22     	; 0x2dc2 <H_Led_void_ledInit+0x56>
		break;
	case GRN_LED :
			M_DIO_void_setPinDir(LED_GRN_PORT,  LED_GRN_PIN , OUT);
    2dac:	82 e0       	ldi	r24, 0x02	; 2
    2dae:	62 e0       	ldi	r22, 0x02	; 2
    2db0:	41 e0       	ldi	r20, 0x01	; 1
    2db2:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>
    2db6:	05 c0       	rjmp	.+10     	; 0x2dc2 <H_Led_void_ledInit+0x56>
			break;
	case BLU_LED :
			M_DIO_void_setPinDir(LED_BLU_PORT,  LED_BLU_PIN , OUT);
    2db8:	82 e0       	ldi	r24, 0x02	; 2
    2dba:	61 e0       	ldi	r22, 0x01	; 1
    2dbc:	41 e0       	ldi	r20, 0x01	; 1
    2dbe:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>
			break;
	}
}
    2dc2:	0f 90       	pop	r0
    2dc4:	0f 90       	pop	r0
    2dc6:	0f 90       	pop	r0
    2dc8:	cf 91       	pop	r28
    2dca:	df 91       	pop	r29
    2dcc:	08 95       	ret

00002dce <H_Led_void_setON>:


void  H_Led_void_setON(u8 LedID)
{
    2dce:	df 93       	push	r29
    2dd0:	cf 93       	push	r28
    2dd2:	00 d0       	rcall	.+0      	; 0x2dd4 <H_Led_void_setON+0x6>
    2dd4:	0f 92       	push	r0
    2dd6:	cd b7       	in	r28, 0x3d	; 61
    2dd8:	de b7       	in	r29, 0x3e	; 62
    2dda:	89 83       	std	Y+1, r24	; 0x01
	switch(LedID)
    2ddc:	89 81       	ldd	r24, Y+1	; 0x01
    2dde:	28 2f       	mov	r18, r24
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	3b 83       	std	Y+3, r19	; 0x03
    2de4:	2a 83       	std	Y+2, r18	; 0x02
    2de6:	8a 81       	ldd	r24, Y+2	; 0x02
    2de8:	9b 81       	ldd	r25, Y+3	; 0x03
    2dea:	81 30       	cpi	r24, 0x01	; 1
    2dec:	91 05       	cpc	r25, r1
    2dee:	79 f0       	breq	.+30     	; 0x2e0e <H_Led_void_setON+0x40>
    2df0:	2a 81       	ldd	r18, Y+2	; 0x02
    2df2:	3b 81       	ldd	r19, Y+3	; 0x03
    2df4:	22 30       	cpi	r18, 0x02	; 2
    2df6:	31 05       	cpc	r19, r1
    2df8:	81 f0       	breq	.+32     	; 0x2e1a <H_Led_void_setON+0x4c>
    2dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfc:	9b 81       	ldd	r25, Y+3	; 0x03
    2dfe:	00 97       	sbiw	r24, 0x00	; 0
    2e00:	89 f4       	brne	.+34     	; 0x2e24 <H_Led_void_setON+0x56>
	{
	case RED_LED :
#if (LED_RED_DIRECTION == LED_FORWARD )
		M_DIO_void_setPinValue(LED_RED_PORT,LED_RED_PIN,HIGH);
    2e02:	82 e0       	ldi	r24, 0x02	; 2
    2e04:	60 e0       	ldi	r22, 0x00	; 0
    2e06:	41 e0       	ldi	r20, 0x01	; 1
    2e08:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    2e0c:	0b c0       	rjmp	.+22     	; 0x2e24 <H_Led_void_setON+0x56>
#endif
		break;

	case GRN_LED :
#if (LED_GRN_DIRECTION == LED_FORWARD )
		M_DIO_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,HIGH);
    2e0e:	82 e0       	ldi	r24, 0x02	; 2
    2e10:	62 e0       	ldi	r22, 0x02	; 2
    2e12:	41 e0       	ldi	r20, 0x01	; 1
    2e14:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    2e18:	05 c0       	rjmp	.+10     	; 0x2e24 <H_Led_void_setON+0x56>
		M_DIO_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,LOW);
#endif
		break;
	case BLU_LED :
	#if (LED_BLU_DIRECTION == LED_FORWARD )
			M_DIO_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,HIGH);
    2e1a:	82 e0       	ldi	r24, 0x02	; 2
    2e1c:	61 e0       	ldi	r22, 0x01	; 1
    2e1e:	41 e0       	ldi	r20, 0x01	; 1
    2e20:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
			break;



	}
}
    2e24:	0f 90       	pop	r0
    2e26:	0f 90       	pop	r0
    2e28:	0f 90       	pop	r0
    2e2a:	cf 91       	pop	r28
    2e2c:	df 91       	pop	r29
    2e2e:	08 95       	ret

00002e30 <H_Led_void_setOFF>:
void  H_Led_void_setOFF(u8 LedID)
{
    2e30:	df 93       	push	r29
    2e32:	cf 93       	push	r28
    2e34:	00 d0       	rcall	.+0      	; 0x2e36 <H_Led_void_setOFF+0x6>
    2e36:	0f 92       	push	r0
    2e38:	cd b7       	in	r28, 0x3d	; 61
    2e3a:	de b7       	in	r29, 0x3e	; 62
    2e3c:	89 83       	std	Y+1, r24	; 0x01
	switch(LedID)
    2e3e:	89 81       	ldd	r24, Y+1	; 0x01
    2e40:	28 2f       	mov	r18, r24
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	3b 83       	std	Y+3, r19	; 0x03
    2e46:	2a 83       	std	Y+2, r18	; 0x02
    2e48:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e4c:	81 30       	cpi	r24, 0x01	; 1
    2e4e:	91 05       	cpc	r25, r1
    2e50:	79 f0       	breq	.+30     	; 0x2e70 <H_Led_void_setOFF+0x40>
    2e52:	2a 81       	ldd	r18, Y+2	; 0x02
    2e54:	3b 81       	ldd	r19, Y+3	; 0x03
    2e56:	22 30       	cpi	r18, 0x02	; 2
    2e58:	31 05       	cpc	r19, r1
    2e5a:	81 f0       	breq	.+32     	; 0x2e7c <H_Led_void_setOFF+0x4c>
    2e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e60:	00 97       	sbiw	r24, 0x00	; 0
    2e62:	89 f4       	brne	.+34     	; 0x2e86 <H_Led_void_setOFF+0x56>
		{
		case RED_LED :
	#if (LED_RED_DIRECTION == LED_FORWARD )
			M_DIO_void_setPinValue(LED_RED_PORT,LED_RED_PIN,LOW);
    2e64:	82 e0       	ldi	r24, 0x02	; 2
    2e66:	60 e0       	ldi	r22, 0x00	; 0
    2e68:	40 e0       	ldi	r20, 0x00	; 0
    2e6a:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    2e6e:	0b c0       	rjmp	.+22     	; 0x2e86 <H_Led_void_setOFF+0x56>
	#endif
			break;

		case GRN_LED :
	#if (LED_GRN_DIRECTION == LED_FORWARD )
			M_DIO_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,LOW);
    2e70:	82 e0       	ldi	r24, 0x02	; 2
    2e72:	62 e0       	ldi	r22, 0x02	; 2
    2e74:	40 e0       	ldi	r20, 0x00	; 0
    2e76:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    2e7a:	05 c0       	rjmp	.+10     	; 0x2e86 <H_Led_void_setOFF+0x56>
			M_DIO_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,HIGH);
	#endif
			break;
		case BLU_LED :
		#if (LED_BLU_DIRECTION == LED_FORWARD )
				M_DIO_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,LOW);
    2e7c:	82 e0       	ldi	r24, 0x02	; 2
    2e7e:	61 e0       	ldi	r22, 0x01	; 1
    2e80:	40 e0       	ldi	r20, 0x00	; 0
    2e82:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
				M_DIO_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,HIGH);
		#endif
				break;

		}
}
    2e86:	0f 90       	pop	r0
    2e88:	0f 90       	pop	r0
    2e8a:	0f 90       	pop	r0
    2e8c:	cf 91       	pop	r28
    2e8e:	df 91       	pop	r29
    2e90:	08 95       	ret

00002e92 <H_Led_void_toggle>:

void  H_Led_void_toggle(u8 LedID)
{
    2e92:	df 93       	push	r29
    2e94:	cf 93       	push	r28
    2e96:	00 d0       	rcall	.+0      	; 0x2e98 <H_Led_void_toggle+0x6>
    2e98:	0f 92       	push	r0
    2e9a:	cd b7       	in	r28, 0x3d	; 61
    2e9c:	de b7       	in	r29, 0x3e	; 62
    2e9e:	89 83       	std	Y+1, r24	; 0x01
	switch (LedID)
    2ea0:	89 81       	ldd	r24, Y+1	; 0x01
    2ea2:	28 2f       	mov	r18, r24
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	3b 83       	std	Y+3, r19	; 0x03
    2ea8:	2a 83       	std	Y+2, r18	; 0x02
    2eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    2eac:	9b 81       	ldd	r25, Y+3	; 0x03
    2eae:	81 30       	cpi	r24, 0x01	; 1
    2eb0:	91 05       	cpc	r25, r1
    2eb2:	71 f0       	breq	.+28     	; 0x2ed0 <H_Led_void_toggle+0x3e>
    2eb4:	2a 81       	ldd	r18, Y+2	; 0x02
    2eb6:	3b 81       	ldd	r19, Y+3	; 0x03
    2eb8:	22 30       	cpi	r18, 0x02	; 2
    2eba:	31 05       	cpc	r19, r1
    2ebc:	71 f0       	breq	.+28     	; 0x2eda <H_Led_void_toggle+0x48>
    2ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ec2:	00 97       	sbiw	r24, 0x00	; 0
    2ec4:	71 f4       	brne	.+28     	; 0x2ee2 <H_Led_void_toggle+0x50>
		{
		case RED_LED :
			 M_DIO_void_TogPinValue(LED_RED_PORT,LED_RED_PIN);
    2ec6:	82 e0       	ldi	r24, 0x02	; 2
    2ec8:	60 e0       	ldi	r22, 0x00	; 0
    2eca:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <M_DIO_void_TogPinValue>
    2ece:	09 c0       	rjmp	.+18     	; 0x2ee2 <H_Led_void_toggle+0x50>

			break;
		case GRN_LED :
			 M_DIO_void_TogPinValue(LED_GRN_PORT, LED_GRN_PIN);
    2ed0:	82 e0       	ldi	r24, 0x02	; 2
    2ed2:	62 e0       	ldi	r22, 0x02	; 2
    2ed4:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <M_DIO_void_TogPinValue>
    2ed8:	04 c0       	rjmp	.+8      	; 0x2ee2 <H_Led_void_toggle+0x50>

				break;
		case BLU_LED :
			 M_DIO_void_TogPinValue(LED_BLU_PORT,LED_BLU_PIN);
    2eda:	82 e0       	ldi	r24, 0x02	; 2
    2edc:	61 e0       	ldi	r22, 0x01	; 1
    2ede:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <M_DIO_void_TogPinValue>

				break;
		}
}
    2ee2:	0f 90       	pop	r0
    2ee4:	0f 90       	pop	r0
    2ee6:	0f 90       	pop	r0
    2ee8:	cf 91       	pop	r28
    2eea:	df 91       	pop	r29
    2eec:	08 95       	ret

00002eee <Animation1>:

void Animation1()
{
    2eee:	0f 93       	push	r16
    2ef0:	1f 93       	push	r17
    2ef2:	df 93       	push	r29
    2ef4:	cf 93       	push	r28
    2ef6:	cd b7       	in	r28, 0x3d	; 61
    2ef8:	de b7       	in	r29, 0x3e	; 62
    2efa:	c4 55       	subi	r28, 0x54	; 84
    2efc:	d0 40       	sbci	r29, 0x00	; 0
    2efe:	0f b6       	in	r0, 0x3f	; 63
    2f00:	f8 94       	cli
    2f02:	de bf       	out	0x3e, r29	; 62
    2f04:	0f be       	out	0x3f, r0	; 63
    2f06:	cd bf       	out	0x3d, r28	; 61
	H_Led_void_setON(RED_LED);
    2f08:	80 e0       	ldi	r24, 0x00	; 0
    2f0a:	0e 94 e7 16 	call	0x2dce	; 0x2dce <H_Led_void_setON>
	H_Led_void_setON(BLU_LED);
    2f0e:	82 e0       	ldi	r24, 0x02	; 2
    2f10:	0e 94 e7 16 	call	0x2dce	; 0x2dce <H_Led_void_setON>
    2f14:	fe 01       	movw	r30, r28
    2f16:	ef 5a       	subi	r30, 0xAF	; 175
    2f18:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1a:	80 e0       	ldi	r24, 0x00	; 0
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	aa ef       	ldi	r26, 0xFA	; 250
    2f20:	b3 e4       	ldi	r27, 0x43	; 67
    2f22:	80 83       	st	Z, r24
    2f24:	91 83       	std	Z+1, r25	; 0x01
    2f26:	a2 83       	std	Z+2, r26	; 0x02
    2f28:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f2a:	8e 01       	movw	r16, r28
    2f2c:	03 5b       	subi	r16, 0xB3	; 179
    2f2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f30:	fe 01       	movw	r30, r28
    2f32:	ef 5a       	subi	r30, 0xAF	; 175
    2f34:	ff 4f       	sbci	r31, 0xFF	; 255
    2f36:	60 81       	ld	r22, Z
    2f38:	71 81       	ldd	r23, Z+1	; 0x01
    2f3a:	82 81       	ldd	r24, Z+2	; 0x02
    2f3c:	93 81       	ldd	r25, Z+3	; 0x03
    2f3e:	20 e0       	ldi	r18, 0x00	; 0
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	4a e7       	ldi	r20, 0x7A	; 122
    2f44:	55 e4       	ldi	r21, 0x45	; 69
    2f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	cb 01       	movw	r24, r22
    2f4e:	f8 01       	movw	r30, r16
    2f50:	80 83       	st	Z, r24
    2f52:	91 83       	std	Z+1, r25	; 0x01
    2f54:	a2 83       	std	Z+2, r26	; 0x02
    2f56:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f58:	fe 01       	movw	r30, r28
    2f5a:	e3 5b       	subi	r30, 0xB3	; 179
    2f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5e:	60 81       	ld	r22, Z
    2f60:	71 81       	ldd	r23, Z+1	; 0x01
    2f62:	82 81       	ldd	r24, Z+2	; 0x02
    2f64:	93 81       	ldd	r25, Z+3	; 0x03
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	40 e8       	ldi	r20, 0x80	; 128
    2f6c:	5f e3       	ldi	r21, 0x3F	; 63
    2f6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f72:	88 23       	and	r24, r24
    2f74:	44 f4       	brge	.+16     	; 0x2f86 <Animation1+0x98>
		__ticks = 1;
    2f76:	fe 01       	movw	r30, r28
    2f78:	e5 5b       	subi	r30, 0xB5	; 181
    2f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	91 83       	std	Z+1, r25	; 0x01
    2f82:	80 83       	st	Z, r24
    2f84:	64 c0       	rjmp	.+200    	; 0x304e <Animation1+0x160>
	else if (__tmp > 65535)
    2f86:	fe 01       	movw	r30, r28
    2f88:	e3 5b       	subi	r30, 0xB3	; 179
    2f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8c:	60 81       	ld	r22, Z
    2f8e:	71 81       	ldd	r23, Z+1	; 0x01
    2f90:	82 81       	ldd	r24, Z+2	; 0x02
    2f92:	93 81       	ldd	r25, Z+3	; 0x03
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	3f ef       	ldi	r19, 0xFF	; 255
    2f98:	4f e7       	ldi	r20, 0x7F	; 127
    2f9a:	57 e4       	ldi	r21, 0x47	; 71
    2f9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fa0:	18 16       	cp	r1, r24
    2fa2:	0c f0       	brlt	.+2      	; 0x2fa6 <Animation1+0xb8>
    2fa4:	43 c0       	rjmp	.+134    	; 0x302c <Animation1+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fa6:	fe 01       	movw	r30, r28
    2fa8:	ef 5a       	subi	r30, 0xAF	; 175
    2faa:	ff 4f       	sbci	r31, 0xFF	; 255
    2fac:	60 81       	ld	r22, Z
    2fae:	71 81       	ldd	r23, Z+1	; 0x01
    2fb0:	82 81       	ldd	r24, Z+2	; 0x02
    2fb2:	93 81       	ldd	r25, Z+3	; 0x03
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	40 e2       	ldi	r20, 0x20	; 32
    2fba:	51 e4       	ldi	r21, 0x41	; 65
    2fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc0:	dc 01       	movw	r26, r24
    2fc2:	cb 01       	movw	r24, r22
    2fc4:	8e 01       	movw	r16, r28
    2fc6:	05 5b       	subi	r16, 0xB5	; 181
    2fc8:	1f 4f       	sbci	r17, 0xFF	; 255
    2fca:	bc 01       	movw	r22, r24
    2fcc:	cd 01       	movw	r24, r26
    2fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	f8 01       	movw	r30, r16
    2fd8:	91 83       	std	Z+1, r25	; 0x01
    2fda:	80 83       	st	Z, r24
    2fdc:	1f c0       	rjmp	.+62     	; 0x301c <Animation1+0x12e>
    2fde:	fe 01       	movw	r30, r28
    2fe0:	e7 5b       	subi	r30, 0xB7	; 183
    2fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe4:	80 e9       	ldi	r24, 0x90	; 144
    2fe6:	91 e0       	ldi	r25, 0x01	; 1
    2fe8:	91 83       	std	Z+1, r25	; 0x01
    2fea:	80 83       	st	Z, r24
    2fec:	fe 01       	movw	r30, r28
    2fee:	e7 5b       	subi	r30, 0xB7	; 183
    2ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff2:	80 81       	ld	r24, Z
    2ff4:	91 81       	ldd	r25, Z+1	; 0x01
    2ff6:	01 97       	sbiw	r24, 0x01	; 1
    2ff8:	f1 f7       	brne	.-4      	; 0x2ff6 <Animation1+0x108>
    2ffa:	fe 01       	movw	r30, r28
    2ffc:	e7 5b       	subi	r30, 0xB7	; 183
    2ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    3000:	91 83       	std	Z+1, r25	; 0x01
    3002:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3004:	de 01       	movw	r26, r28
    3006:	a5 5b       	subi	r26, 0xB5	; 181
    3008:	bf 4f       	sbci	r27, 0xFF	; 255
    300a:	fe 01       	movw	r30, r28
    300c:	e5 5b       	subi	r30, 0xB5	; 181
    300e:	ff 4f       	sbci	r31, 0xFF	; 255
    3010:	80 81       	ld	r24, Z
    3012:	91 81       	ldd	r25, Z+1	; 0x01
    3014:	01 97       	sbiw	r24, 0x01	; 1
    3016:	11 96       	adiw	r26, 0x01	; 1
    3018:	9c 93       	st	X, r25
    301a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    301c:	fe 01       	movw	r30, r28
    301e:	e5 5b       	subi	r30, 0xB5	; 181
    3020:	ff 4f       	sbci	r31, 0xFF	; 255
    3022:	80 81       	ld	r24, Z
    3024:	91 81       	ldd	r25, Z+1	; 0x01
    3026:	00 97       	sbiw	r24, 0x00	; 0
    3028:	d1 f6       	brne	.-76     	; 0x2fde <Animation1+0xf0>
    302a:	27 c0       	rjmp	.+78     	; 0x307a <Animation1+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    302c:	8e 01       	movw	r16, r28
    302e:	05 5b       	subi	r16, 0xB5	; 181
    3030:	1f 4f       	sbci	r17, 0xFF	; 255
    3032:	fe 01       	movw	r30, r28
    3034:	e3 5b       	subi	r30, 0xB3	; 179
    3036:	ff 4f       	sbci	r31, 0xFF	; 255
    3038:	60 81       	ld	r22, Z
    303a:	71 81       	ldd	r23, Z+1	; 0x01
    303c:	82 81       	ldd	r24, Z+2	; 0x02
    303e:	93 81       	ldd	r25, Z+3	; 0x03
    3040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	f8 01       	movw	r30, r16
    304a:	91 83       	std	Z+1, r25	; 0x01
    304c:	80 83       	st	Z, r24
    304e:	de 01       	movw	r26, r28
    3050:	a9 5b       	subi	r26, 0xB9	; 185
    3052:	bf 4f       	sbci	r27, 0xFF	; 255
    3054:	fe 01       	movw	r30, r28
    3056:	e5 5b       	subi	r30, 0xB5	; 181
    3058:	ff 4f       	sbci	r31, 0xFF	; 255
    305a:	80 81       	ld	r24, Z
    305c:	91 81       	ldd	r25, Z+1	; 0x01
    305e:	8d 93       	st	X+, r24
    3060:	9c 93       	st	X, r25
    3062:	fe 01       	movw	r30, r28
    3064:	e9 5b       	subi	r30, 0xB9	; 185
    3066:	ff 4f       	sbci	r31, 0xFF	; 255
    3068:	80 81       	ld	r24, Z
    306a:	91 81       	ldd	r25, Z+1	; 0x01
    306c:	01 97       	sbiw	r24, 0x01	; 1
    306e:	f1 f7       	brne	.-4      	; 0x306c <Animation1+0x17e>
    3070:	fe 01       	movw	r30, r28
    3072:	e9 5b       	subi	r30, 0xB9	; 185
    3074:	ff 4f       	sbci	r31, 0xFF	; 255
    3076:	91 83       	std	Z+1, r25	; 0x01
    3078:	80 83       	st	Z, r24
	_delay_ms(500);
	H_Led_void_setOFF(RED_LED);
    307a:	80 e0       	ldi	r24, 0x00	; 0
    307c:	0e 94 18 17 	call	0x2e30	; 0x2e30 <H_Led_void_setOFF>
	H_Led_void_setOFF(BLU_LED);
    3080:	82 e0       	ldi	r24, 0x02	; 2
    3082:	0e 94 18 17 	call	0x2e30	; 0x2e30 <H_Led_void_setOFF>
    3086:	fe 01       	movw	r30, r28
    3088:	ed 5b       	subi	r30, 0xBD	; 189
    308a:	ff 4f       	sbci	r31, 0xFF	; 255
    308c:	80 e0       	ldi	r24, 0x00	; 0
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	aa ef       	ldi	r26, 0xFA	; 250
    3092:	b3 e4       	ldi	r27, 0x43	; 67
    3094:	80 83       	st	Z, r24
    3096:	91 83       	std	Z+1, r25	; 0x01
    3098:	a2 83       	std	Z+2, r26	; 0x02
    309a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    309c:	8e 01       	movw	r16, r28
    309e:	01 5c       	subi	r16, 0xC1	; 193
    30a0:	1f 4f       	sbci	r17, 0xFF	; 255
    30a2:	fe 01       	movw	r30, r28
    30a4:	ed 5b       	subi	r30, 0xBD	; 189
    30a6:	ff 4f       	sbci	r31, 0xFF	; 255
    30a8:	60 81       	ld	r22, Z
    30aa:	71 81       	ldd	r23, Z+1	; 0x01
    30ac:	82 81       	ldd	r24, Z+2	; 0x02
    30ae:	93 81       	ldd	r25, Z+3	; 0x03
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	4a e7       	ldi	r20, 0x7A	; 122
    30b6:	55 e4       	ldi	r21, 0x45	; 69
    30b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30bc:	dc 01       	movw	r26, r24
    30be:	cb 01       	movw	r24, r22
    30c0:	f8 01       	movw	r30, r16
    30c2:	80 83       	st	Z, r24
    30c4:	91 83       	std	Z+1, r25	; 0x01
    30c6:	a2 83       	std	Z+2, r26	; 0x02
    30c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30ca:	fe 01       	movw	r30, r28
    30cc:	ff 96       	adiw	r30, 0x3f	; 63
    30ce:	60 81       	ld	r22, Z
    30d0:	71 81       	ldd	r23, Z+1	; 0x01
    30d2:	82 81       	ldd	r24, Z+2	; 0x02
    30d4:	93 81       	ldd	r25, Z+3	; 0x03
    30d6:	20 e0       	ldi	r18, 0x00	; 0
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	40 e8       	ldi	r20, 0x80	; 128
    30dc:	5f e3       	ldi	r21, 0x3F	; 63
    30de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30e2:	88 23       	and	r24, r24
    30e4:	2c f4       	brge	.+10     	; 0x30f0 <Animation1+0x202>
		__ticks = 1;
    30e6:	81 e0       	ldi	r24, 0x01	; 1
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	9e af       	std	Y+62, r25	; 0x3e
    30ec:	8d af       	std	Y+61, r24	; 0x3d
    30ee:	46 c0       	rjmp	.+140    	; 0x317c <Animation1+0x28e>
	else if (__tmp > 65535)
    30f0:	fe 01       	movw	r30, r28
    30f2:	ff 96       	adiw	r30, 0x3f	; 63
    30f4:	60 81       	ld	r22, Z
    30f6:	71 81       	ldd	r23, Z+1	; 0x01
    30f8:	82 81       	ldd	r24, Z+2	; 0x02
    30fa:	93 81       	ldd	r25, Z+3	; 0x03
    30fc:	20 e0       	ldi	r18, 0x00	; 0
    30fe:	3f ef       	ldi	r19, 0xFF	; 255
    3100:	4f e7       	ldi	r20, 0x7F	; 127
    3102:	57 e4       	ldi	r21, 0x47	; 71
    3104:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3108:	18 16       	cp	r1, r24
    310a:	64 f5       	brge	.+88     	; 0x3164 <Animation1+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    310c:	fe 01       	movw	r30, r28
    310e:	ed 5b       	subi	r30, 0xBD	; 189
    3110:	ff 4f       	sbci	r31, 0xFF	; 255
    3112:	60 81       	ld	r22, Z
    3114:	71 81       	ldd	r23, Z+1	; 0x01
    3116:	82 81       	ldd	r24, Z+2	; 0x02
    3118:	93 81       	ldd	r25, Z+3	; 0x03
    311a:	20 e0       	ldi	r18, 0x00	; 0
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	40 e2       	ldi	r20, 0x20	; 32
    3120:	51 e4       	ldi	r21, 0x41	; 65
    3122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3126:	dc 01       	movw	r26, r24
    3128:	cb 01       	movw	r24, r22
    312a:	bc 01       	movw	r22, r24
    312c:	cd 01       	movw	r24, r26
    312e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3132:	dc 01       	movw	r26, r24
    3134:	cb 01       	movw	r24, r22
    3136:	9e af       	std	Y+62, r25	; 0x3e
    3138:	8d af       	std	Y+61, r24	; 0x3d
    313a:	0f c0       	rjmp	.+30     	; 0x315a <Animation1+0x26c>
    313c:	80 e9       	ldi	r24, 0x90	; 144
    313e:	91 e0       	ldi	r25, 0x01	; 1
    3140:	9c af       	std	Y+60, r25	; 0x3c
    3142:	8b af       	std	Y+59, r24	; 0x3b
    3144:	8b ad       	ldd	r24, Y+59	; 0x3b
    3146:	9c ad       	ldd	r25, Y+60	; 0x3c
    3148:	01 97       	sbiw	r24, 0x01	; 1
    314a:	f1 f7       	brne	.-4      	; 0x3148 <Animation1+0x25a>
    314c:	9c af       	std	Y+60, r25	; 0x3c
    314e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3150:	8d ad       	ldd	r24, Y+61	; 0x3d
    3152:	9e ad       	ldd	r25, Y+62	; 0x3e
    3154:	01 97       	sbiw	r24, 0x01	; 1
    3156:	9e af       	std	Y+62, r25	; 0x3e
    3158:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    315a:	8d ad       	ldd	r24, Y+61	; 0x3d
    315c:	9e ad       	ldd	r25, Y+62	; 0x3e
    315e:	00 97       	sbiw	r24, 0x00	; 0
    3160:	69 f7       	brne	.-38     	; 0x313c <Animation1+0x24e>
    3162:	16 c0       	rjmp	.+44     	; 0x3190 <Animation1+0x2a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3164:	fe 01       	movw	r30, r28
    3166:	ff 96       	adiw	r30, 0x3f	; 63
    3168:	60 81       	ld	r22, Z
    316a:	71 81       	ldd	r23, Z+1	; 0x01
    316c:	82 81       	ldd	r24, Z+2	; 0x02
    316e:	93 81       	ldd	r25, Z+3	; 0x03
    3170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3174:	dc 01       	movw	r26, r24
    3176:	cb 01       	movw	r24, r22
    3178:	9e af       	std	Y+62, r25	; 0x3e
    317a:	8d af       	std	Y+61, r24	; 0x3d
    317c:	8d ad       	ldd	r24, Y+61	; 0x3d
    317e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3180:	9a af       	std	Y+58, r25	; 0x3a
    3182:	89 af       	std	Y+57, r24	; 0x39
    3184:	89 ad       	ldd	r24, Y+57	; 0x39
    3186:	9a ad       	ldd	r25, Y+58	; 0x3a
    3188:	01 97       	sbiw	r24, 0x01	; 1
    318a:	f1 f7       	brne	.-4      	; 0x3188 <Animation1+0x29a>
    318c:	9a af       	std	Y+58, r25	; 0x3a
    318e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(500);
    H_Led_void_setON(BLU_LED);
    3190:	82 e0       	ldi	r24, 0x02	; 2
    3192:	0e 94 e7 16 	call	0x2dce	; 0x2dce <H_Led_void_setON>
    H_Led_void_setON(GRN_LED);
    3196:	81 e0       	ldi	r24, 0x01	; 1
    3198:	0e 94 e7 16 	call	0x2dce	; 0x2dce <H_Led_void_setON>
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	aa ef       	ldi	r26, 0xFA	; 250
    31a2:	b3 e4       	ldi	r27, 0x43	; 67
    31a4:	8d ab       	std	Y+53, r24	; 0x35
    31a6:	9e ab       	std	Y+54, r25	; 0x36
    31a8:	af ab       	std	Y+55, r26	; 0x37
    31aa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ac:	6d a9       	ldd	r22, Y+53	; 0x35
    31ae:	7e a9       	ldd	r23, Y+54	; 0x36
    31b0:	8f a9       	ldd	r24, Y+55	; 0x37
    31b2:	98 ad       	ldd	r25, Y+56	; 0x38
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	4a e7       	ldi	r20, 0x7A	; 122
    31ba:	55 e4       	ldi	r21, 0x45	; 69
    31bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c0:	dc 01       	movw	r26, r24
    31c2:	cb 01       	movw	r24, r22
    31c4:	89 ab       	std	Y+49, r24	; 0x31
    31c6:	9a ab       	std	Y+50, r25	; 0x32
    31c8:	ab ab       	std	Y+51, r26	; 0x33
    31ca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    31cc:	69 a9       	ldd	r22, Y+49	; 0x31
    31ce:	7a a9       	ldd	r23, Y+50	; 0x32
    31d0:	8b a9       	ldd	r24, Y+51	; 0x33
    31d2:	9c a9       	ldd	r25, Y+52	; 0x34
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	40 e8       	ldi	r20, 0x80	; 128
    31da:	5f e3       	ldi	r21, 0x3F	; 63
    31dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31e0:	88 23       	and	r24, r24
    31e2:	2c f4       	brge	.+10     	; 0x31ee <Animation1+0x300>
		__ticks = 1;
    31e4:	81 e0       	ldi	r24, 0x01	; 1
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	98 ab       	std	Y+48, r25	; 0x30
    31ea:	8f a7       	std	Y+47, r24	; 0x2f
    31ec:	3f c0       	rjmp	.+126    	; 0x326c <Animation1+0x37e>
	else if (__tmp > 65535)
    31ee:	69 a9       	ldd	r22, Y+49	; 0x31
    31f0:	7a a9       	ldd	r23, Y+50	; 0x32
    31f2:	8b a9       	ldd	r24, Y+51	; 0x33
    31f4:	9c a9       	ldd	r25, Y+52	; 0x34
    31f6:	20 e0       	ldi	r18, 0x00	; 0
    31f8:	3f ef       	ldi	r19, 0xFF	; 255
    31fa:	4f e7       	ldi	r20, 0x7F	; 127
    31fc:	57 e4       	ldi	r21, 0x47	; 71
    31fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3202:	18 16       	cp	r1, r24
    3204:	4c f5       	brge	.+82     	; 0x3258 <Animation1+0x36a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3206:	6d a9       	ldd	r22, Y+53	; 0x35
    3208:	7e a9       	ldd	r23, Y+54	; 0x36
    320a:	8f a9       	ldd	r24, Y+55	; 0x37
    320c:	98 ad       	ldd	r25, Y+56	; 0x38
    320e:	20 e0       	ldi	r18, 0x00	; 0
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	40 e2       	ldi	r20, 0x20	; 32
    3214:	51 e4       	ldi	r21, 0x41	; 65
    3216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    321a:	dc 01       	movw	r26, r24
    321c:	cb 01       	movw	r24, r22
    321e:	bc 01       	movw	r22, r24
    3220:	cd 01       	movw	r24, r26
    3222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	98 ab       	std	Y+48, r25	; 0x30
    322c:	8f a7       	std	Y+47, r24	; 0x2f
    322e:	0f c0       	rjmp	.+30     	; 0x324e <Animation1+0x360>
    3230:	80 e9       	ldi	r24, 0x90	; 144
    3232:	91 e0       	ldi	r25, 0x01	; 1
    3234:	9e a7       	std	Y+46, r25	; 0x2e
    3236:	8d a7       	std	Y+45, r24	; 0x2d
    3238:	8d a5       	ldd	r24, Y+45	; 0x2d
    323a:	9e a5       	ldd	r25, Y+46	; 0x2e
    323c:	01 97       	sbiw	r24, 0x01	; 1
    323e:	f1 f7       	brne	.-4      	; 0x323c <Animation1+0x34e>
    3240:	9e a7       	std	Y+46, r25	; 0x2e
    3242:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3244:	8f a5       	ldd	r24, Y+47	; 0x2f
    3246:	98 a9       	ldd	r25, Y+48	; 0x30
    3248:	01 97       	sbiw	r24, 0x01	; 1
    324a:	98 ab       	std	Y+48, r25	; 0x30
    324c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    324e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3250:	98 a9       	ldd	r25, Y+48	; 0x30
    3252:	00 97       	sbiw	r24, 0x00	; 0
    3254:	69 f7       	brne	.-38     	; 0x3230 <Animation1+0x342>
    3256:	14 c0       	rjmp	.+40     	; 0x3280 <Animation1+0x392>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3258:	69 a9       	ldd	r22, Y+49	; 0x31
    325a:	7a a9       	ldd	r23, Y+50	; 0x32
    325c:	8b a9       	ldd	r24, Y+51	; 0x33
    325e:	9c a9       	ldd	r25, Y+52	; 0x34
    3260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	98 ab       	std	Y+48, r25	; 0x30
    326a:	8f a7       	std	Y+47, r24	; 0x2f
    326c:	8f a5       	ldd	r24, Y+47	; 0x2f
    326e:	98 a9       	ldd	r25, Y+48	; 0x30
    3270:	9c a7       	std	Y+44, r25	; 0x2c
    3272:	8b a7       	std	Y+43, r24	; 0x2b
    3274:	8b a5       	ldd	r24, Y+43	; 0x2b
    3276:	9c a5       	ldd	r25, Y+44	; 0x2c
    3278:	01 97       	sbiw	r24, 0x01	; 1
    327a:	f1 f7       	brne	.-4      	; 0x3278 <Animation1+0x38a>
    327c:	9c a7       	std	Y+44, r25	; 0x2c
    327e:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(500);
    H_Led_void_setOFF(BLU_LED);
    3280:	82 e0       	ldi	r24, 0x02	; 2
    3282:	0e 94 18 17 	call	0x2e30	; 0x2e30 <H_Led_void_setOFF>
    H_Led_void_setOFF(GRN_LED);
    3286:	81 e0       	ldi	r24, 0x01	; 1
    3288:	0e 94 18 17 	call	0x2e30	; 0x2e30 <H_Led_void_setOFF>
    328c:	80 e0       	ldi	r24, 0x00	; 0
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	aa ef       	ldi	r26, 0xFA	; 250
    3292:	b3 e4       	ldi	r27, 0x43	; 67
    3294:	8f a3       	std	Y+39, r24	; 0x27
    3296:	98 a7       	std	Y+40, r25	; 0x28
    3298:	a9 a7       	std	Y+41, r26	; 0x29
    329a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    329c:	6f a1       	ldd	r22, Y+39	; 0x27
    329e:	78 a5       	ldd	r23, Y+40	; 0x28
    32a0:	89 a5       	ldd	r24, Y+41	; 0x29
    32a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	4a e7       	ldi	r20, 0x7A	; 122
    32aa:	55 e4       	ldi	r21, 0x45	; 69
    32ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b0:	dc 01       	movw	r26, r24
    32b2:	cb 01       	movw	r24, r22
    32b4:	8b a3       	std	Y+35, r24	; 0x23
    32b6:	9c a3       	std	Y+36, r25	; 0x24
    32b8:	ad a3       	std	Y+37, r26	; 0x25
    32ba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    32bc:	6b a1       	ldd	r22, Y+35	; 0x23
    32be:	7c a1       	ldd	r23, Y+36	; 0x24
    32c0:	8d a1       	ldd	r24, Y+37	; 0x25
    32c2:	9e a1       	ldd	r25, Y+38	; 0x26
    32c4:	20 e0       	ldi	r18, 0x00	; 0
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	40 e8       	ldi	r20, 0x80	; 128
    32ca:	5f e3       	ldi	r21, 0x3F	; 63
    32cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32d0:	88 23       	and	r24, r24
    32d2:	2c f4       	brge	.+10     	; 0x32de <Animation1+0x3f0>
		__ticks = 1;
    32d4:	81 e0       	ldi	r24, 0x01	; 1
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	9a a3       	std	Y+34, r25	; 0x22
    32da:	89 a3       	std	Y+33, r24	; 0x21
    32dc:	3f c0       	rjmp	.+126    	; 0x335c <Animation1+0x46e>
	else if (__tmp > 65535)
    32de:	6b a1       	ldd	r22, Y+35	; 0x23
    32e0:	7c a1       	ldd	r23, Y+36	; 0x24
    32e2:	8d a1       	ldd	r24, Y+37	; 0x25
    32e4:	9e a1       	ldd	r25, Y+38	; 0x26
    32e6:	20 e0       	ldi	r18, 0x00	; 0
    32e8:	3f ef       	ldi	r19, 0xFF	; 255
    32ea:	4f e7       	ldi	r20, 0x7F	; 127
    32ec:	57 e4       	ldi	r21, 0x47	; 71
    32ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32f2:	18 16       	cp	r1, r24
    32f4:	4c f5       	brge	.+82     	; 0x3348 <Animation1+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32f6:	6f a1       	ldd	r22, Y+39	; 0x27
    32f8:	78 a5       	ldd	r23, Y+40	; 0x28
    32fa:	89 a5       	ldd	r24, Y+41	; 0x29
    32fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	40 e2       	ldi	r20, 0x20	; 32
    3304:	51 e4       	ldi	r21, 0x41	; 65
    3306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	bc 01       	movw	r22, r24
    3310:	cd 01       	movw	r24, r26
    3312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3316:	dc 01       	movw	r26, r24
    3318:	cb 01       	movw	r24, r22
    331a:	9a a3       	std	Y+34, r25	; 0x22
    331c:	89 a3       	std	Y+33, r24	; 0x21
    331e:	0f c0       	rjmp	.+30     	; 0x333e <Animation1+0x450>
    3320:	80 e9       	ldi	r24, 0x90	; 144
    3322:	91 e0       	ldi	r25, 0x01	; 1
    3324:	98 a3       	std	Y+32, r25	; 0x20
    3326:	8f 8f       	std	Y+31, r24	; 0x1f
    3328:	8f 8d       	ldd	r24, Y+31	; 0x1f
    332a:	98 a1       	ldd	r25, Y+32	; 0x20
    332c:	01 97       	sbiw	r24, 0x01	; 1
    332e:	f1 f7       	brne	.-4      	; 0x332c <Animation1+0x43e>
    3330:	98 a3       	std	Y+32, r25	; 0x20
    3332:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3334:	89 a1       	ldd	r24, Y+33	; 0x21
    3336:	9a a1       	ldd	r25, Y+34	; 0x22
    3338:	01 97       	sbiw	r24, 0x01	; 1
    333a:	9a a3       	std	Y+34, r25	; 0x22
    333c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    333e:	89 a1       	ldd	r24, Y+33	; 0x21
    3340:	9a a1       	ldd	r25, Y+34	; 0x22
    3342:	00 97       	sbiw	r24, 0x00	; 0
    3344:	69 f7       	brne	.-38     	; 0x3320 <Animation1+0x432>
    3346:	14 c0       	rjmp	.+40     	; 0x3370 <Animation1+0x482>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3348:	6b a1       	ldd	r22, Y+35	; 0x23
    334a:	7c a1       	ldd	r23, Y+36	; 0x24
    334c:	8d a1       	ldd	r24, Y+37	; 0x25
    334e:	9e a1       	ldd	r25, Y+38	; 0x26
    3350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3354:	dc 01       	movw	r26, r24
    3356:	cb 01       	movw	r24, r22
    3358:	9a a3       	std	Y+34, r25	; 0x22
    335a:	89 a3       	std	Y+33, r24	; 0x21
    335c:	89 a1       	ldd	r24, Y+33	; 0x21
    335e:	9a a1       	ldd	r25, Y+34	; 0x22
    3360:	9e 8f       	std	Y+30, r25	; 0x1e
    3362:	8d 8f       	std	Y+29, r24	; 0x1d
    3364:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3366:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3368:	01 97       	sbiw	r24, 0x01	; 1
    336a:	f1 f7       	brne	.-4      	; 0x3368 <Animation1+0x47a>
    336c:	9e 8f       	std	Y+30, r25	; 0x1e
    336e:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(500);
    H_Led_void_setON(RED_LED);
    3370:	80 e0       	ldi	r24, 0x00	; 0
    3372:	0e 94 e7 16 	call	0x2dce	; 0x2dce <H_Led_void_setON>
    H_Led_void_setON(GRN_LED);
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	0e 94 e7 16 	call	0x2dce	; 0x2dce <H_Led_void_setON>
    337c:	80 e0       	ldi	r24, 0x00	; 0
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	aa ef       	ldi	r26, 0xFA	; 250
    3382:	b3 e4       	ldi	r27, 0x43	; 67
    3384:	89 8f       	std	Y+25, r24	; 0x19
    3386:	9a 8f       	std	Y+26, r25	; 0x1a
    3388:	ab 8f       	std	Y+27, r26	; 0x1b
    338a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    338c:	69 8d       	ldd	r22, Y+25	; 0x19
    338e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3390:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3392:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3394:	20 e0       	ldi	r18, 0x00	; 0
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	4a e7       	ldi	r20, 0x7A	; 122
    339a:	55 e4       	ldi	r21, 0x45	; 69
    339c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a0:	dc 01       	movw	r26, r24
    33a2:	cb 01       	movw	r24, r22
    33a4:	8d 8b       	std	Y+21, r24	; 0x15
    33a6:	9e 8b       	std	Y+22, r25	; 0x16
    33a8:	af 8b       	std	Y+23, r26	; 0x17
    33aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33ac:	6d 89       	ldd	r22, Y+21	; 0x15
    33ae:	7e 89       	ldd	r23, Y+22	; 0x16
    33b0:	8f 89       	ldd	r24, Y+23	; 0x17
    33b2:	98 8d       	ldd	r25, Y+24	; 0x18
    33b4:	20 e0       	ldi	r18, 0x00	; 0
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	40 e8       	ldi	r20, 0x80	; 128
    33ba:	5f e3       	ldi	r21, 0x3F	; 63
    33bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33c0:	88 23       	and	r24, r24
    33c2:	2c f4       	brge	.+10     	; 0x33ce <Animation1+0x4e0>
		__ticks = 1;
    33c4:	81 e0       	ldi	r24, 0x01	; 1
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	9c 8b       	std	Y+20, r25	; 0x14
    33ca:	8b 8b       	std	Y+19, r24	; 0x13
    33cc:	3f c0       	rjmp	.+126    	; 0x344c <Animation1+0x55e>
	else if (__tmp > 65535)
    33ce:	6d 89       	ldd	r22, Y+21	; 0x15
    33d0:	7e 89       	ldd	r23, Y+22	; 0x16
    33d2:	8f 89       	ldd	r24, Y+23	; 0x17
    33d4:	98 8d       	ldd	r25, Y+24	; 0x18
    33d6:	20 e0       	ldi	r18, 0x00	; 0
    33d8:	3f ef       	ldi	r19, 0xFF	; 255
    33da:	4f e7       	ldi	r20, 0x7F	; 127
    33dc:	57 e4       	ldi	r21, 0x47	; 71
    33de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33e2:	18 16       	cp	r1, r24
    33e4:	4c f5       	brge	.+82     	; 0x3438 <Animation1+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33e6:	69 8d       	ldd	r22, Y+25	; 0x19
    33e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33ee:	20 e0       	ldi	r18, 0x00	; 0
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	40 e2       	ldi	r20, 0x20	; 32
    33f4:	51 e4       	ldi	r21, 0x41	; 65
    33f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	bc 01       	movw	r22, r24
    3400:	cd 01       	movw	r24, r26
    3402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3406:	dc 01       	movw	r26, r24
    3408:	cb 01       	movw	r24, r22
    340a:	9c 8b       	std	Y+20, r25	; 0x14
    340c:	8b 8b       	std	Y+19, r24	; 0x13
    340e:	0f c0       	rjmp	.+30     	; 0x342e <Animation1+0x540>
    3410:	80 e9       	ldi	r24, 0x90	; 144
    3412:	91 e0       	ldi	r25, 0x01	; 1
    3414:	9a 8b       	std	Y+18, r25	; 0x12
    3416:	89 8b       	std	Y+17, r24	; 0x11
    3418:	89 89       	ldd	r24, Y+17	; 0x11
    341a:	9a 89       	ldd	r25, Y+18	; 0x12
    341c:	01 97       	sbiw	r24, 0x01	; 1
    341e:	f1 f7       	brne	.-4      	; 0x341c <Animation1+0x52e>
    3420:	9a 8b       	std	Y+18, r25	; 0x12
    3422:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3424:	8b 89       	ldd	r24, Y+19	; 0x13
    3426:	9c 89       	ldd	r25, Y+20	; 0x14
    3428:	01 97       	sbiw	r24, 0x01	; 1
    342a:	9c 8b       	std	Y+20, r25	; 0x14
    342c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    342e:	8b 89       	ldd	r24, Y+19	; 0x13
    3430:	9c 89       	ldd	r25, Y+20	; 0x14
    3432:	00 97       	sbiw	r24, 0x00	; 0
    3434:	69 f7       	brne	.-38     	; 0x3410 <Animation1+0x522>
    3436:	14 c0       	rjmp	.+40     	; 0x3460 <Animation1+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3438:	6d 89       	ldd	r22, Y+21	; 0x15
    343a:	7e 89       	ldd	r23, Y+22	; 0x16
    343c:	8f 89       	ldd	r24, Y+23	; 0x17
    343e:	98 8d       	ldd	r25, Y+24	; 0x18
    3440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3444:	dc 01       	movw	r26, r24
    3446:	cb 01       	movw	r24, r22
    3448:	9c 8b       	std	Y+20, r25	; 0x14
    344a:	8b 8b       	std	Y+19, r24	; 0x13
    344c:	8b 89       	ldd	r24, Y+19	; 0x13
    344e:	9c 89       	ldd	r25, Y+20	; 0x14
    3450:	98 8b       	std	Y+16, r25	; 0x10
    3452:	8f 87       	std	Y+15, r24	; 0x0f
    3454:	8f 85       	ldd	r24, Y+15	; 0x0f
    3456:	98 89       	ldd	r25, Y+16	; 0x10
    3458:	01 97       	sbiw	r24, 0x01	; 1
    345a:	f1 f7       	brne	.-4      	; 0x3458 <Animation1+0x56a>
    345c:	98 8b       	std	Y+16, r25	; 0x10
    345e:	8f 87       	std	Y+15, r24	; 0x0f
     _delay_ms(500);
     H_Led_void_setOFF(RED_LED);
    3460:	80 e0       	ldi	r24, 0x00	; 0
    3462:	0e 94 18 17 	call	0x2e30	; 0x2e30 <H_Led_void_setOFF>
     H_Led_void_setOFF(GRN_LED);
    3466:	81 e0       	ldi	r24, 0x01	; 1
    3468:	0e 94 18 17 	call	0x2e30	; 0x2e30 <H_Led_void_setOFF>
    346c:	80 e0       	ldi	r24, 0x00	; 0
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	aa ef       	ldi	r26, 0xFA	; 250
    3472:	b3 e4       	ldi	r27, 0x43	; 67
    3474:	8b 87       	std	Y+11, r24	; 0x0b
    3476:	9c 87       	std	Y+12, r25	; 0x0c
    3478:	ad 87       	std	Y+13, r26	; 0x0d
    347a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    347c:	6b 85       	ldd	r22, Y+11	; 0x0b
    347e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3480:	8d 85       	ldd	r24, Y+13	; 0x0d
    3482:	9e 85       	ldd	r25, Y+14	; 0x0e
    3484:	20 e0       	ldi	r18, 0x00	; 0
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	4a e7       	ldi	r20, 0x7A	; 122
    348a:	55 e4       	ldi	r21, 0x45	; 69
    348c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3490:	dc 01       	movw	r26, r24
    3492:	cb 01       	movw	r24, r22
    3494:	8f 83       	std	Y+7, r24	; 0x07
    3496:	98 87       	std	Y+8, r25	; 0x08
    3498:	a9 87       	std	Y+9, r26	; 0x09
    349a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    349c:	6f 81       	ldd	r22, Y+7	; 0x07
    349e:	78 85       	ldd	r23, Y+8	; 0x08
    34a0:	89 85       	ldd	r24, Y+9	; 0x09
    34a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a4:	20 e0       	ldi	r18, 0x00	; 0
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	40 e8       	ldi	r20, 0x80	; 128
    34aa:	5f e3       	ldi	r21, 0x3F	; 63
    34ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34b0:	88 23       	and	r24, r24
    34b2:	2c f4       	brge	.+10     	; 0x34be <Animation1+0x5d0>
		__ticks = 1;
    34b4:	81 e0       	ldi	r24, 0x01	; 1
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	9e 83       	std	Y+6, r25	; 0x06
    34ba:	8d 83       	std	Y+5, r24	; 0x05
    34bc:	3f c0       	rjmp	.+126    	; 0x353c <Animation1+0x64e>
	else if (__tmp > 65535)
    34be:	6f 81       	ldd	r22, Y+7	; 0x07
    34c0:	78 85       	ldd	r23, Y+8	; 0x08
    34c2:	89 85       	ldd	r24, Y+9	; 0x09
    34c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34c6:	20 e0       	ldi	r18, 0x00	; 0
    34c8:	3f ef       	ldi	r19, 0xFF	; 255
    34ca:	4f e7       	ldi	r20, 0x7F	; 127
    34cc:	57 e4       	ldi	r21, 0x47	; 71
    34ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34d2:	18 16       	cp	r1, r24
    34d4:	4c f5       	brge	.+82     	; 0x3528 <Animation1+0x63a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    34d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    34da:	8d 85       	ldd	r24, Y+13	; 0x0d
    34dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	40 e2       	ldi	r20, 0x20	; 32
    34e4:	51 e4       	ldi	r21, 0x41	; 65
    34e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ea:	dc 01       	movw	r26, r24
    34ec:	cb 01       	movw	r24, r22
    34ee:	bc 01       	movw	r22, r24
    34f0:	cd 01       	movw	r24, r26
    34f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f6:	dc 01       	movw	r26, r24
    34f8:	cb 01       	movw	r24, r22
    34fa:	9e 83       	std	Y+6, r25	; 0x06
    34fc:	8d 83       	std	Y+5, r24	; 0x05
    34fe:	0f c0       	rjmp	.+30     	; 0x351e <Animation1+0x630>
    3500:	80 e9       	ldi	r24, 0x90	; 144
    3502:	91 e0       	ldi	r25, 0x01	; 1
    3504:	9c 83       	std	Y+4, r25	; 0x04
    3506:	8b 83       	std	Y+3, r24	; 0x03
    3508:	8b 81       	ldd	r24, Y+3	; 0x03
    350a:	9c 81       	ldd	r25, Y+4	; 0x04
    350c:	01 97       	sbiw	r24, 0x01	; 1
    350e:	f1 f7       	brne	.-4      	; 0x350c <Animation1+0x61e>
    3510:	9c 83       	std	Y+4, r25	; 0x04
    3512:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3514:	8d 81       	ldd	r24, Y+5	; 0x05
    3516:	9e 81       	ldd	r25, Y+6	; 0x06
    3518:	01 97       	sbiw	r24, 0x01	; 1
    351a:	9e 83       	std	Y+6, r25	; 0x06
    351c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    351e:	8d 81       	ldd	r24, Y+5	; 0x05
    3520:	9e 81       	ldd	r25, Y+6	; 0x06
    3522:	00 97       	sbiw	r24, 0x00	; 0
    3524:	69 f7       	brne	.-38     	; 0x3500 <Animation1+0x612>
    3526:	14 c0       	rjmp	.+40     	; 0x3550 <Animation1+0x662>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3528:	6f 81       	ldd	r22, Y+7	; 0x07
    352a:	78 85       	ldd	r23, Y+8	; 0x08
    352c:	89 85       	ldd	r24, Y+9	; 0x09
    352e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3534:	dc 01       	movw	r26, r24
    3536:	cb 01       	movw	r24, r22
    3538:	9e 83       	std	Y+6, r25	; 0x06
    353a:	8d 83       	std	Y+5, r24	; 0x05
    353c:	8d 81       	ldd	r24, Y+5	; 0x05
    353e:	9e 81       	ldd	r25, Y+6	; 0x06
    3540:	9a 83       	std	Y+2, r25	; 0x02
    3542:	89 83       	std	Y+1, r24	; 0x01
    3544:	89 81       	ldd	r24, Y+1	; 0x01
    3546:	9a 81       	ldd	r25, Y+2	; 0x02
    3548:	01 97       	sbiw	r24, 0x01	; 1
    354a:	f1 f7       	brne	.-4      	; 0x3548 <Animation1+0x65a>
    354c:	9a 83       	std	Y+2, r25	; 0x02
    354e:	89 83       	std	Y+1, r24	; 0x01
     _delay_ms(500);

}
    3550:	cc 5a       	subi	r28, 0xAC	; 172
    3552:	df 4f       	sbci	r29, 0xFF	; 255
    3554:	0f b6       	in	r0, 0x3f	; 63
    3556:	f8 94       	cli
    3558:	de bf       	out	0x3e, r29	; 62
    355a:	0f be       	out	0x3f, r0	; 63
    355c:	cd bf       	out	0x3d, r28	; 61
    355e:	cf 91       	pop	r28
    3560:	df 91       	pop	r29
    3562:	1f 91       	pop	r17
    3564:	0f 91       	pop	r16
    3566:	08 95       	ret

00003568 <Animation2>:
void Animation2()
{
    3568:	0f 93       	push	r16
    356a:	1f 93       	push	r17
    356c:	df 93       	push	r29
    356e:	cf 93       	push	r28
    3570:	cd b7       	in	r28, 0x3d	; 61
    3572:	de b7       	in	r29, 0x3e	; 62
    3574:	c4 55       	subi	r28, 0x54	; 84
    3576:	d0 40       	sbci	r29, 0x00	; 0
    3578:	0f b6       	in	r0, 0x3f	; 63
    357a:	f8 94       	cli
    357c:	de bf       	out	0x3e, r29	; 62
    357e:	0f be       	out	0x3f, r0	; 63
    3580:	cd bf       	out	0x3d, r28	; 61
	H_Led_void_setON(RED_LED);
    3582:	80 e0       	ldi	r24, 0x00	; 0
    3584:	0e 94 e7 16 	call	0x2dce	; 0x2dce <H_Led_void_setON>
    3588:	fe 01       	movw	r30, r28
    358a:	ef 5a       	subi	r30, 0xAF	; 175
    358c:	ff 4f       	sbci	r31, 0xFF	; 255
    358e:	80 e0       	ldi	r24, 0x00	; 0
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	aa ef       	ldi	r26, 0xFA	; 250
    3594:	b3 e4       	ldi	r27, 0x43	; 67
    3596:	80 83       	st	Z, r24
    3598:	91 83       	std	Z+1, r25	; 0x01
    359a:	a2 83       	std	Z+2, r26	; 0x02
    359c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    359e:	8e 01       	movw	r16, r28
    35a0:	03 5b       	subi	r16, 0xB3	; 179
    35a2:	1f 4f       	sbci	r17, 0xFF	; 255
    35a4:	fe 01       	movw	r30, r28
    35a6:	ef 5a       	subi	r30, 0xAF	; 175
    35a8:	ff 4f       	sbci	r31, 0xFF	; 255
    35aa:	60 81       	ld	r22, Z
    35ac:	71 81       	ldd	r23, Z+1	; 0x01
    35ae:	82 81       	ldd	r24, Z+2	; 0x02
    35b0:	93 81       	ldd	r25, Z+3	; 0x03
    35b2:	20 e0       	ldi	r18, 0x00	; 0
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	4a e7       	ldi	r20, 0x7A	; 122
    35b8:	55 e4       	ldi	r21, 0x45	; 69
    35ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35be:	dc 01       	movw	r26, r24
    35c0:	cb 01       	movw	r24, r22
    35c2:	f8 01       	movw	r30, r16
    35c4:	80 83       	st	Z, r24
    35c6:	91 83       	std	Z+1, r25	; 0x01
    35c8:	a2 83       	std	Z+2, r26	; 0x02
    35ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35cc:	fe 01       	movw	r30, r28
    35ce:	e3 5b       	subi	r30, 0xB3	; 179
    35d0:	ff 4f       	sbci	r31, 0xFF	; 255
    35d2:	60 81       	ld	r22, Z
    35d4:	71 81       	ldd	r23, Z+1	; 0x01
    35d6:	82 81       	ldd	r24, Z+2	; 0x02
    35d8:	93 81       	ldd	r25, Z+3	; 0x03
    35da:	20 e0       	ldi	r18, 0x00	; 0
    35dc:	30 e0       	ldi	r19, 0x00	; 0
    35de:	40 e8       	ldi	r20, 0x80	; 128
    35e0:	5f e3       	ldi	r21, 0x3F	; 63
    35e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35e6:	88 23       	and	r24, r24
    35e8:	44 f4       	brge	.+16     	; 0x35fa <Animation2+0x92>
		__ticks = 1;
    35ea:	fe 01       	movw	r30, r28
    35ec:	e5 5b       	subi	r30, 0xB5	; 181
    35ee:	ff 4f       	sbci	r31, 0xFF	; 255
    35f0:	81 e0       	ldi	r24, 0x01	; 1
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	91 83       	std	Z+1, r25	; 0x01
    35f6:	80 83       	st	Z, r24
    35f8:	64 c0       	rjmp	.+200    	; 0x36c2 <Animation2+0x15a>
	else if (__tmp > 65535)
    35fa:	fe 01       	movw	r30, r28
    35fc:	e3 5b       	subi	r30, 0xB3	; 179
    35fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3600:	60 81       	ld	r22, Z
    3602:	71 81       	ldd	r23, Z+1	; 0x01
    3604:	82 81       	ldd	r24, Z+2	; 0x02
    3606:	93 81       	ldd	r25, Z+3	; 0x03
    3608:	20 e0       	ldi	r18, 0x00	; 0
    360a:	3f ef       	ldi	r19, 0xFF	; 255
    360c:	4f e7       	ldi	r20, 0x7F	; 127
    360e:	57 e4       	ldi	r21, 0x47	; 71
    3610:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3614:	18 16       	cp	r1, r24
    3616:	0c f0       	brlt	.+2      	; 0x361a <Animation2+0xb2>
    3618:	43 c0       	rjmp	.+134    	; 0x36a0 <Animation2+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    361a:	fe 01       	movw	r30, r28
    361c:	ef 5a       	subi	r30, 0xAF	; 175
    361e:	ff 4f       	sbci	r31, 0xFF	; 255
    3620:	60 81       	ld	r22, Z
    3622:	71 81       	ldd	r23, Z+1	; 0x01
    3624:	82 81       	ldd	r24, Z+2	; 0x02
    3626:	93 81       	ldd	r25, Z+3	; 0x03
    3628:	20 e0       	ldi	r18, 0x00	; 0
    362a:	30 e0       	ldi	r19, 0x00	; 0
    362c:	40 e2       	ldi	r20, 0x20	; 32
    362e:	51 e4       	ldi	r21, 0x41	; 65
    3630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3634:	dc 01       	movw	r26, r24
    3636:	cb 01       	movw	r24, r22
    3638:	8e 01       	movw	r16, r28
    363a:	05 5b       	subi	r16, 0xB5	; 181
    363c:	1f 4f       	sbci	r17, 0xFF	; 255
    363e:	bc 01       	movw	r22, r24
    3640:	cd 01       	movw	r24, r26
    3642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3646:	dc 01       	movw	r26, r24
    3648:	cb 01       	movw	r24, r22
    364a:	f8 01       	movw	r30, r16
    364c:	91 83       	std	Z+1, r25	; 0x01
    364e:	80 83       	st	Z, r24
    3650:	1f c0       	rjmp	.+62     	; 0x3690 <Animation2+0x128>
    3652:	fe 01       	movw	r30, r28
    3654:	e7 5b       	subi	r30, 0xB7	; 183
    3656:	ff 4f       	sbci	r31, 0xFF	; 255
    3658:	80 e9       	ldi	r24, 0x90	; 144
    365a:	91 e0       	ldi	r25, 0x01	; 1
    365c:	91 83       	std	Z+1, r25	; 0x01
    365e:	80 83       	st	Z, r24
    3660:	fe 01       	movw	r30, r28
    3662:	e7 5b       	subi	r30, 0xB7	; 183
    3664:	ff 4f       	sbci	r31, 0xFF	; 255
    3666:	80 81       	ld	r24, Z
    3668:	91 81       	ldd	r25, Z+1	; 0x01
    366a:	01 97       	sbiw	r24, 0x01	; 1
    366c:	f1 f7       	brne	.-4      	; 0x366a <Animation2+0x102>
    366e:	fe 01       	movw	r30, r28
    3670:	e7 5b       	subi	r30, 0xB7	; 183
    3672:	ff 4f       	sbci	r31, 0xFF	; 255
    3674:	91 83       	std	Z+1, r25	; 0x01
    3676:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3678:	de 01       	movw	r26, r28
    367a:	a5 5b       	subi	r26, 0xB5	; 181
    367c:	bf 4f       	sbci	r27, 0xFF	; 255
    367e:	fe 01       	movw	r30, r28
    3680:	e5 5b       	subi	r30, 0xB5	; 181
    3682:	ff 4f       	sbci	r31, 0xFF	; 255
    3684:	80 81       	ld	r24, Z
    3686:	91 81       	ldd	r25, Z+1	; 0x01
    3688:	01 97       	sbiw	r24, 0x01	; 1
    368a:	11 96       	adiw	r26, 0x01	; 1
    368c:	9c 93       	st	X, r25
    368e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3690:	fe 01       	movw	r30, r28
    3692:	e5 5b       	subi	r30, 0xB5	; 181
    3694:	ff 4f       	sbci	r31, 0xFF	; 255
    3696:	80 81       	ld	r24, Z
    3698:	91 81       	ldd	r25, Z+1	; 0x01
    369a:	00 97       	sbiw	r24, 0x00	; 0
    369c:	d1 f6       	brne	.-76     	; 0x3652 <Animation2+0xea>
    369e:	27 c0       	rjmp	.+78     	; 0x36ee <Animation2+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36a0:	8e 01       	movw	r16, r28
    36a2:	05 5b       	subi	r16, 0xB5	; 181
    36a4:	1f 4f       	sbci	r17, 0xFF	; 255
    36a6:	fe 01       	movw	r30, r28
    36a8:	e3 5b       	subi	r30, 0xB3	; 179
    36aa:	ff 4f       	sbci	r31, 0xFF	; 255
    36ac:	60 81       	ld	r22, Z
    36ae:	71 81       	ldd	r23, Z+1	; 0x01
    36b0:	82 81       	ldd	r24, Z+2	; 0x02
    36b2:	93 81       	ldd	r25, Z+3	; 0x03
    36b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b8:	dc 01       	movw	r26, r24
    36ba:	cb 01       	movw	r24, r22
    36bc:	f8 01       	movw	r30, r16
    36be:	91 83       	std	Z+1, r25	; 0x01
    36c0:	80 83       	st	Z, r24
    36c2:	de 01       	movw	r26, r28
    36c4:	a9 5b       	subi	r26, 0xB9	; 185
    36c6:	bf 4f       	sbci	r27, 0xFF	; 255
    36c8:	fe 01       	movw	r30, r28
    36ca:	e5 5b       	subi	r30, 0xB5	; 181
    36cc:	ff 4f       	sbci	r31, 0xFF	; 255
    36ce:	80 81       	ld	r24, Z
    36d0:	91 81       	ldd	r25, Z+1	; 0x01
    36d2:	8d 93       	st	X+, r24
    36d4:	9c 93       	st	X, r25
    36d6:	fe 01       	movw	r30, r28
    36d8:	e9 5b       	subi	r30, 0xB9	; 185
    36da:	ff 4f       	sbci	r31, 0xFF	; 255
    36dc:	80 81       	ld	r24, Z
    36de:	91 81       	ldd	r25, Z+1	; 0x01
    36e0:	01 97       	sbiw	r24, 0x01	; 1
    36e2:	f1 f7       	brne	.-4      	; 0x36e0 <Animation2+0x178>
    36e4:	fe 01       	movw	r30, r28
    36e6:	e9 5b       	subi	r30, 0xB9	; 185
    36e8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ea:	91 83       	std	Z+1, r25	; 0x01
    36ec:	80 83       	st	Z, r24
	_delay_ms(500);
	H_Led_void_setOFF(RED_LED);
    36ee:	80 e0       	ldi	r24, 0x00	; 0
    36f0:	0e 94 18 17 	call	0x2e30	; 0x2e30 <H_Led_void_setOFF>
    36f4:	fe 01       	movw	r30, r28
    36f6:	ed 5b       	subi	r30, 0xBD	; 189
    36f8:	ff 4f       	sbci	r31, 0xFF	; 255
    36fa:	80 e0       	ldi	r24, 0x00	; 0
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	aa ef       	ldi	r26, 0xFA	; 250
    3700:	b3 e4       	ldi	r27, 0x43	; 67
    3702:	80 83       	st	Z, r24
    3704:	91 83       	std	Z+1, r25	; 0x01
    3706:	a2 83       	std	Z+2, r26	; 0x02
    3708:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    370a:	8e 01       	movw	r16, r28
    370c:	01 5c       	subi	r16, 0xC1	; 193
    370e:	1f 4f       	sbci	r17, 0xFF	; 255
    3710:	fe 01       	movw	r30, r28
    3712:	ed 5b       	subi	r30, 0xBD	; 189
    3714:	ff 4f       	sbci	r31, 0xFF	; 255
    3716:	60 81       	ld	r22, Z
    3718:	71 81       	ldd	r23, Z+1	; 0x01
    371a:	82 81       	ldd	r24, Z+2	; 0x02
    371c:	93 81       	ldd	r25, Z+3	; 0x03
    371e:	20 e0       	ldi	r18, 0x00	; 0
    3720:	30 e0       	ldi	r19, 0x00	; 0
    3722:	4a e7       	ldi	r20, 0x7A	; 122
    3724:	55 e4       	ldi	r21, 0x45	; 69
    3726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    372a:	dc 01       	movw	r26, r24
    372c:	cb 01       	movw	r24, r22
    372e:	f8 01       	movw	r30, r16
    3730:	80 83       	st	Z, r24
    3732:	91 83       	std	Z+1, r25	; 0x01
    3734:	a2 83       	std	Z+2, r26	; 0x02
    3736:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3738:	fe 01       	movw	r30, r28
    373a:	ff 96       	adiw	r30, 0x3f	; 63
    373c:	60 81       	ld	r22, Z
    373e:	71 81       	ldd	r23, Z+1	; 0x01
    3740:	82 81       	ldd	r24, Z+2	; 0x02
    3742:	93 81       	ldd	r25, Z+3	; 0x03
    3744:	20 e0       	ldi	r18, 0x00	; 0
    3746:	30 e0       	ldi	r19, 0x00	; 0
    3748:	40 e8       	ldi	r20, 0x80	; 128
    374a:	5f e3       	ldi	r21, 0x3F	; 63
    374c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3750:	88 23       	and	r24, r24
    3752:	2c f4       	brge	.+10     	; 0x375e <Animation2+0x1f6>
		__ticks = 1;
    3754:	81 e0       	ldi	r24, 0x01	; 1
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	9e af       	std	Y+62, r25	; 0x3e
    375a:	8d af       	std	Y+61, r24	; 0x3d
    375c:	46 c0       	rjmp	.+140    	; 0x37ea <Animation2+0x282>
	else if (__tmp > 65535)
    375e:	fe 01       	movw	r30, r28
    3760:	ff 96       	adiw	r30, 0x3f	; 63
    3762:	60 81       	ld	r22, Z
    3764:	71 81       	ldd	r23, Z+1	; 0x01
    3766:	82 81       	ldd	r24, Z+2	; 0x02
    3768:	93 81       	ldd	r25, Z+3	; 0x03
    376a:	20 e0       	ldi	r18, 0x00	; 0
    376c:	3f ef       	ldi	r19, 0xFF	; 255
    376e:	4f e7       	ldi	r20, 0x7F	; 127
    3770:	57 e4       	ldi	r21, 0x47	; 71
    3772:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3776:	18 16       	cp	r1, r24
    3778:	64 f5       	brge	.+88     	; 0x37d2 <Animation2+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    377a:	fe 01       	movw	r30, r28
    377c:	ed 5b       	subi	r30, 0xBD	; 189
    377e:	ff 4f       	sbci	r31, 0xFF	; 255
    3780:	60 81       	ld	r22, Z
    3782:	71 81       	ldd	r23, Z+1	; 0x01
    3784:	82 81       	ldd	r24, Z+2	; 0x02
    3786:	93 81       	ldd	r25, Z+3	; 0x03
    3788:	20 e0       	ldi	r18, 0x00	; 0
    378a:	30 e0       	ldi	r19, 0x00	; 0
    378c:	40 e2       	ldi	r20, 0x20	; 32
    378e:	51 e4       	ldi	r21, 0x41	; 65
    3790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3794:	dc 01       	movw	r26, r24
    3796:	cb 01       	movw	r24, r22
    3798:	bc 01       	movw	r22, r24
    379a:	cd 01       	movw	r24, r26
    379c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a0:	dc 01       	movw	r26, r24
    37a2:	cb 01       	movw	r24, r22
    37a4:	9e af       	std	Y+62, r25	; 0x3e
    37a6:	8d af       	std	Y+61, r24	; 0x3d
    37a8:	0f c0       	rjmp	.+30     	; 0x37c8 <Animation2+0x260>
    37aa:	80 e9       	ldi	r24, 0x90	; 144
    37ac:	91 e0       	ldi	r25, 0x01	; 1
    37ae:	9c af       	std	Y+60, r25	; 0x3c
    37b0:	8b af       	std	Y+59, r24	; 0x3b
    37b2:	8b ad       	ldd	r24, Y+59	; 0x3b
    37b4:	9c ad       	ldd	r25, Y+60	; 0x3c
    37b6:	01 97       	sbiw	r24, 0x01	; 1
    37b8:	f1 f7       	brne	.-4      	; 0x37b6 <Animation2+0x24e>
    37ba:	9c af       	std	Y+60, r25	; 0x3c
    37bc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37be:	8d ad       	ldd	r24, Y+61	; 0x3d
    37c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    37c2:	01 97       	sbiw	r24, 0x01	; 1
    37c4:	9e af       	std	Y+62, r25	; 0x3e
    37c6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    37ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    37cc:	00 97       	sbiw	r24, 0x00	; 0
    37ce:	69 f7       	brne	.-38     	; 0x37aa <Animation2+0x242>
    37d0:	16 c0       	rjmp	.+44     	; 0x37fe <Animation2+0x296>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37d2:	fe 01       	movw	r30, r28
    37d4:	ff 96       	adiw	r30, 0x3f	; 63
    37d6:	60 81       	ld	r22, Z
    37d8:	71 81       	ldd	r23, Z+1	; 0x01
    37da:	82 81       	ldd	r24, Z+2	; 0x02
    37dc:	93 81       	ldd	r25, Z+3	; 0x03
    37de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e2:	dc 01       	movw	r26, r24
    37e4:	cb 01       	movw	r24, r22
    37e6:	9e af       	std	Y+62, r25	; 0x3e
    37e8:	8d af       	std	Y+61, r24	; 0x3d
    37ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    37ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    37ee:	9a af       	std	Y+58, r25	; 0x3a
    37f0:	89 af       	std	Y+57, r24	; 0x39
    37f2:	89 ad       	ldd	r24, Y+57	; 0x39
    37f4:	9a ad       	ldd	r25, Y+58	; 0x3a
    37f6:	01 97       	sbiw	r24, 0x01	; 1
    37f8:	f1 f7       	brne	.-4      	; 0x37f6 <Animation2+0x28e>
    37fa:	9a af       	std	Y+58, r25	; 0x3a
    37fc:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(500);
    H_Led_void_setON(BLU_LED);
    37fe:	82 e0       	ldi	r24, 0x02	; 2
    3800:	0e 94 e7 16 	call	0x2dce	; 0x2dce <H_Led_void_setON>
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	aa ef       	ldi	r26, 0xFA	; 250
    380a:	b3 e4       	ldi	r27, 0x43	; 67
    380c:	8d ab       	std	Y+53, r24	; 0x35
    380e:	9e ab       	std	Y+54, r25	; 0x36
    3810:	af ab       	std	Y+55, r26	; 0x37
    3812:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3814:	6d a9       	ldd	r22, Y+53	; 0x35
    3816:	7e a9       	ldd	r23, Y+54	; 0x36
    3818:	8f a9       	ldd	r24, Y+55	; 0x37
    381a:	98 ad       	ldd	r25, Y+56	; 0x38
    381c:	20 e0       	ldi	r18, 0x00	; 0
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	4a e7       	ldi	r20, 0x7A	; 122
    3822:	55 e4       	ldi	r21, 0x45	; 69
    3824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3828:	dc 01       	movw	r26, r24
    382a:	cb 01       	movw	r24, r22
    382c:	89 ab       	std	Y+49, r24	; 0x31
    382e:	9a ab       	std	Y+50, r25	; 0x32
    3830:	ab ab       	std	Y+51, r26	; 0x33
    3832:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3834:	69 a9       	ldd	r22, Y+49	; 0x31
    3836:	7a a9       	ldd	r23, Y+50	; 0x32
    3838:	8b a9       	ldd	r24, Y+51	; 0x33
    383a:	9c a9       	ldd	r25, Y+52	; 0x34
    383c:	20 e0       	ldi	r18, 0x00	; 0
    383e:	30 e0       	ldi	r19, 0x00	; 0
    3840:	40 e8       	ldi	r20, 0x80	; 128
    3842:	5f e3       	ldi	r21, 0x3F	; 63
    3844:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3848:	88 23       	and	r24, r24
    384a:	2c f4       	brge	.+10     	; 0x3856 <Animation2+0x2ee>
		__ticks = 1;
    384c:	81 e0       	ldi	r24, 0x01	; 1
    384e:	90 e0       	ldi	r25, 0x00	; 0
    3850:	98 ab       	std	Y+48, r25	; 0x30
    3852:	8f a7       	std	Y+47, r24	; 0x2f
    3854:	3f c0       	rjmp	.+126    	; 0x38d4 <Animation2+0x36c>
	else if (__tmp > 65535)
    3856:	69 a9       	ldd	r22, Y+49	; 0x31
    3858:	7a a9       	ldd	r23, Y+50	; 0x32
    385a:	8b a9       	ldd	r24, Y+51	; 0x33
    385c:	9c a9       	ldd	r25, Y+52	; 0x34
    385e:	20 e0       	ldi	r18, 0x00	; 0
    3860:	3f ef       	ldi	r19, 0xFF	; 255
    3862:	4f e7       	ldi	r20, 0x7F	; 127
    3864:	57 e4       	ldi	r21, 0x47	; 71
    3866:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    386a:	18 16       	cp	r1, r24
    386c:	4c f5       	brge	.+82     	; 0x38c0 <Animation2+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    386e:	6d a9       	ldd	r22, Y+53	; 0x35
    3870:	7e a9       	ldd	r23, Y+54	; 0x36
    3872:	8f a9       	ldd	r24, Y+55	; 0x37
    3874:	98 ad       	ldd	r25, Y+56	; 0x38
    3876:	20 e0       	ldi	r18, 0x00	; 0
    3878:	30 e0       	ldi	r19, 0x00	; 0
    387a:	40 e2       	ldi	r20, 0x20	; 32
    387c:	51 e4       	ldi	r21, 0x41	; 65
    387e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3882:	dc 01       	movw	r26, r24
    3884:	cb 01       	movw	r24, r22
    3886:	bc 01       	movw	r22, r24
    3888:	cd 01       	movw	r24, r26
    388a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	98 ab       	std	Y+48, r25	; 0x30
    3894:	8f a7       	std	Y+47, r24	; 0x2f
    3896:	0f c0       	rjmp	.+30     	; 0x38b6 <Animation2+0x34e>
    3898:	80 e9       	ldi	r24, 0x90	; 144
    389a:	91 e0       	ldi	r25, 0x01	; 1
    389c:	9e a7       	std	Y+46, r25	; 0x2e
    389e:	8d a7       	std	Y+45, r24	; 0x2d
    38a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    38a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    38a4:	01 97       	sbiw	r24, 0x01	; 1
    38a6:	f1 f7       	brne	.-4      	; 0x38a4 <Animation2+0x33c>
    38a8:	9e a7       	std	Y+46, r25	; 0x2e
    38aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    38ae:	98 a9       	ldd	r25, Y+48	; 0x30
    38b0:	01 97       	sbiw	r24, 0x01	; 1
    38b2:	98 ab       	std	Y+48, r25	; 0x30
    38b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    38b8:	98 a9       	ldd	r25, Y+48	; 0x30
    38ba:	00 97       	sbiw	r24, 0x00	; 0
    38bc:	69 f7       	brne	.-38     	; 0x3898 <Animation2+0x330>
    38be:	14 c0       	rjmp	.+40     	; 0x38e8 <Animation2+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38c0:	69 a9       	ldd	r22, Y+49	; 0x31
    38c2:	7a a9       	ldd	r23, Y+50	; 0x32
    38c4:	8b a9       	ldd	r24, Y+51	; 0x33
    38c6:	9c a9       	ldd	r25, Y+52	; 0x34
    38c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38cc:	dc 01       	movw	r26, r24
    38ce:	cb 01       	movw	r24, r22
    38d0:	98 ab       	std	Y+48, r25	; 0x30
    38d2:	8f a7       	std	Y+47, r24	; 0x2f
    38d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    38d6:	98 a9       	ldd	r25, Y+48	; 0x30
    38d8:	9c a7       	std	Y+44, r25	; 0x2c
    38da:	8b a7       	std	Y+43, r24	; 0x2b
    38dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    38de:	9c a5       	ldd	r25, Y+44	; 0x2c
    38e0:	01 97       	sbiw	r24, 0x01	; 1
    38e2:	f1 f7       	brne	.-4      	; 0x38e0 <Animation2+0x378>
    38e4:	9c a7       	std	Y+44, r25	; 0x2c
    38e6:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(500);
    H_Led_void_setOFF(BLU_LED);
    38e8:	82 e0       	ldi	r24, 0x02	; 2
    38ea:	0e 94 18 17 	call	0x2e30	; 0x2e30 <H_Led_void_setOFF>
    38ee:	80 e0       	ldi	r24, 0x00	; 0
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	aa ef       	ldi	r26, 0xFA	; 250
    38f4:	b3 e4       	ldi	r27, 0x43	; 67
    38f6:	8f a3       	std	Y+39, r24	; 0x27
    38f8:	98 a7       	std	Y+40, r25	; 0x28
    38fa:	a9 a7       	std	Y+41, r26	; 0x29
    38fc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38fe:	6f a1       	ldd	r22, Y+39	; 0x27
    3900:	78 a5       	ldd	r23, Y+40	; 0x28
    3902:	89 a5       	ldd	r24, Y+41	; 0x29
    3904:	9a a5       	ldd	r25, Y+42	; 0x2a
    3906:	20 e0       	ldi	r18, 0x00	; 0
    3908:	30 e0       	ldi	r19, 0x00	; 0
    390a:	4a e7       	ldi	r20, 0x7A	; 122
    390c:	55 e4       	ldi	r21, 0x45	; 69
    390e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3912:	dc 01       	movw	r26, r24
    3914:	cb 01       	movw	r24, r22
    3916:	8b a3       	std	Y+35, r24	; 0x23
    3918:	9c a3       	std	Y+36, r25	; 0x24
    391a:	ad a3       	std	Y+37, r26	; 0x25
    391c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    391e:	6b a1       	ldd	r22, Y+35	; 0x23
    3920:	7c a1       	ldd	r23, Y+36	; 0x24
    3922:	8d a1       	ldd	r24, Y+37	; 0x25
    3924:	9e a1       	ldd	r25, Y+38	; 0x26
    3926:	20 e0       	ldi	r18, 0x00	; 0
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	40 e8       	ldi	r20, 0x80	; 128
    392c:	5f e3       	ldi	r21, 0x3F	; 63
    392e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3932:	88 23       	and	r24, r24
    3934:	2c f4       	brge	.+10     	; 0x3940 <Animation2+0x3d8>
		__ticks = 1;
    3936:	81 e0       	ldi	r24, 0x01	; 1
    3938:	90 e0       	ldi	r25, 0x00	; 0
    393a:	9a a3       	std	Y+34, r25	; 0x22
    393c:	89 a3       	std	Y+33, r24	; 0x21
    393e:	3f c0       	rjmp	.+126    	; 0x39be <Animation2+0x456>
	else if (__tmp > 65535)
    3940:	6b a1       	ldd	r22, Y+35	; 0x23
    3942:	7c a1       	ldd	r23, Y+36	; 0x24
    3944:	8d a1       	ldd	r24, Y+37	; 0x25
    3946:	9e a1       	ldd	r25, Y+38	; 0x26
    3948:	20 e0       	ldi	r18, 0x00	; 0
    394a:	3f ef       	ldi	r19, 0xFF	; 255
    394c:	4f e7       	ldi	r20, 0x7F	; 127
    394e:	57 e4       	ldi	r21, 0x47	; 71
    3950:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3954:	18 16       	cp	r1, r24
    3956:	4c f5       	brge	.+82     	; 0x39aa <Animation2+0x442>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3958:	6f a1       	ldd	r22, Y+39	; 0x27
    395a:	78 a5       	ldd	r23, Y+40	; 0x28
    395c:	89 a5       	ldd	r24, Y+41	; 0x29
    395e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3960:	20 e0       	ldi	r18, 0x00	; 0
    3962:	30 e0       	ldi	r19, 0x00	; 0
    3964:	40 e2       	ldi	r20, 0x20	; 32
    3966:	51 e4       	ldi	r21, 0x41	; 65
    3968:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    396c:	dc 01       	movw	r26, r24
    396e:	cb 01       	movw	r24, r22
    3970:	bc 01       	movw	r22, r24
    3972:	cd 01       	movw	r24, r26
    3974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3978:	dc 01       	movw	r26, r24
    397a:	cb 01       	movw	r24, r22
    397c:	9a a3       	std	Y+34, r25	; 0x22
    397e:	89 a3       	std	Y+33, r24	; 0x21
    3980:	0f c0       	rjmp	.+30     	; 0x39a0 <Animation2+0x438>
    3982:	80 e9       	ldi	r24, 0x90	; 144
    3984:	91 e0       	ldi	r25, 0x01	; 1
    3986:	98 a3       	std	Y+32, r25	; 0x20
    3988:	8f 8f       	std	Y+31, r24	; 0x1f
    398a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    398c:	98 a1       	ldd	r25, Y+32	; 0x20
    398e:	01 97       	sbiw	r24, 0x01	; 1
    3990:	f1 f7       	brne	.-4      	; 0x398e <Animation2+0x426>
    3992:	98 a3       	std	Y+32, r25	; 0x20
    3994:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3996:	89 a1       	ldd	r24, Y+33	; 0x21
    3998:	9a a1       	ldd	r25, Y+34	; 0x22
    399a:	01 97       	sbiw	r24, 0x01	; 1
    399c:	9a a3       	std	Y+34, r25	; 0x22
    399e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39a0:	89 a1       	ldd	r24, Y+33	; 0x21
    39a2:	9a a1       	ldd	r25, Y+34	; 0x22
    39a4:	00 97       	sbiw	r24, 0x00	; 0
    39a6:	69 f7       	brne	.-38     	; 0x3982 <Animation2+0x41a>
    39a8:	14 c0       	rjmp	.+40     	; 0x39d2 <Animation2+0x46a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39aa:	6b a1       	ldd	r22, Y+35	; 0x23
    39ac:	7c a1       	ldd	r23, Y+36	; 0x24
    39ae:	8d a1       	ldd	r24, Y+37	; 0x25
    39b0:	9e a1       	ldd	r25, Y+38	; 0x26
    39b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b6:	dc 01       	movw	r26, r24
    39b8:	cb 01       	movw	r24, r22
    39ba:	9a a3       	std	Y+34, r25	; 0x22
    39bc:	89 a3       	std	Y+33, r24	; 0x21
    39be:	89 a1       	ldd	r24, Y+33	; 0x21
    39c0:	9a a1       	ldd	r25, Y+34	; 0x22
    39c2:	9e 8f       	std	Y+30, r25	; 0x1e
    39c4:	8d 8f       	std	Y+29, r24	; 0x1d
    39c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39ca:	01 97       	sbiw	r24, 0x01	; 1
    39cc:	f1 f7       	brne	.-4      	; 0x39ca <Animation2+0x462>
    39ce:	9e 8f       	std	Y+30, r25	; 0x1e
    39d0:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(500);
    H_Led_void_setON(GRN_LED);
    39d2:	81 e0       	ldi	r24, 0x01	; 1
    39d4:	0e 94 e7 16 	call	0x2dce	; 0x2dce <H_Led_void_setON>
    39d8:	80 e0       	ldi	r24, 0x00	; 0
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	aa ef       	ldi	r26, 0xFA	; 250
    39de:	b3 e4       	ldi	r27, 0x43	; 67
    39e0:	89 8f       	std	Y+25, r24	; 0x19
    39e2:	9a 8f       	std	Y+26, r25	; 0x1a
    39e4:	ab 8f       	std	Y+27, r26	; 0x1b
    39e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39e8:	69 8d       	ldd	r22, Y+25	; 0x19
    39ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	4a e7       	ldi	r20, 0x7A	; 122
    39f6:	55 e4       	ldi	r21, 0x45	; 69
    39f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39fc:	dc 01       	movw	r26, r24
    39fe:	cb 01       	movw	r24, r22
    3a00:	8d 8b       	std	Y+21, r24	; 0x15
    3a02:	9e 8b       	std	Y+22, r25	; 0x16
    3a04:	af 8b       	std	Y+23, r26	; 0x17
    3a06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a08:	6d 89       	ldd	r22, Y+21	; 0x15
    3a0a:	7e 89       	ldd	r23, Y+22	; 0x16
    3a0c:	8f 89       	ldd	r24, Y+23	; 0x17
    3a0e:	98 8d       	ldd	r25, Y+24	; 0x18
    3a10:	20 e0       	ldi	r18, 0x00	; 0
    3a12:	30 e0       	ldi	r19, 0x00	; 0
    3a14:	40 e8       	ldi	r20, 0x80	; 128
    3a16:	5f e3       	ldi	r21, 0x3F	; 63
    3a18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a1c:	88 23       	and	r24, r24
    3a1e:	2c f4       	brge	.+10     	; 0x3a2a <Animation2+0x4c2>
		__ticks = 1;
    3a20:	81 e0       	ldi	r24, 0x01	; 1
    3a22:	90 e0       	ldi	r25, 0x00	; 0
    3a24:	9c 8b       	std	Y+20, r25	; 0x14
    3a26:	8b 8b       	std	Y+19, r24	; 0x13
    3a28:	3f c0       	rjmp	.+126    	; 0x3aa8 <Animation2+0x540>
	else if (__tmp > 65535)
    3a2a:	6d 89       	ldd	r22, Y+21	; 0x15
    3a2c:	7e 89       	ldd	r23, Y+22	; 0x16
    3a2e:	8f 89       	ldd	r24, Y+23	; 0x17
    3a30:	98 8d       	ldd	r25, Y+24	; 0x18
    3a32:	20 e0       	ldi	r18, 0x00	; 0
    3a34:	3f ef       	ldi	r19, 0xFF	; 255
    3a36:	4f e7       	ldi	r20, 0x7F	; 127
    3a38:	57 e4       	ldi	r21, 0x47	; 71
    3a3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a3e:	18 16       	cp	r1, r24
    3a40:	4c f5       	brge	.+82     	; 0x3a94 <Animation2+0x52c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a42:	69 8d       	ldd	r22, Y+25	; 0x19
    3a44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a4a:	20 e0       	ldi	r18, 0x00	; 0
    3a4c:	30 e0       	ldi	r19, 0x00	; 0
    3a4e:	40 e2       	ldi	r20, 0x20	; 32
    3a50:	51 e4       	ldi	r21, 0x41	; 65
    3a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a56:	dc 01       	movw	r26, r24
    3a58:	cb 01       	movw	r24, r22
    3a5a:	bc 01       	movw	r22, r24
    3a5c:	cd 01       	movw	r24, r26
    3a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a62:	dc 01       	movw	r26, r24
    3a64:	cb 01       	movw	r24, r22
    3a66:	9c 8b       	std	Y+20, r25	; 0x14
    3a68:	8b 8b       	std	Y+19, r24	; 0x13
    3a6a:	0f c0       	rjmp	.+30     	; 0x3a8a <Animation2+0x522>
    3a6c:	80 e9       	ldi	r24, 0x90	; 144
    3a6e:	91 e0       	ldi	r25, 0x01	; 1
    3a70:	9a 8b       	std	Y+18, r25	; 0x12
    3a72:	89 8b       	std	Y+17, r24	; 0x11
    3a74:	89 89       	ldd	r24, Y+17	; 0x11
    3a76:	9a 89       	ldd	r25, Y+18	; 0x12
    3a78:	01 97       	sbiw	r24, 0x01	; 1
    3a7a:	f1 f7       	brne	.-4      	; 0x3a78 <Animation2+0x510>
    3a7c:	9a 8b       	std	Y+18, r25	; 0x12
    3a7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a80:	8b 89       	ldd	r24, Y+19	; 0x13
    3a82:	9c 89       	ldd	r25, Y+20	; 0x14
    3a84:	01 97       	sbiw	r24, 0x01	; 1
    3a86:	9c 8b       	std	Y+20, r25	; 0x14
    3a88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a8a:	8b 89       	ldd	r24, Y+19	; 0x13
    3a8c:	9c 89       	ldd	r25, Y+20	; 0x14
    3a8e:	00 97       	sbiw	r24, 0x00	; 0
    3a90:	69 f7       	brne	.-38     	; 0x3a6c <Animation2+0x504>
    3a92:	14 c0       	rjmp	.+40     	; 0x3abc <Animation2+0x554>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a94:	6d 89       	ldd	r22, Y+21	; 0x15
    3a96:	7e 89       	ldd	r23, Y+22	; 0x16
    3a98:	8f 89       	ldd	r24, Y+23	; 0x17
    3a9a:	98 8d       	ldd	r25, Y+24	; 0x18
    3a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa0:	dc 01       	movw	r26, r24
    3aa2:	cb 01       	movw	r24, r22
    3aa4:	9c 8b       	std	Y+20, r25	; 0x14
    3aa6:	8b 8b       	std	Y+19, r24	; 0x13
    3aa8:	8b 89       	ldd	r24, Y+19	; 0x13
    3aaa:	9c 89       	ldd	r25, Y+20	; 0x14
    3aac:	98 8b       	std	Y+16, r25	; 0x10
    3aae:	8f 87       	std	Y+15, r24	; 0x0f
    3ab0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ab2:	98 89       	ldd	r25, Y+16	; 0x10
    3ab4:	01 97       	sbiw	r24, 0x01	; 1
    3ab6:	f1 f7       	brne	.-4      	; 0x3ab4 <Animation2+0x54c>
    3ab8:	98 8b       	std	Y+16, r25	; 0x10
    3aba:	8f 87       	std	Y+15, r24	; 0x0f
     _delay_ms(500);
    H_Led_void_setOFF(GRN_LED);
    3abc:	81 e0       	ldi	r24, 0x01	; 1
    3abe:	0e 94 18 17 	call	0x2e30	; 0x2e30 <H_Led_void_setOFF>
    3ac2:	80 e0       	ldi	r24, 0x00	; 0
    3ac4:	90 e0       	ldi	r25, 0x00	; 0
    3ac6:	aa ef       	ldi	r26, 0xFA	; 250
    3ac8:	b3 e4       	ldi	r27, 0x43	; 67
    3aca:	8b 87       	std	Y+11, r24	; 0x0b
    3acc:	9c 87       	std	Y+12, r25	; 0x0c
    3ace:	ad 87       	std	Y+13, r26	; 0x0d
    3ad0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ad2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ad4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ad6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ad8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ada:	20 e0       	ldi	r18, 0x00	; 0
    3adc:	30 e0       	ldi	r19, 0x00	; 0
    3ade:	4a e7       	ldi	r20, 0x7A	; 122
    3ae0:	55 e4       	ldi	r21, 0x45	; 69
    3ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae6:	dc 01       	movw	r26, r24
    3ae8:	cb 01       	movw	r24, r22
    3aea:	8f 83       	std	Y+7, r24	; 0x07
    3aec:	98 87       	std	Y+8, r25	; 0x08
    3aee:	a9 87       	std	Y+9, r26	; 0x09
    3af0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3af2:	6f 81       	ldd	r22, Y+7	; 0x07
    3af4:	78 85       	ldd	r23, Y+8	; 0x08
    3af6:	89 85       	ldd	r24, Y+9	; 0x09
    3af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3afa:	20 e0       	ldi	r18, 0x00	; 0
    3afc:	30 e0       	ldi	r19, 0x00	; 0
    3afe:	40 e8       	ldi	r20, 0x80	; 128
    3b00:	5f e3       	ldi	r21, 0x3F	; 63
    3b02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b06:	88 23       	and	r24, r24
    3b08:	2c f4       	brge	.+10     	; 0x3b14 <Animation2+0x5ac>
		__ticks = 1;
    3b0a:	81 e0       	ldi	r24, 0x01	; 1
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	9e 83       	std	Y+6, r25	; 0x06
    3b10:	8d 83       	std	Y+5, r24	; 0x05
    3b12:	3f c0       	rjmp	.+126    	; 0x3b92 <Animation2+0x62a>
	else if (__tmp > 65535)
    3b14:	6f 81       	ldd	r22, Y+7	; 0x07
    3b16:	78 85       	ldd	r23, Y+8	; 0x08
    3b18:	89 85       	ldd	r24, Y+9	; 0x09
    3b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b1c:	20 e0       	ldi	r18, 0x00	; 0
    3b1e:	3f ef       	ldi	r19, 0xFF	; 255
    3b20:	4f e7       	ldi	r20, 0x7F	; 127
    3b22:	57 e4       	ldi	r21, 0x47	; 71
    3b24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b28:	18 16       	cp	r1, r24
    3b2a:	4c f5       	brge	.+82     	; 0x3b7e <Animation2+0x616>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b30:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b32:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b34:	20 e0       	ldi	r18, 0x00	; 0
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	40 e2       	ldi	r20, 0x20	; 32
    3b3a:	51 e4       	ldi	r21, 0x41	; 65
    3b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b40:	dc 01       	movw	r26, r24
    3b42:	cb 01       	movw	r24, r22
    3b44:	bc 01       	movw	r22, r24
    3b46:	cd 01       	movw	r24, r26
    3b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b4c:	dc 01       	movw	r26, r24
    3b4e:	cb 01       	movw	r24, r22
    3b50:	9e 83       	std	Y+6, r25	; 0x06
    3b52:	8d 83       	std	Y+5, r24	; 0x05
    3b54:	0f c0       	rjmp	.+30     	; 0x3b74 <Animation2+0x60c>
    3b56:	80 e9       	ldi	r24, 0x90	; 144
    3b58:	91 e0       	ldi	r25, 0x01	; 1
    3b5a:	9c 83       	std	Y+4, r25	; 0x04
    3b5c:	8b 83       	std	Y+3, r24	; 0x03
    3b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b60:	9c 81       	ldd	r25, Y+4	; 0x04
    3b62:	01 97       	sbiw	r24, 0x01	; 1
    3b64:	f1 f7       	brne	.-4      	; 0x3b62 <Animation2+0x5fa>
    3b66:	9c 83       	std	Y+4, r25	; 0x04
    3b68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b6e:	01 97       	sbiw	r24, 0x01	; 1
    3b70:	9e 83       	std	Y+6, r25	; 0x06
    3b72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b74:	8d 81       	ldd	r24, Y+5	; 0x05
    3b76:	9e 81       	ldd	r25, Y+6	; 0x06
    3b78:	00 97       	sbiw	r24, 0x00	; 0
    3b7a:	69 f7       	brne	.-38     	; 0x3b56 <Animation2+0x5ee>
    3b7c:	14 c0       	rjmp	.+40     	; 0x3ba6 <Animation2+0x63e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b7e:	6f 81       	ldd	r22, Y+7	; 0x07
    3b80:	78 85       	ldd	r23, Y+8	; 0x08
    3b82:	89 85       	ldd	r24, Y+9	; 0x09
    3b84:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b8a:	dc 01       	movw	r26, r24
    3b8c:	cb 01       	movw	r24, r22
    3b8e:	9e 83       	std	Y+6, r25	; 0x06
    3b90:	8d 83       	std	Y+5, r24	; 0x05
    3b92:	8d 81       	ldd	r24, Y+5	; 0x05
    3b94:	9e 81       	ldd	r25, Y+6	; 0x06
    3b96:	9a 83       	std	Y+2, r25	; 0x02
    3b98:	89 83       	std	Y+1, r24	; 0x01
    3b9a:	89 81       	ldd	r24, Y+1	; 0x01
    3b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b9e:	01 97       	sbiw	r24, 0x01	; 1
    3ba0:	f1 f7       	brne	.-4      	; 0x3b9e <Animation2+0x636>
    3ba2:	9a 83       	std	Y+2, r25	; 0x02
    3ba4:	89 83       	std	Y+1, r24	; 0x01
     _delay_ms(500);

}
    3ba6:	cc 5a       	subi	r28, 0xAC	; 172
    3ba8:	df 4f       	sbci	r29, 0xFF	; 255
    3baa:	0f b6       	in	r0, 0x3f	; 63
    3bac:	f8 94       	cli
    3bae:	de bf       	out	0x3e, r29	; 62
    3bb0:	0f be       	out	0x3f, r0	; 63
    3bb2:	cd bf       	out	0x3d, r28	; 61
    3bb4:	cf 91       	pop	r28
    3bb6:	df 91       	pop	r29
    3bb8:	1f 91       	pop	r17
    3bba:	0f 91       	pop	r16
    3bbc:	08 95       	ret

00003bbe <Animation3>:
void Animation3()
{
    3bbe:	df 93       	push	r29
    3bc0:	cf 93       	push	r28
    3bc2:	cd b7       	in	r28, 0x3d	; 61
    3bc4:	de b7       	in	r29, 0x3e	; 62
    3bc6:	6c 97       	sbiw	r28, 0x1c	; 28
    3bc8:	0f b6       	in	r0, 0x3f	; 63
    3bca:	f8 94       	cli
    3bcc:	de bf       	out	0x3e, r29	; 62
    3bce:	0f be       	out	0x3f, r0	; 63
    3bd0:	cd bf       	out	0x3d, r28	; 61
	H_Led_void_setON(RED_LED);
    3bd2:	80 e0       	ldi	r24, 0x00	; 0
    3bd4:	0e 94 e7 16 	call	0x2dce	; 0x2dce <H_Led_void_setON>
	H_Led_void_setON(BLU_LED);
    3bd8:	82 e0       	ldi	r24, 0x02	; 2
    3bda:	0e 94 e7 16 	call	0x2dce	; 0x2dce <H_Led_void_setON>
	H_Led_void_setON(GRN_LED);
    3bde:	81 e0       	ldi	r24, 0x01	; 1
    3be0:	0e 94 e7 16 	call	0x2dce	; 0x2dce <H_Led_void_setON>
    3be4:	80 e0       	ldi	r24, 0x00	; 0
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	aa ef       	ldi	r26, 0xFA	; 250
    3bea:	b3 e4       	ldi	r27, 0x43	; 67
    3bec:	89 8f       	std	Y+25, r24	; 0x19
    3bee:	9a 8f       	std	Y+26, r25	; 0x1a
    3bf0:	ab 8f       	std	Y+27, r26	; 0x1b
    3bf2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bf4:	69 8d       	ldd	r22, Y+25	; 0x19
    3bf6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bfc:	20 e0       	ldi	r18, 0x00	; 0
    3bfe:	30 e0       	ldi	r19, 0x00	; 0
    3c00:	4a e7       	ldi	r20, 0x7A	; 122
    3c02:	55 e4       	ldi	r21, 0x45	; 69
    3c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c08:	dc 01       	movw	r26, r24
    3c0a:	cb 01       	movw	r24, r22
    3c0c:	8d 8b       	std	Y+21, r24	; 0x15
    3c0e:	9e 8b       	std	Y+22, r25	; 0x16
    3c10:	af 8b       	std	Y+23, r26	; 0x17
    3c12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c14:	6d 89       	ldd	r22, Y+21	; 0x15
    3c16:	7e 89       	ldd	r23, Y+22	; 0x16
    3c18:	8f 89       	ldd	r24, Y+23	; 0x17
    3c1a:	98 8d       	ldd	r25, Y+24	; 0x18
    3c1c:	20 e0       	ldi	r18, 0x00	; 0
    3c1e:	30 e0       	ldi	r19, 0x00	; 0
    3c20:	40 e8       	ldi	r20, 0x80	; 128
    3c22:	5f e3       	ldi	r21, 0x3F	; 63
    3c24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c28:	88 23       	and	r24, r24
    3c2a:	2c f4       	brge	.+10     	; 0x3c36 <Animation3+0x78>
		__ticks = 1;
    3c2c:	81 e0       	ldi	r24, 0x01	; 1
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	9c 8b       	std	Y+20, r25	; 0x14
    3c32:	8b 8b       	std	Y+19, r24	; 0x13
    3c34:	3f c0       	rjmp	.+126    	; 0x3cb4 <Animation3+0xf6>
	else if (__tmp > 65535)
    3c36:	6d 89       	ldd	r22, Y+21	; 0x15
    3c38:	7e 89       	ldd	r23, Y+22	; 0x16
    3c3a:	8f 89       	ldd	r24, Y+23	; 0x17
    3c3c:	98 8d       	ldd	r25, Y+24	; 0x18
    3c3e:	20 e0       	ldi	r18, 0x00	; 0
    3c40:	3f ef       	ldi	r19, 0xFF	; 255
    3c42:	4f e7       	ldi	r20, 0x7F	; 127
    3c44:	57 e4       	ldi	r21, 0x47	; 71
    3c46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c4a:	18 16       	cp	r1, r24
    3c4c:	4c f5       	brge	.+82     	; 0x3ca0 <Animation3+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c4e:	69 8d       	ldd	r22, Y+25	; 0x19
    3c50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c56:	20 e0       	ldi	r18, 0x00	; 0
    3c58:	30 e0       	ldi	r19, 0x00	; 0
    3c5a:	40 e2       	ldi	r20, 0x20	; 32
    3c5c:	51 e4       	ldi	r21, 0x41	; 65
    3c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c62:	dc 01       	movw	r26, r24
    3c64:	cb 01       	movw	r24, r22
    3c66:	bc 01       	movw	r22, r24
    3c68:	cd 01       	movw	r24, r26
    3c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c6e:	dc 01       	movw	r26, r24
    3c70:	cb 01       	movw	r24, r22
    3c72:	9c 8b       	std	Y+20, r25	; 0x14
    3c74:	8b 8b       	std	Y+19, r24	; 0x13
    3c76:	0f c0       	rjmp	.+30     	; 0x3c96 <Animation3+0xd8>
    3c78:	80 e9       	ldi	r24, 0x90	; 144
    3c7a:	91 e0       	ldi	r25, 0x01	; 1
    3c7c:	9a 8b       	std	Y+18, r25	; 0x12
    3c7e:	89 8b       	std	Y+17, r24	; 0x11
    3c80:	89 89       	ldd	r24, Y+17	; 0x11
    3c82:	9a 89       	ldd	r25, Y+18	; 0x12
    3c84:	01 97       	sbiw	r24, 0x01	; 1
    3c86:	f1 f7       	brne	.-4      	; 0x3c84 <Animation3+0xc6>
    3c88:	9a 8b       	std	Y+18, r25	; 0x12
    3c8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c8c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c8e:	9c 89       	ldd	r25, Y+20	; 0x14
    3c90:	01 97       	sbiw	r24, 0x01	; 1
    3c92:	9c 8b       	std	Y+20, r25	; 0x14
    3c94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c96:	8b 89       	ldd	r24, Y+19	; 0x13
    3c98:	9c 89       	ldd	r25, Y+20	; 0x14
    3c9a:	00 97       	sbiw	r24, 0x00	; 0
    3c9c:	69 f7       	brne	.-38     	; 0x3c78 <Animation3+0xba>
    3c9e:	14 c0       	rjmp	.+40     	; 0x3cc8 <Animation3+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ca0:	6d 89       	ldd	r22, Y+21	; 0x15
    3ca2:	7e 89       	ldd	r23, Y+22	; 0x16
    3ca4:	8f 89       	ldd	r24, Y+23	; 0x17
    3ca6:	98 8d       	ldd	r25, Y+24	; 0x18
    3ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cac:	dc 01       	movw	r26, r24
    3cae:	cb 01       	movw	r24, r22
    3cb0:	9c 8b       	std	Y+20, r25	; 0x14
    3cb2:	8b 8b       	std	Y+19, r24	; 0x13
    3cb4:	8b 89       	ldd	r24, Y+19	; 0x13
    3cb6:	9c 89       	ldd	r25, Y+20	; 0x14
    3cb8:	98 8b       	std	Y+16, r25	; 0x10
    3cba:	8f 87       	std	Y+15, r24	; 0x0f
    3cbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cbe:	98 89       	ldd	r25, Y+16	; 0x10
    3cc0:	01 97       	sbiw	r24, 0x01	; 1
    3cc2:	f1 f7       	brne	.-4      	; 0x3cc0 <Animation3+0x102>
    3cc4:	98 8b       	std	Y+16, r25	; 0x10
    3cc6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	H_Led_void_setOFF(RED_LED);
    3cc8:	80 e0       	ldi	r24, 0x00	; 0
    3cca:	0e 94 18 17 	call	0x2e30	; 0x2e30 <H_Led_void_setOFF>
	H_Led_void_setOFF(BLU_LED);
    3cce:	82 e0       	ldi	r24, 0x02	; 2
    3cd0:	0e 94 18 17 	call	0x2e30	; 0x2e30 <H_Led_void_setOFF>
	H_Led_void_setOFF(GRN_LED);
    3cd4:	81 e0       	ldi	r24, 0x01	; 1
    3cd6:	0e 94 18 17 	call	0x2e30	; 0x2e30 <H_Led_void_setOFF>
    3cda:	80 e0       	ldi	r24, 0x00	; 0
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	aa ef       	ldi	r26, 0xFA	; 250
    3ce0:	b3 e4       	ldi	r27, 0x43	; 67
    3ce2:	8b 87       	std	Y+11, r24	; 0x0b
    3ce4:	9c 87       	std	Y+12, r25	; 0x0c
    3ce6:	ad 87       	std	Y+13, r26	; 0x0d
    3ce8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cea:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cec:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cee:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cf2:	20 e0       	ldi	r18, 0x00	; 0
    3cf4:	30 e0       	ldi	r19, 0x00	; 0
    3cf6:	4a e7       	ldi	r20, 0x7A	; 122
    3cf8:	55 e4       	ldi	r21, 0x45	; 69
    3cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cfe:	dc 01       	movw	r26, r24
    3d00:	cb 01       	movw	r24, r22
    3d02:	8f 83       	std	Y+7, r24	; 0x07
    3d04:	98 87       	std	Y+8, r25	; 0x08
    3d06:	a9 87       	std	Y+9, r26	; 0x09
    3d08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d0a:	6f 81       	ldd	r22, Y+7	; 0x07
    3d0c:	78 85       	ldd	r23, Y+8	; 0x08
    3d0e:	89 85       	ldd	r24, Y+9	; 0x09
    3d10:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d12:	20 e0       	ldi	r18, 0x00	; 0
    3d14:	30 e0       	ldi	r19, 0x00	; 0
    3d16:	40 e8       	ldi	r20, 0x80	; 128
    3d18:	5f e3       	ldi	r21, 0x3F	; 63
    3d1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d1e:	88 23       	and	r24, r24
    3d20:	2c f4       	brge	.+10     	; 0x3d2c <Animation3+0x16e>
		__ticks = 1;
    3d22:	81 e0       	ldi	r24, 0x01	; 1
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	9e 83       	std	Y+6, r25	; 0x06
    3d28:	8d 83       	std	Y+5, r24	; 0x05
    3d2a:	3f c0       	rjmp	.+126    	; 0x3daa <Animation3+0x1ec>
	else if (__tmp > 65535)
    3d2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d2e:	78 85       	ldd	r23, Y+8	; 0x08
    3d30:	89 85       	ldd	r24, Y+9	; 0x09
    3d32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d34:	20 e0       	ldi	r18, 0x00	; 0
    3d36:	3f ef       	ldi	r19, 0xFF	; 255
    3d38:	4f e7       	ldi	r20, 0x7F	; 127
    3d3a:	57 e4       	ldi	r21, 0x47	; 71
    3d3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d40:	18 16       	cp	r1, r24
    3d42:	4c f5       	brge	.+82     	; 0x3d96 <Animation3+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d44:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d46:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d48:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d4c:	20 e0       	ldi	r18, 0x00	; 0
    3d4e:	30 e0       	ldi	r19, 0x00	; 0
    3d50:	40 e2       	ldi	r20, 0x20	; 32
    3d52:	51 e4       	ldi	r21, 0x41	; 65
    3d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d58:	dc 01       	movw	r26, r24
    3d5a:	cb 01       	movw	r24, r22
    3d5c:	bc 01       	movw	r22, r24
    3d5e:	cd 01       	movw	r24, r26
    3d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d64:	dc 01       	movw	r26, r24
    3d66:	cb 01       	movw	r24, r22
    3d68:	9e 83       	std	Y+6, r25	; 0x06
    3d6a:	8d 83       	std	Y+5, r24	; 0x05
    3d6c:	0f c0       	rjmp	.+30     	; 0x3d8c <Animation3+0x1ce>
    3d6e:	80 e9       	ldi	r24, 0x90	; 144
    3d70:	91 e0       	ldi	r25, 0x01	; 1
    3d72:	9c 83       	std	Y+4, r25	; 0x04
    3d74:	8b 83       	std	Y+3, r24	; 0x03
    3d76:	8b 81       	ldd	r24, Y+3	; 0x03
    3d78:	9c 81       	ldd	r25, Y+4	; 0x04
    3d7a:	01 97       	sbiw	r24, 0x01	; 1
    3d7c:	f1 f7       	brne	.-4      	; 0x3d7a <Animation3+0x1bc>
    3d7e:	9c 83       	std	Y+4, r25	; 0x04
    3d80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d82:	8d 81       	ldd	r24, Y+5	; 0x05
    3d84:	9e 81       	ldd	r25, Y+6	; 0x06
    3d86:	01 97       	sbiw	r24, 0x01	; 1
    3d88:	9e 83       	std	Y+6, r25	; 0x06
    3d8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d90:	00 97       	sbiw	r24, 0x00	; 0
    3d92:	69 f7       	brne	.-38     	; 0x3d6e <Animation3+0x1b0>
    3d94:	14 c0       	rjmp	.+40     	; 0x3dbe <Animation3+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d96:	6f 81       	ldd	r22, Y+7	; 0x07
    3d98:	78 85       	ldd	r23, Y+8	; 0x08
    3d9a:	89 85       	ldd	r24, Y+9	; 0x09
    3d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3da2:	dc 01       	movw	r26, r24
    3da4:	cb 01       	movw	r24, r22
    3da6:	9e 83       	std	Y+6, r25	; 0x06
    3da8:	8d 83       	std	Y+5, r24	; 0x05
    3daa:	8d 81       	ldd	r24, Y+5	; 0x05
    3dac:	9e 81       	ldd	r25, Y+6	; 0x06
    3dae:	9a 83       	std	Y+2, r25	; 0x02
    3db0:	89 83       	std	Y+1, r24	; 0x01
    3db2:	89 81       	ldd	r24, Y+1	; 0x01
    3db4:	9a 81       	ldd	r25, Y+2	; 0x02
    3db6:	01 97       	sbiw	r24, 0x01	; 1
    3db8:	f1 f7       	brne	.-4      	; 0x3db6 <Animation3+0x1f8>
    3dba:	9a 83       	std	Y+2, r25	; 0x02
    3dbc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);

}
    3dbe:	6c 96       	adiw	r28, 0x1c	; 28
    3dc0:	0f b6       	in	r0, 0x3f	; 63
    3dc2:	f8 94       	cli
    3dc4:	de bf       	out	0x3e, r29	; 62
    3dc6:	0f be       	out	0x3f, r0	; 63
    3dc8:	cd bf       	out	0x3d, r28	; 61
    3dca:	cf 91       	pop	r28
    3dcc:	df 91       	pop	r29
    3dce:	08 95       	ret

00003dd0 <H_LCD_void_Init>:

#include "LCD_priv.h"
#include "LCD_config.h"
#include "LCD_int.h"
void H_LCD_void_Init(void)
{
    3dd0:	df 93       	push	r29
    3dd2:	cf 93       	push	r28
    3dd4:	cd b7       	in	r28, 0x3d	; 61
    3dd6:	de b7       	in	r29, 0x3e	; 62
    3dd8:	aa 97       	sbiw	r28, 0x2a	; 42
    3dda:	0f b6       	in	r0, 0x3f	; 63
    3ddc:	f8 94       	cli
    3dde:	de bf       	out	0x3e, r29	; 62
    3de0:	0f be       	out	0x3f, r0	; 63
    3de2:	cd bf       	out	0x3d, r28	; 61

	// set direction Rs, EN
	M_DIO_void_setPinDir(LCD_RS_PORT, LCD_RS_PIN,OUT);
    3de4:	80 e0       	ldi	r24, 0x00	; 0
    3de6:	61 e0       	ldi	r22, 0x01	; 1
    3de8:	41 e0       	ldi	r20, 0x01	; 1
    3dea:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_EN_PORT,LCD_EN_PIN,OUT);
    3dee:	80 e0       	ldi	r24, 0x00	; 0
    3df0:	62 e0       	ldi	r22, 0x02	; 2
    3df2:	41 e0       	ldi	r20, 0x01	; 1
    3df4:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>
	//set direction D4 .. D7
	M_DIO_void_setPinDir(LCD_D7_PORT,LCD_D7_PIN,OUT);
    3df8:	80 e0       	ldi	r24, 0x00	; 0
    3dfa:	66 e0       	ldi	r22, 0x06	; 6
    3dfc:	41 e0       	ldi	r20, 0x01	; 1
    3dfe:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D6_PORT,LCD_D6_PIN,OUT);
    3e02:	80 e0       	ldi	r24, 0x00	; 0
    3e04:	65 e0       	ldi	r22, 0x05	; 5
    3e06:	41 e0       	ldi	r20, 0x01	; 1
    3e08:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D5_PORT,LCD_D5_PIN,OUT);
    3e0c:	80 e0       	ldi	r24, 0x00	; 0
    3e0e:	64 e0       	ldi	r22, 0x04	; 4
    3e10:	41 e0       	ldi	r20, 0x01	; 1
    3e12:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D4_PORT,LCD_D4_PIN,OUT);
    3e16:	80 e0       	ldi	r24, 0x00	; 0
    3e18:	63 e0       	ldi	r22, 0x03	; 3
    3e1a:	41 e0       	ldi	r20, 0x01	; 1
    3e1c:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>
    3e20:	80 e0       	ldi	r24, 0x00	; 0
    3e22:	90 e0       	ldi	r25, 0x00	; 0
    3e24:	ac e0       	ldi	r26, 0x0C	; 12
    3e26:	b2 e4       	ldi	r27, 0x42	; 66
    3e28:	8f a3       	std	Y+39, r24	; 0x27
    3e2a:	98 a7       	std	Y+40, r25	; 0x28
    3e2c:	a9 a7       	std	Y+41, r26	; 0x29
    3e2e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e30:	6f a1       	ldd	r22, Y+39	; 0x27
    3e32:	78 a5       	ldd	r23, Y+40	; 0x28
    3e34:	89 a5       	ldd	r24, Y+41	; 0x29
    3e36:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e38:	20 e0       	ldi	r18, 0x00	; 0
    3e3a:	30 e0       	ldi	r19, 0x00	; 0
    3e3c:	4a e7       	ldi	r20, 0x7A	; 122
    3e3e:	55 e4       	ldi	r21, 0x45	; 69
    3e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e44:	dc 01       	movw	r26, r24
    3e46:	cb 01       	movw	r24, r22
    3e48:	8b a3       	std	Y+35, r24	; 0x23
    3e4a:	9c a3       	std	Y+36, r25	; 0x24
    3e4c:	ad a3       	std	Y+37, r26	; 0x25
    3e4e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3e50:	6b a1       	ldd	r22, Y+35	; 0x23
    3e52:	7c a1       	ldd	r23, Y+36	; 0x24
    3e54:	8d a1       	ldd	r24, Y+37	; 0x25
    3e56:	9e a1       	ldd	r25, Y+38	; 0x26
    3e58:	20 e0       	ldi	r18, 0x00	; 0
    3e5a:	30 e0       	ldi	r19, 0x00	; 0
    3e5c:	40 e8       	ldi	r20, 0x80	; 128
    3e5e:	5f e3       	ldi	r21, 0x3F	; 63
    3e60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e64:	88 23       	and	r24, r24
    3e66:	2c f4       	brge	.+10     	; 0x3e72 <H_LCD_void_Init+0xa2>
		__ticks = 1;
    3e68:	81 e0       	ldi	r24, 0x01	; 1
    3e6a:	90 e0       	ldi	r25, 0x00	; 0
    3e6c:	9a a3       	std	Y+34, r25	; 0x22
    3e6e:	89 a3       	std	Y+33, r24	; 0x21
    3e70:	3f c0       	rjmp	.+126    	; 0x3ef0 <H_LCD_void_Init+0x120>
	else if (__tmp > 65535)
    3e72:	6b a1       	ldd	r22, Y+35	; 0x23
    3e74:	7c a1       	ldd	r23, Y+36	; 0x24
    3e76:	8d a1       	ldd	r24, Y+37	; 0x25
    3e78:	9e a1       	ldd	r25, Y+38	; 0x26
    3e7a:	20 e0       	ldi	r18, 0x00	; 0
    3e7c:	3f ef       	ldi	r19, 0xFF	; 255
    3e7e:	4f e7       	ldi	r20, 0x7F	; 127
    3e80:	57 e4       	ldi	r21, 0x47	; 71
    3e82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e86:	18 16       	cp	r1, r24
    3e88:	4c f5       	brge	.+82     	; 0x3edc <H_LCD_void_Init+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e8a:	6f a1       	ldd	r22, Y+39	; 0x27
    3e8c:	78 a5       	ldd	r23, Y+40	; 0x28
    3e8e:	89 a5       	ldd	r24, Y+41	; 0x29
    3e90:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e92:	20 e0       	ldi	r18, 0x00	; 0
    3e94:	30 e0       	ldi	r19, 0x00	; 0
    3e96:	40 e2       	ldi	r20, 0x20	; 32
    3e98:	51 e4       	ldi	r21, 0x41	; 65
    3e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e9e:	dc 01       	movw	r26, r24
    3ea0:	cb 01       	movw	r24, r22
    3ea2:	bc 01       	movw	r22, r24
    3ea4:	cd 01       	movw	r24, r26
    3ea6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eaa:	dc 01       	movw	r26, r24
    3eac:	cb 01       	movw	r24, r22
    3eae:	9a a3       	std	Y+34, r25	; 0x22
    3eb0:	89 a3       	std	Y+33, r24	; 0x21
    3eb2:	0f c0       	rjmp	.+30     	; 0x3ed2 <H_LCD_void_Init+0x102>
    3eb4:	80 e9       	ldi	r24, 0x90	; 144
    3eb6:	91 e0       	ldi	r25, 0x01	; 1
    3eb8:	98 a3       	std	Y+32, r25	; 0x20
    3eba:	8f 8f       	std	Y+31, r24	; 0x1f
    3ebc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ebe:	98 a1       	ldd	r25, Y+32	; 0x20
    3ec0:	01 97       	sbiw	r24, 0x01	; 1
    3ec2:	f1 f7       	brne	.-4      	; 0x3ec0 <H_LCD_void_Init+0xf0>
    3ec4:	98 a3       	std	Y+32, r25	; 0x20
    3ec6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ec8:	89 a1       	ldd	r24, Y+33	; 0x21
    3eca:	9a a1       	ldd	r25, Y+34	; 0x22
    3ecc:	01 97       	sbiw	r24, 0x01	; 1
    3ece:	9a a3       	std	Y+34, r25	; 0x22
    3ed0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ed2:	89 a1       	ldd	r24, Y+33	; 0x21
    3ed4:	9a a1       	ldd	r25, Y+34	; 0x22
    3ed6:	00 97       	sbiw	r24, 0x00	; 0
    3ed8:	69 f7       	brne	.-38     	; 0x3eb4 <H_LCD_void_Init+0xe4>
    3eda:	14 c0       	rjmp	.+40     	; 0x3f04 <H_LCD_void_Init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3edc:	6b a1       	ldd	r22, Y+35	; 0x23
    3ede:	7c a1       	ldd	r23, Y+36	; 0x24
    3ee0:	8d a1       	ldd	r24, Y+37	; 0x25
    3ee2:	9e a1       	ldd	r25, Y+38	; 0x26
    3ee4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ee8:	dc 01       	movw	r26, r24
    3eea:	cb 01       	movw	r24, r22
    3eec:	9a a3       	std	Y+34, r25	; 0x22
    3eee:	89 a3       	std	Y+33, r24	; 0x21
    3ef0:	89 a1       	ldd	r24, Y+33	; 0x21
    3ef2:	9a a1       	ldd	r25, Y+34	; 0x22
    3ef4:	9e 8f       	std	Y+30, r25	; 0x1e
    3ef6:	8d 8f       	std	Y+29, r24	; 0x1d
    3ef8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3efa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3efc:	01 97       	sbiw	r24, 0x01	; 1
    3efe:	f1 f7       	brne	.-4      	; 0x3efc <H_LCD_void_Init+0x12c>
    3f00:	9e 8f       	std	Y+30, r25	; 0x1e
    3f02:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(35);
	H_LCD_void_sendCommand(LCD_8BIT_MODE_2LINES_5X7);
#elif(LCD_MODE ==  LCD_4BIT_MODE_)
	_delay_ms(35);
	// Rs = command = 0
	M_DIO_void_setPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);
    3f04:	80 e0       	ldi	r24, 0x00	; 0
    3f06:	61 e0       	ldi	r22, 0x01	; 1
    3f08:	40 e0       	ldi	r20, 0x00	; 0
    3f0a:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
	// EN = 0 disabled
	M_DIO_void_setPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    3f0e:	80 e0       	ldi	r24, 0x00	; 0
    3f10:	62 e0       	ldi	r22, 0x02	; 2
    3f12:	40 e0       	ldi	r20, 0x00	; 0
    3f14:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
	// prepare data
	M_DIO_void_setPinValue(LCD_D7_PORT,LCD_D7_PIN,0);
    3f18:	80 e0       	ldi	r24, 0x00	; 0
    3f1a:	66 e0       	ldi	r22, 0x06	; 6
    3f1c:	40 e0       	ldi	r20, 0x00	; 0
    3f1e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D6_PORT,LCD_D6_PIN,0);
    3f22:	80 e0       	ldi	r24, 0x00	; 0
    3f24:	65 e0       	ldi	r22, 0x05	; 5
    3f26:	40 e0       	ldi	r20, 0x00	; 0
    3f28:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D5_PORT,LCD_D5_PIN,1);
    3f2c:	80 e0       	ldi	r24, 0x00	; 0
    3f2e:	64 e0       	ldi	r22, 0x04	; 4
    3f30:	41 e0       	ldi	r20, 0x01	; 1
    3f32:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D4_PORT,LCD_D4_PIN,0);
    3f36:	80 e0       	ldi	r24, 0x00	; 0
    3f38:	63 e0       	ldi	r22, 0x03	; 3
    3f3a:	40 e0       	ldi	r20, 0x00	; 0
    3f3c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
	//EN = 1
	M_DIO_void_setPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    3f40:	80 e0       	ldi	r24, 0x00	; 0
    3f42:	62 e0       	ldi	r22, 0x02	; 2
    3f44:	41 e0       	ldi	r20, 0x01	; 1
    3f46:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    3f4a:	80 e0       	ldi	r24, 0x00	; 0
    3f4c:	90 e0       	ldi	r25, 0x00	; 0
    3f4e:	a0 e8       	ldi	r26, 0x80	; 128
    3f50:	bf e3       	ldi	r27, 0x3F	; 63
    3f52:	89 8f       	std	Y+25, r24	; 0x19
    3f54:	9a 8f       	std	Y+26, r25	; 0x1a
    3f56:	ab 8f       	std	Y+27, r26	; 0x1b
    3f58:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f5a:	69 8d       	ldd	r22, Y+25	; 0x19
    3f5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f62:	20 e0       	ldi	r18, 0x00	; 0
    3f64:	30 e0       	ldi	r19, 0x00	; 0
    3f66:	4a e7       	ldi	r20, 0x7A	; 122
    3f68:	55 e4       	ldi	r21, 0x45	; 69
    3f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f6e:	dc 01       	movw	r26, r24
    3f70:	cb 01       	movw	r24, r22
    3f72:	8d 8b       	std	Y+21, r24	; 0x15
    3f74:	9e 8b       	std	Y+22, r25	; 0x16
    3f76:	af 8b       	std	Y+23, r26	; 0x17
    3f78:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3f7a:	6d 89       	ldd	r22, Y+21	; 0x15
    3f7c:	7e 89       	ldd	r23, Y+22	; 0x16
    3f7e:	8f 89       	ldd	r24, Y+23	; 0x17
    3f80:	98 8d       	ldd	r25, Y+24	; 0x18
    3f82:	20 e0       	ldi	r18, 0x00	; 0
    3f84:	30 e0       	ldi	r19, 0x00	; 0
    3f86:	40 e8       	ldi	r20, 0x80	; 128
    3f88:	5f e3       	ldi	r21, 0x3F	; 63
    3f8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f8e:	88 23       	and	r24, r24
    3f90:	2c f4       	brge	.+10     	; 0x3f9c <H_LCD_void_Init+0x1cc>
		__ticks = 1;
    3f92:	81 e0       	ldi	r24, 0x01	; 1
    3f94:	90 e0       	ldi	r25, 0x00	; 0
    3f96:	9c 8b       	std	Y+20, r25	; 0x14
    3f98:	8b 8b       	std	Y+19, r24	; 0x13
    3f9a:	3f c0       	rjmp	.+126    	; 0x401a <H_LCD_void_Init+0x24a>
	else if (__tmp > 65535)
    3f9c:	6d 89       	ldd	r22, Y+21	; 0x15
    3f9e:	7e 89       	ldd	r23, Y+22	; 0x16
    3fa0:	8f 89       	ldd	r24, Y+23	; 0x17
    3fa2:	98 8d       	ldd	r25, Y+24	; 0x18
    3fa4:	20 e0       	ldi	r18, 0x00	; 0
    3fa6:	3f ef       	ldi	r19, 0xFF	; 255
    3fa8:	4f e7       	ldi	r20, 0x7F	; 127
    3faa:	57 e4       	ldi	r21, 0x47	; 71
    3fac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fb0:	18 16       	cp	r1, r24
    3fb2:	4c f5       	brge	.+82     	; 0x4006 <H_LCD_void_Init+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fb4:	69 8d       	ldd	r22, Y+25	; 0x19
    3fb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3fb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3fba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3fbc:	20 e0       	ldi	r18, 0x00	; 0
    3fbe:	30 e0       	ldi	r19, 0x00	; 0
    3fc0:	40 e2       	ldi	r20, 0x20	; 32
    3fc2:	51 e4       	ldi	r21, 0x41	; 65
    3fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fc8:	dc 01       	movw	r26, r24
    3fca:	cb 01       	movw	r24, r22
    3fcc:	bc 01       	movw	r22, r24
    3fce:	cd 01       	movw	r24, r26
    3fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fd4:	dc 01       	movw	r26, r24
    3fd6:	cb 01       	movw	r24, r22
    3fd8:	9c 8b       	std	Y+20, r25	; 0x14
    3fda:	8b 8b       	std	Y+19, r24	; 0x13
    3fdc:	0f c0       	rjmp	.+30     	; 0x3ffc <H_LCD_void_Init+0x22c>
    3fde:	80 e9       	ldi	r24, 0x90	; 144
    3fe0:	91 e0       	ldi	r25, 0x01	; 1
    3fe2:	9a 8b       	std	Y+18, r25	; 0x12
    3fe4:	89 8b       	std	Y+17, r24	; 0x11
    3fe6:	89 89       	ldd	r24, Y+17	; 0x11
    3fe8:	9a 89       	ldd	r25, Y+18	; 0x12
    3fea:	01 97       	sbiw	r24, 0x01	; 1
    3fec:	f1 f7       	brne	.-4      	; 0x3fea <H_LCD_void_Init+0x21a>
    3fee:	9a 8b       	std	Y+18, r25	; 0x12
    3ff0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ff2:	8b 89       	ldd	r24, Y+19	; 0x13
    3ff4:	9c 89       	ldd	r25, Y+20	; 0x14
    3ff6:	01 97       	sbiw	r24, 0x01	; 1
    3ff8:	9c 8b       	std	Y+20, r25	; 0x14
    3ffa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ffc:	8b 89       	ldd	r24, Y+19	; 0x13
    3ffe:	9c 89       	ldd	r25, Y+20	; 0x14
    4000:	00 97       	sbiw	r24, 0x00	; 0
    4002:	69 f7       	brne	.-38     	; 0x3fde <H_LCD_void_Init+0x20e>
    4004:	14 c0       	rjmp	.+40     	; 0x402e <H_LCD_void_Init+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4006:	6d 89       	ldd	r22, Y+21	; 0x15
    4008:	7e 89       	ldd	r23, Y+22	; 0x16
    400a:	8f 89       	ldd	r24, Y+23	; 0x17
    400c:	98 8d       	ldd	r25, Y+24	; 0x18
    400e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4012:	dc 01       	movw	r26, r24
    4014:	cb 01       	movw	r24, r22
    4016:	9c 8b       	std	Y+20, r25	; 0x14
    4018:	8b 8b       	std	Y+19, r24	; 0x13
    401a:	8b 89       	ldd	r24, Y+19	; 0x13
    401c:	9c 89       	ldd	r25, Y+20	; 0x14
    401e:	98 8b       	std	Y+16, r25	; 0x10
    4020:	8f 87       	std	Y+15, r24	; 0x0f
    4022:	8f 85       	ldd	r24, Y+15	; 0x0f
    4024:	98 89       	ldd	r25, Y+16	; 0x10
    4026:	01 97       	sbiw	r24, 0x01	; 1
    4028:	f1 f7       	brne	.-4      	; 0x4026 <H_LCD_void_Init+0x256>
    402a:	98 8b       	std	Y+16, r25	; 0x10
    402c:	8f 87       	std	Y+15, r24	; 0x0f
	// delay 1 msec (to allow latching)
	_delay_ms(1);
	// EN = 0
	M_DIO_void_setPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    402e:	80 e0       	ldi	r24, 0x00	; 0
    4030:	62 e0       	ldi	r22, 0x02	; 2
    4032:	40 e0       	ldi	r20, 0x00	; 0
    4034:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    4038:	80 e0       	ldi	r24, 0x00	; 0
    403a:	90 e0       	ldi	r25, 0x00	; 0
    403c:	a0 ea       	ldi	r26, 0xA0	; 160
    403e:	b0 e4       	ldi	r27, 0x40	; 64
    4040:	8b 87       	std	Y+11, r24	; 0x0b
    4042:	9c 87       	std	Y+12, r25	; 0x0c
    4044:	ad 87       	std	Y+13, r26	; 0x0d
    4046:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4048:	6b 85       	ldd	r22, Y+11	; 0x0b
    404a:	7c 85       	ldd	r23, Y+12	; 0x0c
    404c:	8d 85       	ldd	r24, Y+13	; 0x0d
    404e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4050:	20 e0       	ldi	r18, 0x00	; 0
    4052:	30 e0       	ldi	r19, 0x00	; 0
    4054:	4a e7       	ldi	r20, 0x7A	; 122
    4056:	55 e4       	ldi	r21, 0x45	; 69
    4058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    405c:	dc 01       	movw	r26, r24
    405e:	cb 01       	movw	r24, r22
    4060:	8f 83       	std	Y+7, r24	; 0x07
    4062:	98 87       	std	Y+8, r25	; 0x08
    4064:	a9 87       	std	Y+9, r26	; 0x09
    4066:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4068:	6f 81       	ldd	r22, Y+7	; 0x07
    406a:	78 85       	ldd	r23, Y+8	; 0x08
    406c:	89 85       	ldd	r24, Y+9	; 0x09
    406e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4070:	20 e0       	ldi	r18, 0x00	; 0
    4072:	30 e0       	ldi	r19, 0x00	; 0
    4074:	40 e8       	ldi	r20, 0x80	; 128
    4076:	5f e3       	ldi	r21, 0x3F	; 63
    4078:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    407c:	88 23       	and	r24, r24
    407e:	2c f4       	brge	.+10     	; 0x408a <H_LCD_void_Init+0x2ba>
		__ticks = 1;
    4080:	81 e0       	ldi	r24, 0x01	; 1
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	9e 83       	std	Y+6, r25	; 0x06
    4086:	8d 83       	std	Y+5, r24	; 0x05
    4088:	3f c0       	rjmp	.+126    	; 0x4108 <H_LCD_void_Init+0x338>
	else if (__tmp > 65535)
    408a:	6f 81       	ldd	r22, Y+7	; 0x07
    408c:	78 85       	ldd	r23, Y+8	; 0x08
    408e:	89 85       	ldd	r24, Y+9	; 0x09
    4090:	9a 85       	ldd	r25, Y+10	; 0x0a
    4092:	20 e0       	ldi	r18, 0x00	; 0
    4094:	3f ef       	ldi	r19, 0xFF	; 255
    4096:	4f e7       	ldi	r20, 0x7F	; 127
    4098:	57 e4       	ldi	r21, 0x47	; 71
    409a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    409e:	18 16       	cp	r1, r24
    40a0:	4c f5       	brge	.+82     	; 0x40f4 <H_LCD_void_Init+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    40a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    40a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    40a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    40aa:	20 e0       	ldi	r18, 0x00	; 0
    40ac:	30 e0       	ldi	r19, 0x00	; 0
    40ae:	40 e2       	ldi	r20, 0x20	; 32
    40b0:	51 e4       	ldi	r21, 0x41	; 65
    40b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40b6:	dc 01       	movw	r26, r24
    40b8:	cb 01       	movw	r24, r22
    40ba:	bc 01       	movw	r22, r24
    40bc:	cd 01       	movw	r24, r26
    40be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40c2:	dc 01       	movw	r26, r24
    40c4:	cb 01       	movw	r24, r22
    40c6:	9e 83       	std	Y+6, r25	; 0x06
    40c8:	8d 83       	std	Y+5, r24	; 0x05
    40ca:	0f c0       	rjmp	.+30     	; 0x40ea <H_LCD_void_Init+0x31a>
    40cc:	80 e9       	ldi	r24, 0x90	; 144
    40ce:	91 e0       	ldi	r25, 0x01	; 1
    40d0:	9c 83       	std	Y+4, r25	; 0x04
    40d2:	8b 83       	std	Y+3, r24	; 0x03
    40d4:	8b 81       	ldd	r24, Y+3	; 0x03
    40d6:	9c 81       	ldd	r25, Y+4	; 0x04
    40d8:	01 97       	sbiw	r24, 0x01	; 1
    40da:	f1 f7       	brne	.-4      	; 0x40d8 <H_LCD_void_Init+0x308>
    40dc:	9c 83       	std	Y+4, r25	; 0x04
    40de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40e0:	8d 81       	ldd	r24, Y+5	; 0x05
    40e2:	9e 81       	ldd	r25, Y+6	; 0x06
    40e4:	01 97       	sbiw	r24, 0x01	; 1
    40e6:	9e 83       	std	Y+6, r25	; 0x06
    40e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40ea:	8d 81       	ldd	r24, Y+5	; 0x05
    40ec:	9e 81       	ldd	r25, Y+6	; 0x06
    40ee:	00 97       	sbiw	r24, 0x00	; 0
    40f0:	69 f7       	brne	.-38     	; 0x40cc <H_LCD_void_Init+0x2fc>
    40f2:	14 c0       	rjmp	.+40     	; 0x411c <H_LCD_void_Init+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40f4:	6f 81       	ldd	r22, Y+7	; 0x07
    40f6:	78 85       	ldd	r23, Y+8	; 0x08
    40f8:	89 85       	ldd	r24, Y+9	; 0x09
    40fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    40fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4100:	dc 01       	movw	r26, r24
    4102:	cb 01       	movw	r24, r22
    4104:	9e 83       	std	Y+6, r25	; 0x06
    4106:	8d 83       	std	Y+5, r24	; 0x05
    4108:	8d 81       	ldd	r24, Y+5	; 0x05
    410a:	9e 81       	ldd	r25, Y+6	; 0x06
    410c:	9a 83       	std	Y+2, r25	; 0x02
    410e:	89 83       	std	Y+1, r24	; 0x01
    4110:	89 81       	ldd	r24, Y+1	; 0x01
    4112:	9a 81       	ldd	r25, Y+2	; 0x02
    4114:	01 97       	sbiw	r24, 0x01	; 1
    4116:	f1 f7       	brne	.-4      	; 0x4114 <H_LCD_void_Init+0x344>
    4118:	9a 83       	std	Y+2, r25	; 0x02
    411a:	89 83       	std	Y+1, r24	; 0x01
	// delay to allow processing
	_delay_ms(5);
	H_LCD_void_sendCommand(LCD_4BIT_MODE_2LINES_5X7);
    411c:	88 e2       	ldi	r24, 0x28	; 40
    411e:	0e 94 b5 20 	call	0x416a	; 0x416a <H_LCD_void_sendCommand>
#else
  #error("wrong LCD Mode")
#endif
	// display ON/OFF
	H_LCD_void_sendCommand(LCD_DISPON_CURSON_BLINKOFF);
    4122:	8e e0       	ldi	r24, 0x0E	; 14
    4124:	0e 94 b5 20 	call	0x416a	; 0x416a <H_LCD_void_sendCommand>
	// display Clear
	H_LCD_void_sendCommand(LCD_CLEAR_DISPALY);
    4128:	81 e0       	ldi	r24, 0x01	; 1
    412a:	0e 94 b5 20 	call	0x416a	; 0x416a <H_LCD_void_sendCommand>
	// Entry Mode Set
	H_LCD_void_sendCommand(LCD_ENTRY_MODE_SET);
    412e:	86 e0       	ldi	r24, 0x06	; 6
    4130:	0e 94 b5 20 	call	0x416a	; 0x416a <H_LCD_void_sendCommand>

}
    4134:	aa 96       	adiw	r28, 0x2a	; 42
    4136:	0f b6       	in	r0, 0x3f	; 63
    4138:	f8 94       	cli
    413a:	de bf       	out	0x3e, r29	; 62
    413c:	0f be       	out	0x3f, r0	; 63
    413e:	cd bf       	out	0x3d, r28	; 61
    4140:	cf 91       	pop	r28
    4142:	df 91       	pop	r29
    4144:	08 95       	ret

00004146 <H_LCD_void_sendData>:
void H_LCD_void_sendData(u8 copy_u8data)
{
    4146:	df 93       	push	r29
    4148:	cf 93       	push	r28
    414a:	0f 92       	push	r0
    414c:	cd b7       	in	r28, 0x3d	; 61
    414e:	de b7       	in	r29, 0x3e	; 62
    4150:	89 83       	std	Y+1, r24	; 0x01
  // step 1 : select RS to be in data mode (RS = 1)
	M_DIO_void_setPinValue(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    4152:	80 e0       	ldi	r24, 0x00	; 0
    4154:	61 e0       	ldi	r22, 0x01	; 1
    4156:	41 e0       	ldi	r20, 0x01	; 1
    4158:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
  // step 2 : write data
   H_LCD_void_writeNlatch(copy_u8data);
    415c:	89 81       	ldd	r24, Y+1	; 0x01
    415e:	0e 94 cf 21 	call	0x439e	; 0x439e <H_LCD_void_writeNlatch>
}
    4162:	0f 90       	pop	r0
    4164:	cf 91       	pop	r28
    4166:	df 91       	pop	r29
    4168:	08 95       	ret

0000416a <H_LCD_void_sendCommand>:
void H_LCD_void_sendCommand(u8 copy_u8Command)
{
    416a:	df 93       	push	r29
    416c:	cf 93       	push	r28
    416e:	0f 92       	push	r0
    4170:	cd b7       	in	r28, 0x3d	; 61
    4172:	de b7       	in	r29, 0x3e	; 62
    4174:	89 83       	std	Y+1, r24	; 0x01
	// step 1 : select RS to be in command mode (RS = 0)
	M_DIO_void_setPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);
    4176:	80 e0       	ldi	r24, 0x00	; 0
    4178:	61 e0       	ldi	r22, 0x01	; 1
    417a:	40 e0       	ldi	r20, 0x00	; 0
    417c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
	// step 2 : write command
	H_LCD_void_writeNlatch(copy_u8Command);
    4180:	89 81       	ldd	r24, Y+1	; 0x01
    4182:	0e 94 cf 21 	call	0x439e	; 0x439e <H_LCD_void_writeNlatch>

}
    4186:	0f 90       	pop	r0
    4188:	cf 91       	pop	r28
    418a:	df 91       	pop	r29
    418c:	08 95       	ret

0000418e <H_LCD_void_sendString>:
void H_LCD_void_sendString(const s8 * pstr)
{
    418e:	df 93       	push	r29
    4190:	cf 93       	push	r28
    4192:	00 d0       	rcall	.+0      	; 0x4194 <H_LCD_void_sendString+0x6>
    4194:	cd b7       	in	r28, 0x3d	; 61
    4196:	de b7       	in	r29, 0x3e	; 62
    4198:	9a 83       	std	Y+2, r25	; 0x02
    419a:	89 83       	std	Y+1, r24	; 0x01
    419c:	0a c0       	rjmp	.+20     	; 0x41b2 <H_LCD_void_sendString+0x24>
   while(*pstr)
   {
	   H_LCD_void_sendData(*pstr);
    419e:	e9 81       	ldd	r30, Y+1	; 0x01
    41a0:	fa 81       	ldd	r31, Y+2	; 0x02
    41a2:	80 81       	ld	r24, Z
    41a4:	0e 94 a3 20 	call	0x4146	; 0x4146 <H_LCD_void_sendData>
	   pstr++;
    41a8:	89 81       	ldd	r24, Y+1	; 0x01
    41aa:	9a 81       	ldd	r25, Y+2	; 0x02
    41ac:	01 96       	adiw	r24, 0x01	; 1
    41ae:	9a 83       	std	Y+2, r25	; 0x02
    41b0:	89 83       	std	Y+1, r24	; 0x01
	H_LCD_void_writeNlatch(copy_u8Command);

}
void H_LCD_void_sendString(const s8 * pstr)
{
   while(*pstr)
    41b2:	e9 81       	ldd	r30, Y+1	; 0x01
    41b4:	fa 81       	ldd	r31, Y+2	; 0x02
    41b6:	80 81       	ld	r24, Z
    41b8:	88 23       	and	r24, r24
    41ba:	89 f7       	brne	.-30     	; 0x419e <H_LCD_void_sendString+0x10>
   {
	   H_LCD_void_sendData(*pstr);
	   pstr++;
   }
}
    41bc:	0f 90       	pop	r0
    41be:	0f 90       	pop	r0
    41c0:	cf 91       	pop	r28
    41c2:	df 91       	pop	r29
    41c4:	08 95       	ret

000041c6 <H_LCD_void_clear>:
void H_LCD_void_clear(void)
{
    41c6:	df 93       	push	r29
    41c8:	cf 93       	push	r28
    41ca:	cd b7       	in	r28, 0x3d	; 61
    41cc:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_sendCommand(LCD_CLEAR_DISPALY);
    41ce:	81 e0       	ldi	r24, 0x01	; 1
    41d0:	0e 94 b5 20 	call	0x416a	; 0x416a <H_LCD_void_sendCommand>
}
    41d4:	cf 91       	pop	r28
    41d6:	df 91       	pop	r29
    41d8:	08 95       	ret

000041da <H_LCD_void_sendIntNum>:
void H_LCD_void_sendIntNum(s32 copy_s32Num)
{
    41da:	0f 93       	push	r16
    41dc:	1f 93       	push	r17
    41de:	df 93       	push	r29
    41e0:	cf 93       	push	r28
    41e2:	cd b7       	in	r28, 0x3d	; 61
    41e4:	de b7       	in	r29, 0x3e	; 62
    41e6:	2f 97       	sbiw	r28, 0x0f	; 15
    41e8:	0f b6       	in	r0, 0x3f	; 63
    41ea:	f8 94       	cli
    41ec:	de bf       	out	0x3e, r29	; 62
    41ee:	0f be       	out	0x3f, r0	; 63
    41f0:	cd bf       	out	0x3d, r28	; 61
    41f2:	6c 87       	std	Y+12, r22	; 0x0c
    41f4:	7d 87       	std	Y+13, r23	; 0x0d
    41f6:	8e 87       	std	Y+14, r24	; 0x0e
    41f8:	9f 87       	std	Y+15, r25	; 0x0f
   u8 Loc_Arr[10]= {0};
    41fa:	8a e0       	ldi	r24, 0x0A	; 10
    41fc:	fe 01       	movw	r30, r28
    41fe:	32 96       	adiw	r30, 0x02	; 2
    4200:	df 01       	movw	r26, r30
    4202:	98 2f       	mov	r25, r24
    4204:	1d 92       	st	X+, r1
    4206:	9a 95       	dec	r25
    4208:	e9 f7       	brne	.-6      	; 0x4204 <H_LCD_void_sendIntNum+0x2a>
   s8 i = 0;
    420a:	19 82       	std	Y+1, r1	; 0x01
   if(copy_s32Num == 0)
    420c:	8c 85       	ldd	r24, Y+12	; 0x0c
    420e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4210:	ae 85       	ldd	r26, Y+14	; 0x0e
    4212:	bf 85       	ldd	r27, Y+15	; 0x0f
    4214:	00 97       	sbiw	r24, 0x00	; 0
    4216:	a1 05       	cpc	r26, r1
    4218:	b1 05       	cpc	r27, r1
    421a:	21 f4       	brne	.+8      	; 0x4224 <H_LCD_void_sendIntNum+0x4a>
   {
	   H_LCD_void_sendData('0');
    421c:	80 e3       	ldi	r24, 0x30	; 48
    421e:	0e 94 a3 20 	call	0x4146	; 0x4146 <H_LCD_void_sendData>
    4222:	69 c0       	rjmp	.+210    	; 0x42f6 <H_LCD_void_sendIntNum+0x11c>
	   return ;
   }
   else if(copy_s32Num < 0)//negative
    4224:	8c 85       	ldd	r24, Y+12	; 0x0c
    4226:	9d 85       	ldd	r25, Y+13	; 0x0d
    4228:	ae 85       	ldd	r26, Y+14	; 0x0e
    422a:	bf 85       	ldd	r27, Y+15	; 0x0f
    422c:	bb 23       	and	r27, r27
    422e:	0c f0       	brlt	.+2      	; 0x4232 <H_LCD_void_sendIntNum+0x58>
    4230:	42 c0       	rjmp	.+132    	; 0x42b6 <H_LCD_void_sendIntNum+0xdc>
   {
	   H_LCD_void_sendData('-');
    4232:	8d e2       	ldi	r24, 0x2D	; 45
    4234:	0e 94 a3 20 	call	0x4146	; 0x4146 <H_LCD_void_sendData>
	   copy_s32Num *= -1;
    4238:	8c 85       	ldd	r24, Y+12	; 0x0c
    423a:	9d 85       	ldd	r25, Y+13	; 0x0d
    423c:	ae 85       	ldd	r26, Y+14	; 0x0e
    423e:	bf 85       	ldd	r27, Y+15	; 0x0f
    4240:	b0 95       	com	r27
    4242:	a0 95       	com	r26
    4244:	90 95       	com	r25
    4246:	81 95       	neg	r24
    4248:	9f 4f       	sbci	r25, 0xFF	; 255
    424a:	af 4f       	sbci	r26, 0xFF	; 255
    424c:	bf 4f       	sbci	r27, 0xFF	; 255
    424e:	8c 87       	std	Y+12, r24	; 0x0c
    4250:	9d 87       	std	Y+13, r25	; 0x0d
    4252:	ae 87       	std	Y+14, r26	; 0x0e
    4254:	bf 87       	std	Y+15, r27	; 0x0f
    4256:	2f c0       	rjmp	.+94     	; 0x42b6 <H_LCD_void_sendIntNum+0xdc>
   }
   while(copy_s32Num != 0)
   {
	   Loc_Arr[i] = copy_s32Num % 10;
    4258:	89 81       	ldd	r24, Y+1	; 0x01
    425a:	08 2f       	mov	r16, r24
    425c:	11 27       	eor	r17, r17
    425e:	07 fd       	sbrc	r16, 7
    4260:	10 95       	com	r17
    4262:	8c 85       	ldd	r24, Y+12	; 0x0c
    4264:	9d 85       	ldd	r25, Y+13	; 0x0d
    4266:	ae 85       	ldd	r26, Y+14	; 0x0e
    4268:	bf 85       	ldd	r27, Y+15	; 0x0f
    426a:	2a e0       	ldi	r18, 0x0A	; 10
    426c:	30 e0       	ldi	r19, 0x00	; 0
    426e:	40 e0       	ldi	r20, 0x00	; 0
    4270:	50 e0       	ldi	r21, 0x00	; 0
    4272:	bc 01       	movw	r22, r24
    4274:	cd 01       	movw	r24, r26
    4276:	0e 94 20 26 	call	0x4c40	; 0x4c40 <__divmodsi4>
    427a:	dc 01       	movw	r26, r24
    427c:	cb 01       	movw	r24, r22
    427e:	28 2f       	mov	r18, r24
    4280:	ce 01       	movw	r24, r28
    4282:	02 96       	adiw	r24, 0x02	; 2
    4284:	fc 01       	movw	r30, r24
    4286:	e0 0f       	add	r30, r16
    4288:	f1 1f       	adc	r31, r17
    428a:	20 83       	st	Z, r18
	   copy_s32Num = copy_s32Num /10 ;
    428c:	8c 85       	ldd	r24, Y+12	; 0x0c
    428e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4290:	ae 85       	ldd	r26, Y+14	; 0x0e
    4292:	bf 85       	ldd	r27, Y+15	; 0x0f
    4294:	2a e0       	ldi	r18, 0x0A	; 10
    4296:	30 e0       	ldi	r19, 0x00	; 0
    4298:	40 e0       	ldi	r20, 0x00	; 0
    429a:	50 e0       	ldi	r21, 0x00	; 0
    429c:	bc 01       	movw	r22, r24
    429e:	cd 01       	movw	r24, r26
    42a0:	0e 94 20 26 	call	0x4c40	; 0x4c40 <__divmodsi4>
    42a4:	da 01       	movw	r26, r20
    42a6:	c9 01       	movw	r24, r18
    42a8:	8c 87       	std	Y+12, r24	; 0x0c
    42aa:	9d 87       	std	Y+13, r25	; 0x0d
    42ac:	ae 87       	std	Y+14, r26	; 0x0e
    42ae:	bf 87       	std	Y+15, r27	; 0x0f
	   i++;
    42b0:	89 81       	ldd	r24, Y+1	; 0x01
    42b2:	8f 5f       	subi	r24, 0xFF	; 255
    42b4:	89 83       	std	Y+1, r24	; 0x01
   else if(copy_s32Num < 0)//negative
   {
	   H_LCD_void_sendData('-');
	   copy_s32Num *= -1;
   }
   while(copy_s32Num != 0)
    42b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    42b8:	9d 85       	ldd	r25, Y+13	; 0x0d
    42ba:	ae 85       	ldd	r26, Y+14	; 0x0e
    42bc:	bf 85       	ldd	r27, Y+15	; 0x0f
    42be:	00 97       	sbiw	r24, 0x00	; 0
    42c0:	a1 05       	cpc	r26, r1
    42c2:	b1 05       	cpc	r27, r1
    42c4:	49 f6       	brne	.-110    	; 0x4258 <H_LCD_void_sendIntNum+0x7e>
   {
	   Loc_Arr[i] = copy_s32Num % 10;
	   copy_s32Num = copy_s32Num /10 ;
	   i++;
   }
   i--;
    42c6:	89 81       	ldd	r24, Y+1	; 0x01
    42c8:	81 50       	subi	r24, 0x01	; 1
    42ca:	89 83       	std	Y+1, r24	; 0x01
    42cc:	11 c0       	rjmp	.+34     	; 0x42f0 <H_LCD_void_sendIntNum+0x116>
   while(i>=0)
   {
	   H_LCD_void_sendData(Loc_Arr[i]+'0');
    42ce:	89 81       	ldd	r24, Y+1	; 0x01
    42d0:	28 2f       	mov	r18, r24
    42d2:	33 27       	eor	r19, r19
    42d4:	27 fd       	sbrc	r18, 7
    42d6:	30 95       	com	r19
    42d8:	ce 01       	movw	r24, r28
    42da:	02 96       	adiw	r24, 0x02	; 2
    42dc:	fc 01       	movw	r30, r24
    42de:	e2 0f       	add	r30, r18
    42e0:	f3 1f       	adc	r31, r19
    42e2:	80 81       	ld	r24, Z
    42e4:	80 5d       	subi	r24, 0xD0	; 208
    42e6:	0e 94 a3 20 	call	0x4146	; 0x4146 <H_LCD_void_sendData>
	   i--;
    42ea:	89 81       	ldd	r24, Y+1	; 0x01
    42ec:	81 50       	subi	r24, 0x01	; 1
    42ee:	89 83       	std	Y+1, r24	; 0x01
	   Loc_Arr[i] = copy_s32Num % 10;
	   copy_s32Num = copy_s32Num /10 ;
	   i++;
   }
   i--;
   while(i>=0)
    42f0:	89 81       	ldd	r24, Y+1	; 0x01
    42f2:	88 23       	and	r24, r24
    42f4:	64 f7       	brge	.-40     	; 0x42ce <H_LCD_void_sendIntNum+0xf4>
   {
	   H_LCD_void_sendData(Loc_Arr[i]+'0');
	   i--;
   }
}
    42f6:	2f 96       	adiw	r28, 0x0f	; 15
    42f8:	0f b6       	in	r0, 0x3f	; 63
    42fa:	f8 94       	cli
    42fc:	de bf       	out	0x3e, r29	; 62
    42fe:	0f be       	out	0x3f, r0	; 63
    4300:	cd bf       	out	0x3d, r28	; 61
    4302:	cf 91       	pop	r28
    4304:	df 91       	pop	r29
    4306:	1f 91       	pop	r17
    4308:	0f 91       	pop	r16
    430a:	08 95       	ret

0000430c <H_LCD_void_gotXY>:
void H_LCD_void_gotXY(u8 copy_u8Row,u8 copy_u8Col)
{
    430c:	df 93       	push	r29
    430e:	cf 93       	push	r28
    4310:	00 d0       	rcall	.+0      	; 0x4312 <H_LCD_void_gotXY+0x6>
    4312:	00 d0       	rcall	.+0      	; 0x4314 <H_LCD_void_gotXY+0x8>
    4314:	cd b7       	in	r28, 0x3d	; 61
    4316:	de b7       	in	r29, 0x3e	; 62
    4318:	89 83       	std	Y+1, r24	; 0x01
    431a:	6a 83       	std	Y+2, r22	; 0x02
  if(copy_u8Row == 0 || copy_u8Row == 1) //check on row
    431c:	89 81       	ldd	r24, Y+1	; 0x01
    431e:	88 23       	and	r24, r24
    4320:	19 f0       	breq	.+6      	; 0x4328 <H_LCD_void_gotXY+0x1c>
    4322:	89 81       	ldd	r24, Y+1	; 0x01
    4324:	81 30       	cpi	r24, 0x01	; 1
    4326:	d9 f4       	brne	.+54     	; 0x435e <H_LCD_void_gotXY+0x52>
  {
	  if(copy_u8Col >= 0 && copy_u8Col <= 15)// check on col
    4328:	8a 81       	ldd	r24, Y+2	; 0x02
    432a:	80 31       	cpi	r24, 0x10	; 16
    432c:	c0 f4       	brcc	.+48     	; 0x435e <H_LCD_void_gotXY+0x52>
	  {
          switch(copy_u8Row)
    432e:	89 81       	ldd	r24, Y+1	; 0x01
    4330:	28 2f       	mov	r18, r24
    4332:	30 e0       	ldi	r19, 0x00	; 0
    4334:	3c 83       	std	Y+4, r19	; 0x04
    4336:	2b 83       	std	Y+3, r18	; 0x03
    4338:	8b 81       	ldd	r24, Y+3	; 0x03
    433a:	9c 81       	ldd	r25, Y+4	; 0x04
    433c:	00 97       	sbiw	r24, 0x00	; 0
    433e:	31 f0       	breq	.+12     	; 0x434c <H_LCD_void_gotXY+0x40>
    4340:	2b 81       	ldd	r18, Y+3	; 0x03
    4342:	3c 81       	ldd	r19, Y+4	; 0x04
    4344:	21 30       	cpi	r18, 0x01	; 1
    4346:	31 05       	cpc	r19, r1
    4348:	31 f0       	breq	.+12     	; 0x4356 <H_LCD_void_gotXY+0x4a>
    434a:	09 c0       	rjmp	.+18     	; 0x435e <H_LCD_void_gotXY+0x52>
          {
          case 0 :
        	  H_LCD_void_sendCommand(LCD_SET_R0C0_ + copy_u8Col);
    434c:	8a 81       	ldd	r24, Y+2	; 0x02
    434e:	80 58       	subi	r24, 0x80	; 128
    4350:	0e 94 b5 20 	call	0x416a	; 0x416a <H_LCD_void_sendCommand>
    4354:	04 c0       	rjmp	.+8      	; 0x435e <H_LCD_void_gotXY+0x52>
        	  break;
          case 1 :
        	  H_LCD_void_sendCommand(LCD_SET_R1C0_ + copy_u8Col);
    4356:	8a 81       	ldd	r24, Y+2	; 0x02
    4358:	80 54       	subi	r24, 0x40	; 64
    435a:	0e 94 b5 20 	call	0x416a	; 0x416a <H_LCD_void_sendCommand>
        	  break;
          }
	  }
  }
}
    435e:	0f 90       	pop	r0
    4360:	0f 90       	pop	r0
    4362:	0f 90       	pop	r0
    4364:	0f 90       	pop	r0
    4366:	cf 91       	pop	r28
    4368:	df 91       	pop	r29
    436a:	08 95       	ret

0000436c <H_LCD_void_creatCustomChar>:
void H_LCD_void_creatCustomChar(const u8 * ArrPattern,u8 copy_u8charCode)
{
    436c:	df 93       	push	r29
    436e:	cf 93       	push	r28
    4370:	00 d0       	rcall	.+0      	; 0x4372 <H_LCD_void_creatCustomChar+0x6>
    4372:	0f 92       	push	r0
    4374:	cd b7       	in	r28, 0x3d	; 61
    4376:	de b7       	in	r29, 0x3e	; 62
    4378:	9a 83       	std	Y+2, r25	; 0x02
    437a:	89 83       	std	Y+1, r24	; 0x01
    437c:	6b 83       	std	Y+3, r22	; 0x03

}
    437e:	0f 90       	pop	r0
    4380:	0f 90       	pop	r0
    4382:	0f 90       	pop	r0
    4384:	cf 91       	pop	r28
    4386:	df 91       	pop	r29
    4388:	08 95       	ret

0000438a <H_LCD_void_displayCustomChar>:
void H_LCD_void_displayCustomChar(u8 copy_u8charCode)
{
    438a:	df 93       	push	r29
    438c:	cf 93       	push	r28
    438e:	0f 92       	push	r0
    4390:	cd b7       	in	r28, 0x3d	; 61
    4392:	de b7       	in	r29, 0x3e	; 62
    4394:	89 83       	std	Y+1, r24	; 0x01

}
    4396:	0f 90       	pop	r0
    4398:	cf 91       	pop	r28
    439a:	df 91       	pop	r29
    439c:	08 95       	ret

0000439e <H_LCD_void_writeNlatch>:
static void H_LCD_void_writeNlatch(u8 copy_u8Byte)
{
    439e:	df 93       	push	r29
    43a0:	cf 93       	push	r28
    43a2:	cd b7       	in	r28, 0x3d	; 61
    43a4:	de b7       	in	r29, 0x3e	; 62
    43a6:	e9 97       	sbiw	r28, 0x39	; 57
    43a8:	0f b6       	in	r0, 0x3f	; 63
    43aa:	f8 94       	cli
    43ac:	de bf       	out	0x3e, r29	; 62
    43ae:	0f be       	out	0x3f, r0	; 63
    43b0:	cd bf       	out	0x3d, r28	; 61
    43b2:	89 af       	std	Y+57, r24	; 0x39
 	M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,LOW);
  // step 5 : delay to allow LCD to process
 	_delay_ms(5);
#elif(LCD_MODE ==  LCD_4BIT_MODE_)
 	// EN = 0 disabled
 	M_DIO_void_setPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    43b4:	80 e0       	ldi	r24, 0x00	; 0
    43b6:	62 e0       	ldi	r22, 0x02	; 2
    43b8:	40 e0       	ldi	r20, 0x00	; 0
    43ba:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
 	// devide Byte to 2 (4 bits )
 	// step 1 :send high order bits on pins (D7 .. D4)
 	M_DIO_void_setPinValue(LCD_D4_PORT ,LCD_D4_PIN  , GET_BIT(copy_u8Byte,4));
    43be:	89 ad       	ldd	r24, Y+57	; 0x39
    43c0:	82 95       	swap	r24
    43c2:	8f 70       	andi	r24, 0x0F	; 15
    43c4:	98 2f       	mov	r25, r24
    43c6:	91 70       	andi	r25, 0x01	; 1
    43c8:	80 e0       	ldi	r24, 0x00	; 0
    43ca:	63 e0       	ldi	r22, 0x03	; 3
    43cc:	49 2f       	mov	r20, r25
    43ce:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
 	M_DIO_void_setPinValue(LCD_D5_PORT ,LCD_D5_PIN  , GET_BIT(copy_u8Byte,5));
    43d2:	89 ad       	ldd	r24, Y+57	; 0x39
    43d4:	82 95       	swap	r24
    43d6:	86 95       	lsr	r24
    43d8:	87 70       	andi	r24, 0x07	; 7
    43da:	98 2f       	mov	r25, r24
    43dc:	91 70       	andi	r25, 0x01	; 1
    43de:	80 e0       	ldi	r24, 0x00	; 0
    43e0:	64 e0       	ldi	r22, 0x04	; 4
    43e2:	49 2f       	mov	r20, r25
    43e4:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
 	M_DIO_void_setPinValue(LCD_D6_PORT ,LCD_D6_PIN  , GET_BIT(copy_u8Byte,6));
    43e8:	89 ad       	ldd	r24, Y+57	; 0x39
    43ea:	82 95       	swap	r24
    43ec:	86 95       	lsr	r24
    43ee:	86 95       	lsr	r24
    43f0:	83 70       	andi	r24, 0x03	; 3
    43f2:	98 2f       	mov	r25, r24
    43f4:	91 70       	andi	r25, 0x01	; 1
    43f6:	80 e0       	ldi	r24, 0x00	; 0
    43f8:	65 e0       	ldi	r22, 0x05	; 5
    43fa:	49 2f       	mov	r20, r25
    43fc:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
 	M_DIO_void_setPinValue(LCD_D7_PORT ,LCD_D7_PIN  , GET_BIT(copy_u8Byte,7));
    4400:	89 ad       	ldd	r24, Y+57	; 0x39
    4402:	98 2f       	mov	r25, r24
    4404:	99 1f       	adc	r25, r25
    4406:	99 27       	eor	r25, r25
    4408:	99 1f       	adc	r25, r25
    440a:	80 e0       	ldi	r24, 0x00	; 0
    440c:	66 e0       	ldi	r22, 0x06	; 6
    440e:	49 2f       	mov	r20, r25
    4410:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
 	  //step 2 : Activate Enable ,( E = 1)
 	M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,HIGH);
    4414:	80 e0       	ldi	r24, 0x00	; 0
    4416:	62 e0       	ldi	r22, 0x02	; 2
    4418:	41 e0       	ldi	r20, 0x01	; 1
    441a:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    441e:	80 e0       	ldi	r24, 0x00	; 0
    4420:	90 e0       	ldi	r25, 0x00	; 0
    4422:	a0 e8       	ldi	r26, 0x80	; 128
    4424:	bf e3       	ldi	r27, 0x3F	; 63
    4426:	8d ab       	std	Y+53, r24	; 0x35
    4428:	9e ab       	std	Y+54, r25	; 0x36
    442a:	af ab       	std	Y+55, r26	; 0x37
    442c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    442e:	6d a9       	ldd	r22, Y+53	; 0x35
    4430:	7e a9       	ldd	r23, Y+54	; 0x36
    4432:	8f a9       	ldd	r24, Y+55	; 0x37
    4434:	98 ad       	ldd	r25, Y+56	; 0x38
    4436:	20 e0       	ldi	r18, 0x00	; 0
    4438:	30 e0       	ldi	r19, 0x00	; 0
    443a:	4a e7       	ldi	r20, 0x7A	; 122
    443c:	55 e4       	ldi	r21, 0x45	; 69
    443e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4442:	dc 01       	movw	r26, r24
    4444:	cb 01       	movw	r24, r22
    4446:	89 ab       	std	Y+49, r24	; 0x31
    4448:	9a ab       	std	Y+50, r25	; 0x32
    444a:	ab ab       	std	Y+51, r26	; 0x33
    444c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    444e:	69 a9       	ldd	r22, Y+49	; 0x31
    4450:	7a a9       	ldd	r23, Y+50	; 0x32
    4452:	8b a9       	ldd	r24, Y+51	; 0x33
    4454:	9c a9       	ldd	r25, Y+52	; 0x34
    4456:	20 e0       	ldi	r18, 0x00	; 0
    4458:	30 e0       	ldi	r19, 0x00	; 0
    445a:	40 e8       	ldi	r20, 0x80	; 128
    445c:	5f e3       	ldi	r21, 0x3F	; 63
    445e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4462:	88 23       	and	r24, r24
    4464:	2c f4       	brge	.+10     	; 0x4470 <H_LCD_void_writeNlatch+0xd2>
		__ticks = 1;
    4466:	81 e0       	ldi	r24, 0x01	; 1
    4468:	90 e0       	ldi	r25, 0x00	; 0
    446a:	98 ab       	std	Y+48, r25	; 0x30
    446c:	8f a7       	std	Y+47, r24	; 0x2f
    446e:	3f c0       	rjmp	.+126    	; 0x44ee <H_LCD_void_writeNlatch+0x150>
	else if (__tmp > 65535)
    4470:	69 a9       	ldd	r22, Y+49	; 0x31
    4472:	7a a9       	ldd	r23, Y+50	; 0x32
    4474:	8b a9       	ldd	r24, Y+51	; 0x33
    4476:	9c a9       	ldd	r25, Y+52	; 0x34
    4478:	20 e0       	ldi	r18, 0x00	; 0
    447a:	3f ef       	ldi	r19, 0xFF	; 255
    447c:	4f e7       	ldi	r20, 0x7F	; 127
    447e:	57 e4       	ldi	r21, 0x47	; 71
    4480:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4484:	18 16       	cp	r1, r24
    4486:	4c f5       	brge	.+82     	; 0x44da <H_LCD_void_writeNlatch+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4488:	6d a9       	ldd	r22, Y+53	; 0x35
    448a:	7e a9       	ldd	r23, Y+54	; 0x36
    448c:	8f a9       	ldd	r24, Y+55	; 0x37
    448e:	98 ad       	ldd	r25, Y+56	; 0x38
    4490:	20 e0       	ldi	r18, 0x00	; 0
    4492:	30 e0       	ldi	r19, 0x00	; 0
    4494:	40 e2       	ldi	r20, 0x20	; 32
    4496:	51 e4       	ldi	r21, 0x41	; 65
    4498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    449c:	dc 01       	movw	r26, r24
    449e:	cb 01       	movw	r24, r22
    44a0:	bc 01       	movw	r22, r24
    44a2:	cd 01       	movw	r24, r26
    44a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44a8:	dc 01       	movw	r26, r24
    44aa:	cb 01       	movw	r24, r22
    44ac:	98 ab       	std	Y+48, r25	; 0x30
    44ae:	8f a7       	std	Y+47, r24	; 0x2f
    44b0:	0f c0       	rjmp	.+30     	; 0x44d0 <H_LCD_void_writeNlatch+0x132>
    44b2:	80 e9       	ldi	r24, 0x90	; 144
    44b4:	91 e0       	ldi	r25, 0x01	; 1
    44b6:	9e a7       	std	Y+46, r25	; 0x2e
    44b8:	8d a7       	std	Y+45, r24	; 0x2d
    44ba:	8d a5       	ldd	r24, Y+45	; 0x2d
    44bc:	9e a5       	ldd	r25, Y+46	; 0x2e
    44be:	01 97       	sbiw	r24, 0x01	; 1
    44c0:	f1 f7       	brne	.-4      	; 0x44be <H_LCD_void_writeNlatch+0x120>
    44c2:	9e a7       	std	Y+46, r25	; 0x2e
    44c4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    44c8:	98 a9       	ldd	r25, Y+48	; 0x30
    44ca:	01 97       	sbiw	r24, 0x01	; 1
    44cc:	98 ab       	std	Y+48, r25	; 0x30
    44ce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    44d2:	98 a9       	ldd	r25, Y+48	; 0x30
    44d4:	00 97       	sbiw	r24, 0x00	; 0
    44d6:	69 f7       	brne	.-38     	; 0x44b2 <H_LCD_void_writeNlatch+0x114>
    44d8:	14 c0       	rjmp	.+40     	; 0x4502 <H_LCD_void_writeNlatch+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44da:	69 a9       	ldd	r22, Y+49	; 0x31
    44dc:	7a a9       	ldd	r23, Y+50	; 0x32
    44de:	8b a9       	ldd	r24, Y+51	; 0x33
    44e0:	9c a9       	ldd	r25, Y+52	; 0x34
    44e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44e6:	dc 01       	movw	r26, r24
    44e8:	cb 01       	movw	r24, r22
    44ea:	98 ab       	std	Y+48, r25	; 0x30
    44ec:	8f a7       	std	Y+47, r24	; 0x2f
    44ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    44f0:	98 a9       	ldd	r25, Y+48	; 0x30
    44f2:	9c a7       	std	Y+44, r25	; 0x2c
    44f4:	8b a7       	std	Y+43, r24	; 0x2b
    44f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    44f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    44fa:	01 97       	sbiw	r24, 0x01	; 1
    44fc:	f1 f7       	brne	.-4      	; 0x44fa <H_LCD_void_writeNlatch+0x15c>
    44fe:	9c a7       	std	Y+44, r25	; 0x2c
    4500:	8b a7       	std	Y+43, r24	; 0x2b
 	  // step 3 : delay for 1 msec 	to allow latching
 	 	_delay_ms(1);
 	  // step 4 : deactivate Enable (E = 0)
 	 	M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,LOW);
    4502:	80 e0       	ldi	r24, 0x00	; 0
    4504:	62 e0       	ldi	r22, 0x02	; 2
    4506:	40 e0       	ldi	r20, 0x00	; 0
    4508:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    450c:	80 e0       	ldi	r24, 0x00	; 0
    450e:	90 e0       	ldi	r25, 0x00	; 0
    4510:	a0 ea       	ldi	r26, 0xA0	; 160
    4512:	b0 e4       	ldi	r27, 0x40	; 64
    4514:	8f a3       	std	Y+39, r24	; 0x27
    4516:	98 a7       	std	Y+40, r25	; 0x28
    4518:	a9 a7       	std	Y+41, r26	; 0x29
    451a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    451c:	6f a1       	ldd	r22, Y+39	; 0x27
    451e:	78 a5       	ldd	r23, Y+40	; 0x28
    4520:	89 a5       	ldd	r24, Y+41	; 0x29
    4522:	9a a5       	ldd	r25, Y+42	; 0x2a
    4524:	20 e0       	ldi	r18, 0x00	; 0
    4526:	30 e0       	ldi	r19, 0x00	; 0
    4528:	4a e7       	ldi	r20, 0x7A	; 122
    452a:	55 e4       	ldi	r21, 0x45	; 69
    452c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4530:	dc 01       	movw	r26, r24
    4532:	cb 01       	movw	r24, r22
    4534:	8b a3       	std	Y+35, r24	; 0x23
    4536:	9c a3       	std	Y+36, r25	; 0x24
    4538:	ad a3       	std	Y+37, r26	; 0x25
    453a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    453c:	6b a1       	ldd	r22, Y+35	; 0x23
    453e:	7c a1       	ldd	r23, Y+36	; 0x24
    4540:	8d a1       	ldd	r24, Y+37	; 0x25
    4542:	9e a1       	ldd	r25, Y+38	; 0x26
    4544:	20 e0       	ldi	r18, 0x00	; 0
    4546:	30 e0       	ldi	r19, 0x00	; 0
    4548:	40 e8       	ldi	r20, 0x80	; 128
    454a:	5f e3       	ldi	r21, 0x3F	; 63
    454c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4550:	88 23       	and	r24, r24
    4552:	2c f4       	brge	.+10     	; 0x455e <H_LCD_void_writeNlatch+0x1c0>
		__ticks = 1;
    4554:	81 e0       	ldi	r24, 0x01	; 1
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	9a a3       	std	Y+34, r25	; 0x22
    455a:	89 a3       	std	Y+33, r24	; 0x21
    455c:	3f c0       	rjmp	.+126    	; 0x45dc <H_LCD_void_writeNlatch+0x23e>
	else if (__tmp > 65535)
    455e:	6b a1       	ldd	r22, Y+35	; 0x23
    4560:	7c a1       	ldd	r23, Y+36	; 0x24
    4562:	8d a1       	ldd	r24, Y+37	; 0x25
    4564:	9e a1       	ldd	r25, Y+38	; 0x26
    4566:	20 e0       	ldi	r18, 0x00	; 0
    4568:	3f ef       	ldi	r19, 0xFF	; 255
    456a:	4f e7       	ldi	r20, 0x7F	; 127
    456c:	57 e4       	ldi	r21, 0x47	; 71
    456e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4572:	18 16       	cp	r1, r24
    4574:	4c f5       	brge	.+82     	; 0x45c8 <H_LCD_void_writeNlatch+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4576:	6f a1       	ldd	r22, Y+39	; 0x27
    4578:	78 a5       	ldd	r23, Y+40	; 0x28
    457a:	89 a5       	ldd	r24, Y+41	; 0x29
    457c:	9a a5       	ldd	r25, Y+42	; 0x2a
    457e:	20 e0       	ldi	r18, 0x00	; 0
    4580:	30 e0       	ldi	r19, 0x00	; 0
    4582:	40 e2       	ldi	r20, 0x20	; 32
    4584:	51 e4       	ldi	r21, 0x41	; 65
    4586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    458a:	dc 01       	movw	r26, r24
    458c:	cb 01       	movw	r24, r22
    458e:	bc 01       	movw	r22, r24
    4590:	cd 01       	movw	r24, r26
    4592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4596:	dc 01       	movw	r26, r24
    4598:	cb 01       	movw	r24, r22
    459a:	9a a3       	std	Y+34, r25	; 0x22
    459c:	89 a3       	std	Y+33, r24	; 0x21
    459e:	0f c0       	rjmp	.+30     	; 0x45be <H_LCD_void_writeNlatch+0x220>
    45a0:	80 e9       	ldi	r24, 0x90	; 144
    45a2:	91 e0       	ldi	r25, 0x01	; 1
    45a4:	98 a3       	std	Y+32, r25	; 0x20
    45a6:	8f 8f       	std	Y+31, r24	; 0x1f
    45a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    45aa:	98 a1       	ldd	r25, Y+32	; 0x20
    45ac:	01 97       	sbiw	r24, 0x01	; 1
    45ae:	f1 f7       	brne	.-4      	; 0x45ac <H_LCD_void_writeNlatch+0x20e>
    45b0:	98 a3       	std	Y+32, r25	; 0x20
    45b2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45b4:	89 a1       	ldd	r24, Y+33	; 0x21
    45b6:	9a a1       	ldd	r25, Y+34	; 0x22
    45b8:	01 97       	sbiw	r24, 0x01	; 1
    45ba:	9a a3       	std	Y+34, r25	; 0x22
    45bc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45be:	89 a1       	ldd	r24, Y+33	; 0x21
    45c0:	9a a1       	ldd	r25, Y+34	; 0x22
    45c2:	00 97       	sbiw	r24, 0x00	; 0
    45c4:	69 f7       	brne	.-38     	; 0x45a0 <H_LCD_void_writeNlatch+0x202>
    45c6:	14 c0       	rjmp	.+40     	; 0x45f0 <H_LCD_void_writeNlatch+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45c8:	6b a1       	ldd	r22, Y+35	; 0x23
    45ca:	7c a1       	ldd	r23, Y+36	; 0x24
    45cc:	8d a1       	ldd	r24, Y+37	; 0x25
    45ce:	9e a1       	ldd	r25, Y+38	; 0x26
    45d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45d4:	dc 01       	movw	r26, r24
    45d6:	cb 01       	movw	r24, r22
    45d8:	9a a3       	std	Y+34, r25	; 0x22
    45da:	89 a3       	std	Y+33, r24	; 0x21
    45dc:	89 a1       	ldd	r24, Y+33	; 0x21
    45de:	9a a1       	ldd	r25, Y+34	; 0x22
    45e0:	9e 8f       	std	Y+30, r25	; 0x1e
    45e2:	8d 8f       	std	Y+29, r24	; 0x1d
    45e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    45e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    45e8:	01 97       	sbiw	r24, 0x01	; 1
    45ea:	f1 f7       	brne	.-4      	; 0x45e8 <H_LCD_void_writeNlatch+0x24a>
    45ec:	9e 8f       	std	Y+30, r25	; 0x1e
    45ee:	8d 8f       	std	Y+29, r24	; 0x1d
 	  // step 5 : delay to allow LCD to process
 	 	_delay_ms(5);
 	 	// step 6 :send Low order bits on pins (D7 .. D4)
 	 	M_DIO_void_setPinValue(LCD_D4_PORT ,LCD_D4_PIN  , GET_BIT(copy_u8Byte,0));
    45f0:	89 ad       	ldd	r24, Y+57	; 0x39
    45f2:	98 2f       	mov	r25, r24
    45f4:	91 70       	andi	r25, 0x01	; 1
    45f6:	80 e0       	ldi	r24, 0x00	; 0
    45f8:	63 e0       	ldi	r22, 0x03	; 3
    45fa:	49 2f       	mov	r20, r25
    45fc:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
 	 	M_DIO_void_setPinValue(LCD_D5_PORT ,LCD_D5_PIN  , GET_BIT(copy_u8Byte,1));
    4600:	89 ad       	ldd	r24, Y+57	; 0x39
    4602:	86 95       	lsr	r24
    4604:	98 2f       	mov	r25, r24
    4606:	91 70       	andi	r25, 0x01	; 1
    4608:	80 e0       	ldi	r24, 0x00	; 0
    460a:	64 e0       	ldi	r22, 0x04	; 4
    460c:	49 2f       	mov	r20, r25
    460e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
 	 	M_DIO_void_setPinValue(LCD_D6_PORT ,LCD_D6_PIN  , GET_BIT(copy_u8Byte,2));
    4612:	89 ad       	ldd	r24, Y+57	; 0x39
    4614:	86 95       	lsr	r24
    4616:	86 95       	lsr	r24
    4618:	98 2f       	mov	r25, r24
    461a:	91 70       	andi	r25, 0x01	; 1
    461c:	80 e0       	ldi	r24, 0x00	; 0
    461e:	65 e0       	ldi	r22, 0x05	; 5
    4620:	49 2f       	mov	r20, r25
    4622:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
 	 	M_DIO_void_setPinValue(LCD_D7_PORT ,LCD_D7_PIN  , GET_BIT(copy_u8Byte,3));
    4626:	89 ad       	ldd	r24, Y+57	; 0x39
    4628:	86 95       	lsr	r24
    462a:	86 95       	lsr	r24
    462c:	86 95       	lsr	r24
    462e:	98 2f       	mov	r25, r24
    4630:	91 70       	andi	r25, 0x01	; 1
    4632:	80 e0       	ldi	r24, 0x00	; 0
    4634:	66 e0       	ldi	r22, 0x06	; 6
    4636:	49 2f       	mov	r20, r25
    4638:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
 	 	 //step 7 : Activate Enable ,( E = 1)
 	 	M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,HIGH);
    463c:	80 e0       	ldi	r24, 0x00	; 0
    463e:	62 e0       	ldi	r22, 0x02	; 2
    4640:	41 e0       	ldi	r20, 0x01	; 1
    4642:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    4646:	80 e0       	ldi	r24, 0x00	; 0
    4648:	90 e0       	ldi	r25, 0x00	; 0
    464a:	a0 e8       	ldi	r26, 0x80	; 128
    464c:	bf e3       	ldi	r27, 0x3F	; 63
    464e:	89 8f       	std	Y+25, r24	; 0x19
    4650:	9a 8f       	std	Y+26, r25	; 0x1a
    4652:	ab 8f       	std	Y+27, r26	; 0x1b
    4654:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4656:	69 8d       	ldd	r22, Y+25	; 0x19
    4658:	7a 8d       	ldd	r23, Y+26	; 0x1a
    465a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    465c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    465e:	20 e0       	ldi	r18, 0x00	; 0
    4660:	30 e0       	ldi	r19, 0x00	; 0
    4662:	4a e7       	ldi	r20, 0x7A	; 122
    4664:	55 e4       	ldi	r21, 0x45	; 69
    4666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    466a:	dc 01       	movw	r26, r24
    466c:	cb 01       	movw	r24, r22
    466e:	8d 8b       	std	Y+21, r24	; 0x15
    4670:	9e 8b       	std	Y+22, r25	; 0x16
    4672:	af 8b       	std	Y+23, r26	; 0x17
    4674:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4676:	6d 89       	ldd	r22, Y+21	; 0x15
    4678:	7e 89       	ldd	r23, Y+22	; 0x16
    467a:	8f 89       	ldd	r24, Y+23	; 0x17
    467c:	98 8d       	ldd	r25, Y+24	; 0x18
    467e:	20 e0       	ldi	r18, 0x00	; 0
    4680:	30 e0       	ldi	r19, 0x00	; 0
    4682:	40 e8       	ldi	r20, 0x80	; 128
    4684:	5f e3       	ldi	r21, 0x3F	; 63
    4686:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    468a:	88 23       	and	r24, r24
    468c:	2c f4       	brge	.+10     	; 0x4698 <H_LCD_void_writeNlatch+0x2fa>
		__ticks = 1;
    468e:	81 e0       	ldi	r24, 0x01	; 1
    4690:	90 e0       	ldi	r25, 0x00	; 0
    4692:	9c 8b       	std	Y+20, r25	; 0x14
    4694:	8b 8b       	std	Y+19, r24	; 0x13
    4696:	3f c0       	rjmp	.+126    	; 0x4716 <H_LCD_void_writeNlatch+0x378>
	else if (__tmp > 65535)
    4698:	6d 89       	ldd	r22, Y+21	; 0x15
    469a:	7e 89       	ldd	r23, Y+22	; 0x16
    469c:	8f 89       	ldd	r24, Y+23	; 0x17
    469e:	98 8d       	ldd	r25, Y+24	; 0x18
    46a0:	20 e0       	ldi	r18, 0x00	; 0
    46a2:	3f ef       	ldi	r19, 0xFF	; 255
    46a4:	4f e7       	ldi	r20, 0x7F	; 127
    46a6:	57 e4       	ldi	r21, 0x47	; 71
    46a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46ac:	18 16       	cp	r1, r24
    46ae:	4c f5       	brge	.+82     	; 0x4702 <H_LCD_void_writeNlatch+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46b0:	69 8d       	ldd	r22, Y+25	; 0x19
    46b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46b8:	20 e0       	ldi	r18, 0x00	; 0
    46ba:	30 e0       	ldi	r19, 0x00	; 0
    46bc:	40 e2       	ldi	r20, 0x20	; 32
    46be:	51 e4       	ldi	r21, 0x41	; 65
    46c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46c4:	dc 01       	movw	r26, r24
    46c6:	cb 01       	movw	r24, r22
    46c8:	bc 01       	movw	r22, r24
    46ca:	cd 01       	movw	r24, r26
    46cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46d0:	dc 01       	movw	r26, r24
    46d2:	cb 01       	movw	r24, r22
    46d4:	9c 8b       	std	Y+20, r25	; 0x14
    46d6:	8b 8b       	std	Y+19, r24	; 0x13
    46d8:	0f c0       	rjmp	.+30     	; 0x46f8 <H_LCD_void_writeNlatch+0x35a>
    46da:	80 e9       	ldi	r24, 0x90	; 144
    46dc:	91 e0       	ldi	r25, 0x01	; 1
    46de:	9a 8b       	std	Y+18, r25	; 0x12
    46e0:	89 8b       	std	Y+17, r24	; 0x11
    46e2:	89 89       	ldd	r24, Y+17	; 0x11
    46e4:	9a 89       	ldd	r25, Y+18	; 0x12
    46e6:	01 97       	sbiw	r24, 0x01	; 1
    46e8:	f1 f7       	brne	.-4      	; 0x46e6 <H_LCD_void_writeNlatch+0x348>
    46ea:	9a 8b       	std	Y+18, r25	; 0x12
    46ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46ee:	8b 89       	ldd	r24, Y+19	; 0x13
    46f0:	9c 89       	ldd	r25, Y+20	; 0x14
    46f2:	01 97       	sbiw	r24, 0x01	; 1
    46f4:	9c 8b       	std	Y+20, r25	; 0x14
    46f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46f8:	8b 89       	ldd	r24, Y+19	; 0x13
    46fa:	9c 89       	ldd	r25, Y+20	; 0x14
    46fc:	00 97       	sbiw	r24, 0x00	; 0
    46fe:	69 f7       	brne	.-38     	; 0x46da <H_LCD_void_writeNlatch+0x33c>
    4700:	14 c0       	rjmp	.+40     	; 0x472a <H_LCD_void_writeNlatch+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4702:	6d 89       	ldd	r22, Y+21	; 0x15
    4704:	7e 89       	ldd	r23, Y+22	; 0x16
    4706:	8f 89       	ldd	r24, Y+23	; 0x17
    4708:	98 8d       	ldd	r25, Y+24	; 0x18
    470a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    470e:	dc 01       	movw	r26, r24
    4710:	cb 01       	movw	r24, r22
    4712:	9c 8b       	std	Y+20, r25	; 0x14
    4714:	8b 8b       	std	Y+19, r24	; 0x13
    4716:	8b 89       	ldd	r24, Y+19	; 0x13
    4718:	9c 89       	ldd	r25, Y+20	; 0x14
    471a:	98 8b       	std	Y+16, r25	; 0x10
    471c:	8f 87       	std	Y+15, r24	; 0x0f
    471e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4720:	98 89       	ldd	r25, Y+16	; 0x10
    4722:	01 97       	sbiw	r24, 0x01	; 1
    4724:	f1 f7       	brne	.-4      	; 0x4722 <H_LCD_void_writeNlatch+0x384>
    4726:	98 8b       	std	Y+16, r25	; 0x10
    4728:	8f 87       	std	Y+15, r24	; 0x0f
 	 	 // step 8 : delay for 1 msec 	to allow latching
 	 	_delay_ms(1);
 	 	 // step 9 : deactivate Enable (E = 0)
 	 	M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,LOW);
    472a:	80 e0       	ldi	r24, 0x00	; 0
    472c:	62 e0       	ldi	r22, 0x02	; 2
    472e:	40 e0       	ldi	r20, 0x00	; 0
    4730:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    4734:	80 e0       	ldi	r24, 0x00	; 0
    4736:	90 e0       	ldi	r25, 0x00	; 0
    4738:	a0 ea       	ldi	r26, 0xA0	; 160
    473a:	b0 e4       	ldi	r27, 0x40	; 64
    473c:	8b 87       	std	Y+11, r24	; 0x0b
    473e:	9c 87       	std	Y+12, r25	; 0x0c
    4740:	ad 87       	std	Y+13, r26	; 0x0d
    4742:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4744:	6b 85       	ldd	r22, Y+11	; 0x0b
    4746:	7c 85       	ldd	r23, Y+12	; 0x0c
    4748:	8d 85       	ldd	r24, Y+13	; 0x0d
    474a:	9e 85       	ldd	r25, Y+14	; 0x0e
    474c:	20 e0       	ldi	r18, 0x00	; 0
    474e:	30 e0       	ldi	r19, 0x00	; 0
    4750:	4a e7       	ldi	r20, 0x7A	; 122
    4752:	55 e4       	ldi	r21, 0x45	; 69
    4754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4758:	dc 01       	movw	r26, r24
    475a:	cb 01       	movw	r24, r22
    475c:	8f 83       	std	Y+7, r24	; 0x07
    475e:	98 87       	std	Y+8, r25	; 0x08
    4760:	a9 87       	std	Y+9, r26	; 0x09
    4762:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4764:	6f 81       	ldd	r22, Y+7	; 0x07
    4766:	78 85       	ldd	r23, Y+8	; 0x08
    4768:	89 85       	ldd	r24, Y+9	; 0x09
    476a:	9a 85       	ldd	r25, Y+10	; 0x0a
    476c:	20 e0       	ldi	r18, 0x00	; 0
    476e:	30 e0       	ldi	r19, 0x00	; 0
    4770:	40 e8       	ldi	r20, 0x80	; 128
    4772:	5f e3       	ldi	r21, 0x3F	; 63
    4774:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4778:	88 23       	and	r24, r24
    477a:	2c f4       	brge	.+10     	; 0x4786 <H_LCD_void_writeNlatch+0x3e8>
		__ticks = 1;
    477c:	81 e0       	ldi	r24, 0x01	; 1
    477e:	90 e0       	ldi	r25, 0x00	; 0
    4780:	9e 83       	std	Y+6, r25	; 0x06
    4782:	8d 83       	std	Y+5, r24	; 0x05
    4784:	3f c0       	rjmp	.+126    	; 0x4804 <H_LCD_void_writeNlatch+0x466>
	else if (__tmp > 65535)
    4786:	6f 81       	ldd	r22, Y+7	; 0x07
    4788:	78 85       	ldd	r23, Y+8	; 0x08
    478a:	89 85       	ldd	r24, Y+9	; 0x09
    478c:	9a 85       	ldd	r25, Y+10	; 0x0a
    478e:	20 e0       	ldi	r18, 0x00	; 0
    4790:	3f ef       	ldi	r19, 0xFF	; 255
    4792:	4f e7       	ldi	r20, 0x7F	; 127
    4794:	57 e4       	ldi	r21, 0x47	; 71
    4796:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    479a:	18 16       	cp	r1, r24
    479c:	4c f5       	brge	.+82     	; 0x47f0 <H_LCD_void_writeNlatch+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    479e:	6b 85       	ldd	r22, Y+11	; 0x0b
    47a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    47a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    47a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    47a6:	20 e0       	ldi	r18, 0x00	; 0
    47a8:	30 e0       	ldi	r19, 0x00	; 0
    47aa:	40 e2       	ldi	r20, 0x20	; 32
    47ac:	51 e4       	ldi	r21, 0x41	; 65
    47ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47b2:	dc 01       	movw	r26, r24
    47b4:	cb 01       	movw	r24, r22
    47b6:	bc 01       	movw	r22, r24
    47b8:	cd 01       	movw	r24, r26
    47ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47be:	dc 01       	movw	r26, r24
    47c0:	cb 01       	movw	r24, r22
    47c2:	9e 83       	std	Y+6, r25	; 0x06
    47c4:	8d 83       	std	Y+5, r24	; 0x05
    47c6:	0f c0       	rjmp	.+30     	; 0x47e6 <H_LCD_void_writeNlatch+0x448>
    47c8:	80 e9       	ldi	r24, 0x90	; 144
    47ca:	91 e0       	ldi	r25, 0x01	; 1
    47cc:	9c 83       	std	Y+4, r25	; 0x04
    47ce:	8b 83       	std	Y+3, r24	; 0x03
    47d0:	8b 81       	ldd	r24, Y+3	; 0x03
    47d2:	9c 81       	ldd	r25, Y+4	; 0x04
    47d4:	01 97       	sbiw	r24, 0x01	; 1
    47d6:	f1 f7       	brne	.-4      	; 0x47d4 <H_LCD_void_writeNlatch+0x436>
    47d8:	9c 83       	std	Y+4, r25	; 0x04
    47da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47dc:	8d 81       	ldd	r24, Y+5	; 0x05
    47de:	9e 81       	ldd	r25, Y+6	; 0x06
    47e0:	01 97       	sbiw	r24, 0x01	; 1
    47e2:	9e 83       	std	Y+6, r25	; 0x06
    47e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47e6:	8d 81       	ldd	r24, Y+5	; 0x05
    47e8:	9e 81       	ldd	r25, Y+6	; 0x06
    47ea:	00 97       	sbiw	r24, 0x00	; 0
    47ec:	69 f7       	brne	.-38     	; 0x47c8 <H_LCD_void_writeNlatch+0x42a>
    47ee:	14 c0       	rjmp	.+40     	; 0x4818 <H_LCD_void_writeNlatch+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47f0:	6f 81       	ldd	r22, Y+7	; 0x07
    47f2:	78 85       	ldd	r23, Y+8	; 0x08
    47f4:	89 85       	ldd	r24, Y+9	; 0x09
    47f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    47f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47fc:	dc 01       	movw	r26, r24
    47fe:	cb 01       	movw	r24, r22
    4800:	9e 83       	std	Y+6, r25	; 0x06
    4802:	8d 83       	std	Y+5, r24	; 0x05
    4804:	8d 81       	ldd	r24, Y+5	; 0x05
    4806:	9e 81       	ldd	r25, Y+6	; 0x06
    4808:	9a 83       	std	Y+2, r25	; 0x02
    480a:	89 83       	std	Y+1, r24	; 0x01
    480c:	89 81       	ldd	r24, Y+1	; 0x01
    480e:	9a 81       	ldd	r25, Y+2	; 0x02
    4810:	01 97       	sbiw	r24, 0x01	; 1
    4812:	f1 f7       	brne	.-4      	; 0x4810 <H_LCD_void_writeNlatch+0x472>
    4814:	9a 83       	std	Y+2, r25	; 0x02
    4816:	89 83       	std	Y+1, r24	; 0x01
 	 	_delay_ms(5);
#else
  #error("Wrong LCD mode")
#endif

}
    4818:	e9 96       	adiw	r28, 0x39	; 57
    481a:	0f b6       	in	r0, 0x3f	; 63
    481c:	f8 94       	cli
    481e:	de bf       	out	0x3e, r29	; 62
    4820:	0f be       	out	0x3f, r0	; 63
    4822:	cd bf       	out	0x3d, r28	; 61
    4824:	cf 91       	pop	r28
    4826:	df 91       	pop	r29
    4828:	08 95       	ret

0000482a <H_KEYPAD_void_init>:
#include"KEYPAD_config.h"
#include"KEYPAD_int.h"
#include<util/delay.h>

void H_KEYPAD_void_init()
{
    482a:	df 93       	push	r29
    482c:	cf 93       	push	r28
    482e:	cd b7       	in	r28, 0x3d	; 61
    4830:	de b7       	in	r29, 0x3e	; 62
	//set all rows  direction as output
	M_DIO_void_setPinDir(KEYPAD_R0_PORT, KEYPAD_R0_PIN, OUT);
    4832:	81 e0       	ldi	r24, 0x01	; 1
    4834:	64 e0       	ldi	r22, 0x04	; 4
    4836:	41 e0       	ldi	r20, 0x01	; 1
    4838:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_R1_PORT, KEYPAD_R1_PIN, OUT);
    483c:	81 e0       	ldi	r24, 0x01	; 1
    483e:	65 e0       	ldi	r22, 0x05	; 5
    4840:	41 e0       	ldi	r20, 0x01	; 1
    4842:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_R2_PORT, KEYPAD_R2_PIN, OUT);
    4846:	81 e0       	ldi	r24, 0x01	; 1
    4848:	66 e0       	ldi	r22, 0x06	; 6
    484a:	41 e0       	ldi	r20, 0x01	; 1
    484c:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_R3_PORT, KEYPAD_R3_PIN, OUT);
    4850:	81 e0       	ldi	r24, 0x01	; 1
    4852:	67 e0       	ldi	r22, 0x07	; 7
    4854:	41 e0       	ldi	r20, 0x01	; 1
    4856:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>

	//set all collums direction as input
	M_DIO_void_setPinDir(KEYPAD_C0_PORT, KEYPAD_C0_PIN, IN);
    485a:	83 e0       	ldi	r24, 0x03	; 3
    485c:	62 e0       	ldi	r22, 0x02	; 2
    485e:	40 e0       	ldi	r20, 0x00	; 0
    4860:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_C1_PORT, KEYPAD_C1_PIN, IN);
    4864:	83 e0       	ldi	r24, 0x03	; 3
    4866:	63 e0       	ldi	r22, 0x03	; 3
    4868:	40 e0       	ldi	r20, 0x00	; 0
    486a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_C2_PORT, KEYPAD_C2_PIN, IN);
    486e:	83 e0       	ldi	r24, 0x03	; 3
    4870:	64 e0       	ldi	r22, 0x04	; 4
    4872:	40 e0       	ldi	r20, 0x00	; 0
    4874:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_C3_PORT, KEYPAD_C3_PIN, IN);
    4878:	83 e0       	ldi	r24, 0x03	; 3
    487a:	65 e0       	ldi	r22, 0x05	; 5
    487c:	40 e0       	ldi	r20, 0x00	; 0
    487e:	0e 94 9a 0c 	call	0x1934	; 0x1934 <M_DIO_void_setPinDir>

	//deactivate rows (high)
	M_DIO_void_setPinValue(KEYPAD_R0_PORT,KEYPAD_R0_PIN,HIGH);
    4882:	81 e0       	ldi	r24, 0x01	; 1
    4884:	64 e0       	ldi	r22, 0x04	; 4
    4886:	41 e0       	ldi	r20, 0x01	; 1
    4888:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(KEYPAD_R1_PORT,KEYPAD_R1_PIN,HIGH);
    488c:	81 e0       	ldi	r24, 0x01	; 1
    488e:	65 e0       	ldi	r22, 0x05	; 5
    4890:	41 e0       	ldi	r20, 0x01	; 1
    4892:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(KEYPAD_R2_PORT,KEYPAD_R2_PIN,HIGH);
    4896:	81 e0       	ldi	r24, 0x01	; 1
    4898:	66 e0       	ldi	r22, 0x06	; 6
    489a:	41 e0       	ldi	r20, 0x01	; 1
    489c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(KEYPAD_R3_PORT,KEYPAD_R3_PIN,HIGH);
    48a0:	81 e0       	ldi	r24, 0x01	; 1
    48a2:	67 e0       	ldi	r22, 0x07	; 7
    48a4:	41 e0       	ldi	r20, 0x01	; 1
    48a6:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
    }
    48aa:	cf 91       	pop	r28
    48ac:	df 91       	pop	r29
    48ae:	08 95       	ret

000048b0 <H_KEYPAD_void_getPressedKey>:

u8 H_KEYPAD_void_getPressedKey()
{
    48b0:	df 93       	push	r29
    48b2:	cf 93       	push	r28
    48b4:	cd b7       	in	r28, 0x3d	; 61
    48b6:	de b7       	in	r29, 0x3e	; 62
    48b8:	a8 97       	sbiw	r28, 0x28	; 40
    48ba:	0f b6       	in	r0, 0x3f	; 63
    48bc:	f8 94       	cli
    48be:	de bf       	out	0x3e, r29	; 62
    48c0:	0f be       	out	0x3f, r0	; 63
    48c2:	cd bf       	out	0x3d, r28	; 61
	u8 loc_Key= NUM_PRESSED_KEY ;
    48c4:	8f ef       	ldi	r24, 0xFF	; 255
    48c6:	89 8b       	std	Y+17, r24	; 0x11
	u8 loc_row_indx;
	u8 loc_col_indx;
	u8 loc_keypad_arr [4][4]=KEYPAD_ARR_MAP;
    48c8:	ce 01       	movw	r24, r28
    48ca:	42 96       	adiw	r24, 0x12	; 18
    48cc:	9d a3       	std	Y+37, r25	; 0x25
    48ce:	8c a3       	std	Y+36, r24	; 0x24
    48d0:	ec e7       	ldi	r30, 0x7C	; 124
    48d2:	f1 e0       	ldi	r31, 0x01	; 1
    48d4:	ff a3       	std	Y+39, r31	; 0x27
    48d6:	ee a3       	std	Y+38, r30	; 0x26
    48d8:	f0 e1       	ldi	r31, 0x10	; 16
    48da:	f8 a7       	std	Y+40, r31	; 0x28
    48dc:	ee a1       	ldd	r30, Y+38	; 0x26
    48de:	ff a1       	ldd	r31, Y+39	; 0x27
    48e0:	00 80       	ld	r0, Z
    48e2:	8e a1       	ldd	r24, Y+38	; 0x26
    48e4:	9f a1       	ldd	r25, Y+39	; 0x27
    48e6:	01 96       	adiw	r24, 0x01	; 1
    48e8:	9f a3       	std	Y+39, r25	; 0x27
    48ea:	8e a3       	std	Y+38, r24	; 0x26
    48ec:	ec a1       	ldd	r30, Y+36	; 0x24
    48ee:	fd a1       	ldd	r31, Y+37	; 0x25
    48f0:	00 82       	st	Z, r0
    48f2:	8c a1       	ldd	r24, Y+36	; 0x24
    48f4:	9d a1       	ldd	r25, Y+37	; 0x25
    48f6:	01 96       	adiw	r24, 0x01	; 1
    48f8:	9d a3       	std	Y+37, r25	; 0x25
    48fa:	8c a3       	std	Y+36, r24	; 0x24
    48fc:	98 a5       	ldd	r25, Y+40	; 0x28
    48fe:	91 50       	subi	r25, 0x01	; 1
    4900:	98 a7       	std	Y+40, r25	; 0x28
    4902:	e8 a5       	ldd	r30, Y+40	; 0x28
    4904:	ee 23       	and	r30, r30
    4906:	51 f7       	brne	.-44     	; 0x48dc <H_KEYPAD_void_getPressedKey+0x2c>
	u8 read;
	for(loc_row_indx=KEYPAD_R0_PIN;loc_row_indx<=KEYPAD_R3_PIN;loc_row_indx++)
    4908:	84 e0       	ldi	r24, 0x04	; 4
    490a:	88 8b       	std	Y+16, r24	; 0x10
    490c:	c9 c0       	rjmp	.+402    	; 0x4aa0 <H_KEYPAD_void_getPressedKey+0x1f0>
	{
		M_DIO_void_setPinValue(KEYPAD_ROWS_PORT,loc_row_indx,LOW);
    490e:	81 e0       	ldi	r24, 0x01	; 1
    4910:	68 89       	ldd	r22, Y+16	; 0x10
    4912:	40 e0       	ldi	r20, 0x00	; 0
    4914:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
		for (loc_col_indx=KEYPAD_C0_PIN;loc_col_indx<=KEYPAD_C3_PIN;loc_col_indx ++)
    4918:	82 e0       	ldi	r24, 0x02	; 2
    491a:	8f 87       	std	Y+15, r24	; 0x0f
    491c:	b5 c0       	rjmp	.+362    	; 0x4a88 <H_KEYPAD_void_getPressedKey+0x1d8>
		{
			M_DIO_void_getPinValue(KEYPAD_COLS_PORT, loc_col_indx, &read);
    491e:	9e 01       	movw	r18, r28
    4920:	2e 5d       	subi	r18, 0xDE	; 222
    4922:	3f 4f       	sbci	r19, 0xFF	; 255
    4924:	83 e0       	ldi	r24, 0x03	; 3
    4926:	6f 85       	ldd	r22, Y+15	; 0x0f
    4928:	a9 01       	movw	r20, r18
    492a:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <M_DIO_void_getPinValue>
			if(read==ACTIVE_LOW_PRESSED)
    492e:	8a a1       	ldd	r24, Y+34	; 0x22
    4930:	88 23       	and	r24, r24
    4932:	09 f0       	breq	.+2      	; 0x4936 <H_KEYPAD_void_getPressedKey+0x86>
    4934:	a6 c0       	rjmp	.+332    	; 0x4a82 <H_KEYPAD_void_getPressedKey+0x1d2>
    4936:	80 e0       	ldi	r24, 0x00	; 0
    4938:	90 e0       	ldi	r25, 0x00	; 0
    493a:	a8 ec       	ldi	r26, 0xC8	; 200
    493c:	b2 e4       	ldi	r27, 0x42	; 66
    493e:	8b 87       	std	Y+11, r24	; 0x0b
    4940:	9c 87       	std	Y+12, r25	; 0x0c
    4942:	ad 87       	std	Y+13, r26	; 0x0d
    4944:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4946:	6b 85       	ldd	r22, Y+11	; 0x0b
    4948:	7c 85       	ldd	r23, Y+12	; 0x0c
    494a:	8d 85       	ldd	r24, Y+13	; 0x0d
    494c:	9e 85       	ldd	r25, Y+14	; 0x0e
    494e:	20 e0       	ldi	r18, 0x00	; 0
    4950:	30 e0       	ldi	r19, 0x00	; 0
    4952:	4a e7       	ldi	r20, 0x7A	; 122
    4954:	55 e4       	ldi	r21, 0x45	; 69
    4956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    495a:	dc 01       	movw	r26, r24
    495c:	cb 01       	movw	r24, r22
    495e:	8f 83       	std	Y+7, r24	; 0x07
    4960:	98 87       	std	Y+8, r25	; 0x08
    4962:	a9 87       	std	Y+9, r26	; 0x09
    4964:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4966:	6f 81       	ldd	r22, Y+7	; 0x07
    4968:	78 85       	ldd	r23, Y+8	; 0x08
    496a:	89 85       	ldd	r24, Y+9	; 0x09
    496c:	9a 85       	ldd	r25, Y+10	; 0x0a
    496e:	20 e0       	ldi	r18, 0x00	; 0
    4970:	30 e0       	ldi	r19, 0x00	; 0
    4972:	40 e8       	ldi	r20, 0x80	; 128
    4974:	5f e3       	ldi	r21, 0x3F	; 63
    4976:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    497a:	88 23       	and	r24, r24
    497c:	2c f4       	brge	.+10     	; 0x4988 <H_KEYPAD_void_getPressedKey+0xd8>
		__ticks = 1;
    497e:	81 e0       	ldi	r24, 0x01	; 1
    4980:	90 e0       	ldi	r25, 0x00	; 0
    4982:	9e 83       	std	Y+6, r25	; 0x06
    4984:	8d 83       	std	Y+5, r24	; 0x05
    4986:	3f c0       	rjmp	.+126    	; 0x4a06 <H_KEYPAD_void_getPressedKey+0x156>
	else if (__tmp > 65535)
    4988:	6f 81       	ldd	r22, Y+7	; 0x07
    498a:	78 85       	ldd	r23, Y+8	; 0x08
    498c:	89 85       	ldd	r24, Y+9	; 0x09
    498e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4990:	20 e0       	ldi	r18, 0x00	; 0
    4992:	3f ef       	ldi	r19, 0xFF	; 255
    4994:	4f e7       	ldi	r20, 0x7F	; 127
    4996:	57 e4       	ldi	r21, 0x47	; 71
    4998:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    499c:	18 16       	cp	r1, r24
    499e:	4c f5       	brge	.+82     	; 0x49f2 <H_KEYPAD_void_getPressedKey+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    49a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    49a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    49a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    49a8:	20 e0       	ldi	r18, 0x00	; 0
    49aa:	30 e0       	ldi	r19, 0x00	; 0
    49ac:	40 e2       	ldi	r20, 0x20	; 32
    49ae:	51 e4       	ldi	r21, 0x41	; 65
    49b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49b4:	dc 01       	movw	r26, r24
    49b6:	cb 01       	movw	r24, r22
    49b8:	bc 01       	movw	r22, r24
    49ba:	cd 01       	movw	r24, r26
    49bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49c0:	dc 01       	movw	r26, r24
    49c2:	cb 01       	movw	r24, r22
    49c4:	9e 83       	std	Y+6, r25	; 0x06
    49c6:	8d 83       	std	Y+5, r24	; 0x05
    49c8:	0f c0       	rjmp	.+30     	; 0x49e8 <H_KEYPAD_void_getPressedKey+0x138>
    49ca:	80 e9       	ldi	r24, 0x90	; 144
    49cc:	91 e0       	ldi	r25, 0x01	; 1
    49ce:	9c 83       	std	Y+4, r25	; 0x04
    49d0:	8b 83       	std	Y+3, r24	; 0x03
    49d2:	8b 81       	ldd	r24, Y+3	; 0x03
    49d4:	9c 81       	ldd	r25, Y+4	; 0x04
    49d6:	01 97       	sbiw	r24, 0x01	; 1
    49d8:	f1 f7       	brne	.-4      	; 0x49d6 <H_KEYPAD_void_getPressedKey+0x126>
    49da:	9c 83       	std	Y+4, r25	; 0x04
    49dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49de:	8d 81       	ldd	r24, Y+5	; 0x05
    49e0:	9e 81       	ldd	r25, Y+6	; 0x06
    49e2:	01 97       	sbiw	r24, 0x01	; 1
    49e4:	9e 83       	std	Y+6, r25	; 0x06
    49e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49e8:	8d 81       	ldd	r24, Y+5	; 0x05
    49ea:	9e 81       	ldd	r25, Y+6	; 0x06
    49ec:	00 97       	sbiw	r24, 0x00	; 0
    49ee:	69 f7       	brne	.-38     	; 0x49ca <H_KEYPAD_void_getPressedKey+0x11a>
    49f0:	14 c0       	rjmp	.+40     	; 0x4a1a <H_KEYPAD_void_getPressedKey+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49f2:	6f 81       	ldd	r22, Y+7	; 0x07
    49f4:	78 85       	ldd	r23, Y+8	; 0x08
    49f6:	89 85       	ldd	r24, Y+9	; 0x09
    49f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    49fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49fe:	dc 01       	movw	r26, r24
    4a00:	cb 01       	movw	r24, r22
    4a02:	9e 83       	std	Y+6, r25	; 0x06
    4a04:	8d 83       	std	Y+5, r24	; 0x05
    4a06:	8d 81       	ldd	r24, Y+5	; 0x05
    4a08:	9e 81       	ldd	r25, Y+6	; 0x06
    4a0a:	9a 83       	std	Y+2, r25	; 0x02
    4a0c:	89 83       	std	Y+1, r24	; 0x01
    4a0e:	89 81       	ldd	r24, Y+1	; 0x01
    4a10:	9a 81       	ldd	r25, Y+2	; 0x02
    4a12:	01 97       	sbiw	r24, 0x01	; 1
    4a14:	f1 f7       	brne	.-4      	; 0x4a12 <H_KEYPAD_void_getPressedKey+0x162>
    4a16:	9a 83       	std	Y+2, r25	; 0x02
    4a18:	89 83       	std	Y+1, r24	; 0x01
			{
				//debouncing delay
				_delay_ms(100);
				M_DIO_void_getPinValue(KEYPAD_COLS_PORT, loc_col_indx, &read);
    4a1a:	9e 01       	movw	r18, r28
    4a1c:	2e 5d       	subi	r18, 0xDE	; 222
    4a1e:	3f 4f       	sbci	r19, 0xFF	; 255
    4a20:	83 e0       	ldi	r24, 0x03	; 3
    4a22:	6f 85       	ldd	r22, Y+15	; 0x0f
    4a24:	a9 01       	movw	r20, r18
    4a26:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <M_DIO_void_getPinValue>
				if(read==ACTIVE_LOW_PRESSED)
    4a2a:	8a a1       	ldd	r24, Y+34	; 0x22
    4a2c:	88 23       	and	r24, r24
    4a2e:	49 f5       	brne	.+82     	; 0x4a82 <H_KEYPAD_void_getPressedKey+0x1d2>
    4a30:	08 c0       	rjmp	.+16     	; 0x4a42 <H_KEYPAD_void_getPressedKey+0x192>
				{

						while(read==ACTIVE_LOW_PRESSED)
						{
							M_DIO_void_getPinValue(KEYPAD_COLS_PORT, loc_col_indx, &read);
    4a32:	9e 01       	movw	r18, r28
    4a34:	2e 5d       	subi	r18, 0xDE	; 222
    4a36:	3f 4f       	sbci	r19, 0xFF	; 255
    4a38:	83 e0       	ldi	r24, 0x03	; 3
    4a3a:	6f 85       	ldd	r22, Y+15	; 0x0f
    4a3c:	a9 01       	movw	r20, r18
    4a3e:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <M_DIO_void_getPinValue>
				_delay_ms(100);
				M_DIO_void_getPinValue(KEYPAD_COLS_PORT, loc_col_indx, &read);
				if(read==ACTIVE_LOW_PRESSED)
				{

						while(read==ACTIVE_LOW_PRESSED)
    4a42:	8a a1       	ldd	r24, Y+34	; 0x22
    4a44:	88 23       	and	r24, r24
    4a46:	a9 f3       	breq	.-22     	; 0x4a32 <H_KEYPAD_void_getPressedKey+0x182>
						{
							M_DIO_void_getPinValue(KEYPAD_COLS_PORT, loc_col_indx, &read);
						}//while
						loc_Key =loc_keypad_arr[loc_row_indx - KEYPAD_R0_PIN][loc_col_indx - KEYPAD_C0_PIN];
    4a48:	88 89       	ldd	r24, Y+16	; 0x10
    4a4a:	88 2f       	mov	r24, r24
    4a4c:	90 e0       	ldi	r25, 0x00	; 0
    4a4e:	9c 01       	movw	r18, r24
    4a50:	24 50       	subi	r18, 0x04	; 4
    4a52:	30 40       	sbci	r19, 0x00	; 0
    4a54:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a56:	88 2f       	mov	r24, r24
    4a58:	90 e0       	ldi	r25, 0x00	; 0
    4a5a:	ac 01       	movw	r20, r24
    4a5c:	42 50       	subi	r20, 0x02	; 2
    4a5e:	50 40       	sbci	r21, 0x00	; 0
    4a60:	22 0f       	add	r18, r18
    4a62:	33 1f       	adc	r19, r19
    4a64:	22 0f       	add	r18, r18
    4a66:	33 1f       	adc	r19, r19
    4a68:	ce 01       	movw	r24, r28
    4a6a:	01 96       	adiw	r24, 0x01	; 1
    4a6c:	82 0f       	add	r24, r18
    4a6e:	93 1f       	adc	r25, r19
    4a70:	84 0f       	add	r24, r20
    4a72:	95 1f       	adc	r25, r21
    4a74:	fc 01       	movw	r30, r24
    4a76:	71 96       	adiw	r30, 0x11	; 17
    4a78:	80 81       	ld	r24, Z
    4a7a:	89 8b       	std	Y+17, r24	; 0x11
						return loc_Key;
    4a7c:	f9 89       	ldd	r31, Y+17	; 0x11
    4a7e:	fb a3       	std	Y+35, r31	; 0x23
    4a80:	15 c0       	rjmp	.+42     	; 0x4aac <H_KEYPAD_void_getPressedKey+0x1fc>
	u8 loc_keypad_arr [4][4]=KEYPAD_ARR_MAP;
	u8 read;
	for(loc_row_indx=KEYPAD_R0_PIN;loc_row_indx<=KEYPAD_R3_PIN;loc_row_indx++)
	{
		M_DIO_void_setPinValue(KEYPAD_ROWS_PORT,loc_row_indx,LOW);
		for (loc_col_indx=KEYPAD_C0_PIN;loc_col_indx<=KEYPAD_C3_PIN;loc_col_indx ++)
    4a82:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a84:	8f 5f       	subi	r24, 0xFF	; 255
    4a86:	8f 87       	std	Y+15, r24	; 0x0f
    4a88:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a8a:	86 30       	cpi	r24, 0x06	; 6
    4a8c:	08 f4       	brcc	.+2      	; 0x4a90 <H_KEYPAD_void_getPressedKey+0x1e0>
    4a8e:	47 cf       	rjmp	.-370    	; 0x491e <H_KEYPAD_void_getPressedKey+0x6e>
					}// if 2nd reading
				}// if 1St reading

			}// for
			// Deactivate row (HIGH )
		M_DIO_void_setPinValue(KEYPAD_ROWS_PORT,loc_row_indx,HIGH);
    4a90:	81 e0       	ldi	r24, 0x01	; 1
    4a92:	68 89       	ldd	r22, Y+16	; 0x10
    4a94:	41 e0       	ldi	r20, 0x01	; 1
    4a96:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_DIO_void_setPinValue>
	u8 loc_Key= NUM_PRESSED_KEY ;
	u8 loc_row_indx;
	u8 loc_col_indx;
	u8 loc_keypad_arr [4][4]=KEYPAD_ARR_MAP;
	u8 read;
	for(loc_row_indx=KEYPAD_R0_PIN;loc_row_indx<=KEYPAD_R3_PIN;loc_row_indx++)
    4a9a:	88 89       	ldd	r24, Y+16	; 0x10
    4a9c:	8f 5f       	subi	r24, 0xFF	; 255
    4a9e:	88 8b       	std	Y+16, r24	; 0x10
    4aa0:	88 89       	ldd	r24, Y+16	; 0x10
    4aa2:	88 30       	cpi	r24, 0x08	; 8
    4aa4:	08 f4       	brcc	.+2      	; 0x4aa8 <H_KEYPAD_void_getPressedKey+0x1f8>
    4aa6:	33 cf       	rjmp	.-410    	; 0x490e <H_KEYPAD_void_getPressedKey+0x5e>

			}// for
			// Deactivate row (HIGH )
		M_DIO_void_setPinValue(KEYPAD_ROWS_PORT,loc_row_indx,HIGH);
		}
		return loc_Key;
    4aa8:	89 89       	ldd	r24, Y+17	; 0x11
    4aaa:	8b a3       	std	Y+35, r24	; 0x23
    4aac:	8b a1       	ldd	r24, Y+35	; 0x23
	}
    4aae:	a8 96       	adiw	r28, 0x28	; 40
    4ab0:	0f b6       	in	r0, 0x3f	; 63
    4ab2:	f8 94       	cli
    4ab4:	de bf       	out	0x3e, r29	; 62
    4ab6:	0f be       	out	0x3f, r0	; 63
    4ab8:	cd bf       	out	0x3d, r28	; 61
    4aba:	cf 91       	pop	r28
    4abc:	df 91       	pop	r29
    4abe:	08 95       	ret

00004ac0 <main>:
#include "DIO_int.h"
#include"LCD_int.h"
#include"SPI_int.h"

void main (void)
{
    4ac0:	df 93       	push	r29
    4ac2:	cf 93       	push	r28
    4ac4:	cd b7       	in	r28, 0x3d	; 61
    4ac6:	de b7       	in	r29, 0x3e	; 62
    4ac8:	2e 97       	sbiw	r28, 0x0e	; 14
    4aca:	0f b6       	in	r0, 0x3f	; 63
    4acc:	f8 94       	cli
    4ace:	de bf       	out	0x3e, r29	; 62
    4ad0:	0f be       	out	0x3f, r0	; 63
    4ad2:	cd bf       	out	0x3d, r28	; 61

	M_SPI_void_MasterInit();
    4ad4:	0e 94 87 0a 	call	0x150e	; 0x150e <M_SPI_void_MasterInit>
	while(1)
	{
		M_SPI_void_MasterTransmit('A');
    4ad8:	81 e4       	ldi	r24, 0x41	; 65
    4ada:	0e 94 b2 0a 	call	0x1564	; 0x1564 <M_SPI_void_MasterTransmit>
    4ade:	80 e0       	ldi	r24, 0x00	; 0
    4ae0:	90 e0       	ldi	r25, 0x00	; 0
    4ae2:	aa e7       	ldi	r26, 0x7A	; 122
    4ae4:	b4 e4       	ldi	r27, 0x44	; 68
    4ae6:	8b 87       	std	Y+11, r24	; 0x0b
    4ae8:	9c 87       	std	Y+12, r25	; 0x0c
    4aea:	ad 87       	std	Y+13, r26	; 0x0d
    4aec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4aee:	6b 85       	ldd	r22, Y+11	; 0x0b
    4af0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4af2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4af4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4af6:	20 e0       	ldi	r18, 0x00	; 0
    4af8:	30 e0       	ldi	r19, 0x00	; 0
    4afa:	4a e7       	ldi	r20, 0x7A	; 122
    4afc:	55 e4       	ldi	r21, 0x45	; 69
    4afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b02:	dc 01       	movw	r26, r24
    4b04:	cb 01       	movw	r24, r22
    4b06:	8f 83       	std	Y+7, r24	; 0x07
    4b08:	98 87       	std	Y+8, r25	; 0x08
    4b0a:	a9 87       	std	Y+9, r26	; 0x09
    4b0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b0e:	6f 81       	ldd	r22, Y+7	; 0x07
    4b10:	78 85       	ldd	r23, Y+8	; 0x08
    4b12:	89 85       	ldd	r24, Y+9	; 0x09
    4b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b16:	20 e0       	ldi	r18, 0x00	; 0
    4b18:	30 e0       	ldi	r19, 0x00	; 0
    4b1a:	40 e8       	ldi	r20, 0x80	; 128
    4b1c:	5f e3       	ldi	r21, 0x3F	; 63
    4b1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b22:	88 23       	and	r24, r24
    4b24:	2c f4       	brge	.+10     	; 0x4b30 <main+0x70>
		__ticks = 1;
    4b26:	81 e0       	ldi	r24, 0x01	; 1
    4b28:	90 e0       	ldi	r25, 0x00	; 0
    4b2a:	9e 83       	std	Y+6, r25	; 0x06
    4b2c:	8d 83       	std	Y+5, r24	; 0x05
    4b2e:	3f c0       	rjmp	.+126    	; 0x4bae <main+0xee>
	else if (__tmp > 65535)
    4b30:	6f 81       	ldd	r22, Y+7	; 0x07
    4b32:	78 85       	ldd	r23, Y+8	; 0x08
    4b34:	89 85       	ldd	r24, Y+9	; 0x09
    4b36:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b38:	20 e0       	ldi	r18, 0x00	; 0
    4b3a:	3f ef       	ldi	r19, 0xFF	; 255
    4b3c:	4f e7       	ldi	r20, 0x7F	; 127
    4b3e:	57 e4       	ldi	r21, 0x47	; 71
    4b40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b44:	18 16       	cp	r1, r24
    4b46:	4c f5       	brge	.+82     	; 0x4b9a <main+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b48:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b50:	20 e0       	ldi	r18, 0x00	; 0
    4b52:	30 e0       	ldi	r19, 0x00	; 0
    4b54:	40 e2       	ldi	r20, 0x20	; 32
    4b56:	51 e4       	ldi	r21, 0x41	; 65
    4b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b5c:	dc 01       	movw	r26, r24
    4b5e:	cb 01       	movw	r24, r22
    4b60:	bc 01       	movw	r22, r24
    4b62:	cd 01       	movw	r24, r26
    4b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b68:	dc 01       	movw	r26, r24
    4b6a:	cb 01       	movw	r24, r22
    4b6c:	9e 83       	std	Y+6, r25	; 0x06
    4b6e:	8d 83       	std	Y+5, r24	; 0x05
    4b70:	0f c0       	rjmp	.+30     	; 0x4b90 <main+0xd0>
    4b72:	80 e9       	ldi	r24, 0x90	; 144
    4b74:	91 e0       	ldi	r25, 0x01	; 1
    4b76:	9c 83       	std	Y+4, r25	; 0x04
    4b78:	8b 83       	std	Y+3, r24	; 0x03
    4b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    4b7e:	01 97       	sbiw	r24, 0x01	; 1
    4b80:	f1 f7       	brne	.-4      	; 0x4b7e <main+0xbe>
    4b82:	9c 83       	std	Y+4, r25	; 0x04
    4b84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b86:	8d 81       	ldd	r24, Y+5	; 0x05
    4b88:	9e 81       	ldd	r25, Y+6	; 0x06
    4b8a:	01 97       	sbiw	r24, 0x01	; 1
    4b8c:	9e 83       	std	Y+6, r25	; 0x06
    4b8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b90:	8d 81       	ldd	r24, Y+5	; 0x05
    4b92:	9e 81       	ldd	r25, Y+6	; 0x06
    4b94:	00 97       	sbiw	r24, 0x00	; 0
    4b96:	69 f7       	brne	.-38     	; 0x4b72 <main+0xb2>
    4b98:	9f cf       	rjmp	.-194    	; 0x4ad8 <main+0x18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b9a:	6f 81       	ldd	r22, Y+7	; 0x07
    4b9c:	78 85       	ldd	r23, Y+8	; 0x08
    4b9e:	89 85       	ldd	r24, Y+9	; 0x09
    4ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ba6:	dc 01       	movw	r26, r24
    4ba8:	cb 01       	movw	r24, r22
    4baa:	9e 83       	std	Y+6, r25	; 0x06
    4bac:	8d 83       	std	Y+5, r24	; 0x05
    4bae:	8d 81       	ldd	r24, Y+5	; 0x05
    4bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    4bb2:	9a 83       	std	Y+2, r25	; 0x02
    4bb4:	89 83       	std	Y+1, r24	; 0x01
    4bb6:	89 81       	ldd	r24, Y+1	; 0x01
    4bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    4bba:	01 97       	sbiw	r24, 0x01	; 1
    4bbc:	f1 f7       	brne	.-4      	; 0x4bba <main+0xfa>
    4bbe:	9a 83       	std	Y+2, r25	; 0x02
    4bc0:	89 83       	std	Y+1, r24	; 0x01
    4bc2:	8a cf       	rjmp	.-236    	; 0x4ad8 <main+0x18>

00004bc4 <__mulsi3>:
    4bc4:	62 9f       	mul	r22, r18
    4bc6:	d0 01       	movw	r26, r0
    4bc8:	73 9f       	mul	r23, r19
    4bca:	f0 01       	movw	r30, r0
    4bcc:	82 9f       	mul	r24, r18
    4bce:	e0 0d       	add	r30, r0
    4bd0:	f1 1d       	adc	r31, r1
    4bd2:	64 9f       	mul	r22, r20
    4bd4:	e0 0d       	add	r30, r0
    4bd6:	f1 1d       	adc	r31, r1
    4bd8:	92 9f       	mul	r25, r18
    4bda:	f0 0d       	add	r31, r0
    4bdc:	83 9f       	mul	r24, r19
    4bde:	f0 0d       	add	r31, r0
    4be0:	74 9f       	mul	r23, r20
    4be2:	f0 0d       	add	r31, r0
    4be4:	65 9f       	mul	r22, r21
    4be6:	f0 0d       	add	r31, r0
    4be8:	99 27       	eor	r25, r25
    4bea:	72 9f       	mul	r23, r18
    4bec:	b0 0d       	add	r27, r0
    4bee:	e1 1d       	adc	r30, r1
    4bf0:	f9 1f       	adc	r31, r25
    4bf2:	63 9f       	mul	r22, r19
    4bf4:	b0 0d       	add	r27, r0
    4bf6:	e1 1d       	adc	r30, r1
    4bf8:	f9 1f       	adc	r31, r25
    4bfa:	bd 01       	movw	r22, r26
    4bfc:	cf 01       	movw	r24, r30
    4bfe:	11 24       	eor	r1, r1
    4c00:	08 95       	ret

00004c02 <__udivmodqi4>:
    4c02:	99 1b       	sub	r25, r25
    4c04:	79 e0       	ldi	r23, 0x09	; 9
    4c06:	04 c0       	rjmp	.+8      	; 0x4c10 <__udivmodqi4_ep>

00004c08 <__udivmodqi4_loop>:
    4c08:	99 1f       	adc	r25, r25
    4c0a:	96 17       	cp	r25, r22
    4c0c:	08 f0       	brcs	.+2      	; 0x4c10 <__udivmodqi4_ep>
    4c0e:	96 1b       	sub	r25, r22

00004c10 <__udivmodqi4_ep>:
    4c10:	88 1f       	adc	r24, r24
    4c12:	7a 95       	dec	r23
    4c14:	c9 f7       	brne	.-14     	; 0x4c08 <__udivmodqi4_loop>
    4c16:	80 95       	com	r24
    4c18:	08 95       	ret

00004c1a <__divmodhi4>:
    4c1a:	97 fb       	bst	r25, 7
    4c1c:	09 2e       	mov	r0, r25
    4c1e:	07 26       	eor	r0, r23
    4c20:	0a d0       	rcall	.+20     	; 0x4c36 <__divmodhi4_neg1>
    4c22:	77 fd       	sbrc	r23, 7
    4c24:	04 d0       	rcall	.+8      	; 0x4c2e <__divmodhi4_neg2>
    4c26:	27 d0       	rcall	.+78     	; 0x4c76 <__udivmodhi4>
    4c28:	06 d0       	rcall	.+12     	; 0x4c36 <__divmodhi4_neg1>
    4c2a:	00 20       	and	r0, r0
    4c2c:	1a f4       	brpl	.+6      	; 0x4c34 <__divmodhi4_exit>

00004c2e <__divmodhi4_neg2>:
    4c2e:	70 95       	com	r23
    4c30:	61 95       	neg	r22
    4c32:	7f 4f       	sbci	r23, 0xFF	; 255

00004c34 <__divmodhi4_exit>:
    4c34:	08 95       	ret

00004c36 <__divmodhi4_neg1>:
    4c36:	f6 f7       	brtc	.-4      	; 0x4c34 <__divmodhi4_exit>
    4c38:	90 95       	com	r25
    4c3a:	81 95       	neg	r24
    4c3c:	9f 4f       	sbci	r25, 0xFF	; 255
    4c3e:	08 95       	ret

00004c40 <__divmodsi4>:
    4c40:	97 fb       	bst	r25, 7
    4c42:	09 2e       	mov	r0, r25
    4c44:	05 26       	eor	r0, r21
    4c46:	0e d0       	rcall	.+28     	; 0x4c64 <__divmodsi4_neg1>
    4c48:	57 fd       	sbrc	r21, 7
    4c4a:	04 d0       	rcall	.+8      	; 0x4c54 <__divmodsi4_neg2>
    4c4c:	28 d0       	rcall	.+80     	; 0x4c9e <__udivmodsi4>
    4c4e:	0a d0       	rcall	.+20     	; 0x4c64 <__divmodsi4_neg1>
    4c50:	00 1c       	adc	r0, r0
    4c52:	38 f4       	brcc	.+14     	; 0x4c62 <__divmodsi4_exit>

00004c54 <__divmodsi4_neg2>:
    4c54:	50 95       	com	r21
    4c56:	40 95       	com	r20
    4c58:	30 95       	com	r19
    4c5a:	21 95       	neg	r18
    4c5c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c5e:	4f 4f       	sbci	r20, 0xFF	; 255
    4c60:	5f 4f       	sbci	r21, 0xFF	; 255

00004c62 <__divmodsi4_exit>:
    4c62:	08 95       	ret

00004c64 <__divmodsi4_neg1>:
    4c64:	f6 f7       	brtc	.-4      	; 0x4c62 <__divmodsi4_exit>
    4c66:	90 95       	com	r25
    4c68:	80 95       	com	r24
    4c6a:	70 95       	com	r23
    4c6c:	61 95       	neg	r22
    4c6e:	7f 4f       	sbci	r23, 0xFF	; 255
    4c70:	8f 4f       	sbci	r24, 0xFF	; 255
    4c72:	9f 4f       	sbci	r25, 0xFF	; 255
    4c74:	08 95       	ret

00004c76 <__udivmodhi4>:
    4c76:	aa 1b       	sub	r26, r26
    4c78:	bb 1b       	sub	r27, r27
    4c7a:	51 e1       	ldi	r21, 0x11	; 17
    4c7c:	07 c0       	rjmp	.+14     	; 0x4c8c <__udivmodhi4_ep>

00004c7e <__udivmodhi4_loop>:
    4c7e:	aa 1f       	adc	r26, r26
    4c80:	bb 1f       	adc	r27, r27
    4c82:	a6 17       	cp	r26, r22
    4c84:	b7 07       	cpc	r27, r23
    4c86:	10 f0       	brcs	.+4      	; 0x4c8c <__udivmodhi4_ep>
    4c88:	a6 1b       	sub	r26, r22
    4c8a:	b7 0b       	sbc	r27, r23

00004c8c <__udivmodhi4_ep>:
    4c8c:	88 1f       	adc	r24, r24
    4c8e:	99 1f       	adc	r25, r25
    4c90:	5a 95       	dec	r21
    4c92:	a9 f7       	brne	.-22     	; 0x4c7e <__udivmodhi4_loop>
    4c94:	80 95       	com	r24
    4c96:	90 95       	com	r25
    4c98:	bc 01       	movw	r22, r24
    4c9a:	cd 01       	movw	r24, r26
    4c9c:	08 95       	ret

00004c9e <__udivmodsi4>:
    4c9e:	a1 e2       	ldi	r26, 0x21	; 33
    4ca0:	1a 2e       	mov	r1, r26
    4ca2:	aa 1b       	sub	r26, r26
    4ca4:	bb 1b       	sub	r27, r27
    4ca6:	fd 01       	movw	r30, r26
    4ca8:	0d c0       	rjmp	.+26     	; 0x4cc4 <__udivmodsi4_ep>

00004caa <__udivmodsi4_loop>:
    4caa:	aa 1f       	adc	r26, r26
    4cac:	bb 1f       	adc	r27, r27
    4cae:	ee 1f       	adc	r30, r30
    4cb0:	ff 1f       	adc	r31, r31
    4cb2:	a2 17       	cp	r26, r18
    4cb4:	b3 07       	cpc	r27, r19
    4cb6:	e4 07       	cpc	r30, r20
    4cb8:	f5 07       	cpc	r31, r21
    4cba:	20 f0       	brcs	.+8      	; 0x4cc4 <__udivmodsi4_ep>
    4cbc:	a2 1b       	sub	r26, r18
    4cbe:	b3 0b       	sbc	r27, r19
    4cc0:	e4 0b       	sbc	r30, r20
    4cc2:	f5 0b       	sbc	r31, r21

00004cc4 <__udivmodsi4_ep>:
    4cc4:	66 1f       	adc	r22, r22
    4cc6:	77 1f       	adc	r23, r23
    4cc8:	88 1f       	adc	r24, r24
    4cca:	99 1f       	adc	r25, r25
    4ccc:	1a 94       	dec	r1
    4cce:	69 f7       	brne	.-38     	; 0x4caa <__udivmodsi4_loop>
    4cd0:	60 95       	com	r22
    4cd2:	70 95       	com	r23
    4cd4:	80 95       	com	r24
    4cd6:	90 95       	com	r25
    4cd8:	9b 01       	movw	r18, r22
    4cda:	ac 01       	movw	r20, r24
    4cdc:	bd 01       	movw	r22, r26
    4cde:	cf 01       	movw	r24, r30
    4ce0:	08 95       	ret

00004ce2 <__prologue_saves__>:
    4ce2:	2f 92       	push	r2
    4ce4:	3f 92       	push	r3
    4ce6:	4f 92       	push	r4
    4ce8:	5f 92       	push	r5
    4cea:	6f 92       	push	r6
    4cec:	7f 92       	push	r7
    4cee:	8f 92       	push	r8
    4cf0:	9f 92       	push	r9
    4cf2:	af 92       	push	r10
    4cf4:	bf 92       	push	r11
    4cf6:	cf 92       	push	r12
    4cf8:	df 92       	push	r13
    4cfa:	ef 92       	push	r14
    4cfc:	ff 92       	push	r15
    4cfe:	0f 93       	push	r16
    4d00:	1f 93       	push	r17
    4d02:	cf 93       	push	r28
    4d04:	df 93       	push	r29
    4d06:	cd b7       	in	r28, 0x3d	; 61
    4d08:	de b7       	in	r29, 0x3e	; 62
    4d0a:	ca 1b       	sub	r28, r26
    4d0c:	db 0b       	sbc	r29, r27
    4d0e:	0f b6       	in	r0, 0x3f	; 63
    4d10:	f8 94       	cli
    4d12:	de bf       	out	0x3e, r29	; 62
    4d14:	0f be       	out	0x3f, r0	; 63
    4d16:	cd bf       	out	0x3d, r28	; 61
    4d18:	09 94       	ijmp

00004d1a <__epilogue_restores__>:
    4d1a:	2a 88       	ldd	r2, Y+18	; 0x12
    4d1c:	39 88       	ldd	r3, Y+17	; 0x11
    4d1e:	48 88       	ldd	r4, Y+16	; 0x10
    4d20:	5f 84       	ldd	r5, Y+15	; 0x0f
    4d22:	6e 84       	ldd	r6, Y+14	; 0x0e
    4d24:	7d 84       	ldd	r7, Y+13	; 0x0d
    4d26:	8c 84       	ldd	r8, Y+12	; 0x0c
    4d28:	9b 84       	ldd	r9, Y+11	; 0x0b
    4d2a:	aa 84       	ldd	r10, Y+10	; 0x0a
    4d2c:	b9 84       	ldd	r11, Y+9	; 0x09
    4d2e:	c8 84       	ldd	r12, Y+8	; 0x08
    4d30:	df 80       	ldd	r13, Y+7	; 0x07
    4d32:	ee 80       	ldd	r14, Y+6	; 0x06
    4d34:	fd 80       	ldd	r15, Y+5	; 0x05
    4d36:	0c 81       	ldd	r16, Y+4	; 0x04
    4d38:	1b 81       	ldd	r17, Y+3	; 0x03
    4d3a:	aa 81       	ldd	r26, Y+2	; 0x02
    4d3c:	b9 81       	ldd	r27, Y+1	; 0x01
    4d3e:	ce 0f       	add	r28, r30
    4d40:	d1 1d       	adc	r29, r1
    4d42:	0f b6       	in	r0, 0x3f	; 63
    4d44:	f8 94       	cli
    4d46:	de bf       	out	0x3e, r29	; 62
    4d48:	0f be       	out	0x3f, r0	; 63
    4d4a:	cd bf       	out	0x3d, r28	; 61
    4d4c:	ed 01       	movw	r28, r26
    4d4e:	08 95       	ret

00004d50 <_exit>:
    4d50:	f8 94       	cli

00004d52 <__stop_program>:
    4d52:	ff cf       	rjmp	.-2      	; 0x4d52 <__stop_program>
